[{"filePath":"/Users/bennerrr/Feathur/client/web/postcss.config.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/bennerrr/Feathur/client/web/src/app.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/bennerrr/Feathur/client/web/src/lib/api/client.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ApiResponse' is defined but never used. Allowed unused vars must match /^_/u.","line":3,"column":2,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'PaginatedResponse' is defined but never used. Allowed unused vars must match /^_/u.","line":4,"column":2,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'getStorageItem' is defined but never used. Allowed unused vars must match /^_/u.","line":13,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":13,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'setStorageItem' is defined but never used. Allowed unused vars must match /^_/u.","line":13,"column":26,"nodeType":null,"messageId":"unusedVar","endLine":13,"endColumn":40},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'removeStorageItem' is defined but never used. Allowed unused vars must match /^_/u.","line":13,"column":42,"nodeType":null,"messageId":"unusedVar","endLine":13,"endColumn":59},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":185,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":185,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4387,4390],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4387,4390],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":238,"column":82,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":238,"endColumn":85,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6071,6074],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6071,6074],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { browser } from '$app/environment';\nimport type {\n\tApiResponse,\n\tPaginatedResponse,\n\tLoginRequest,\n\tRegisterRequest,\n\tAuthResponse,\n\tUser,\n\tServer,\n\tChannel,\n\tMessage\n} from '$lib/types';\nimport { getStorageItem, setStorageItem, removeStorageItem } from '$lib/utils';\n\n// Use relative URLs in browser to leverage Vite's proxy, fallback to direct URL\nconst API_BASE_URL = browser ? '' : (import.meta.env.PUBLIC_API_URL || 'http://localhost:8081');\n\nclass ApiError extends Error {\n\tconstructor(\n\t\tpublic status: number,\n\t\tmessage: string,\n\t\tpublic data?: unknown\n\t) {\n\t\tsuper(message);\n\t\tthis.name = 'ApiError';\n\t}\n}\n\nclass ApiClient {\n\tpublic baseUrl: string;\n\tprivate token: string | null = null;\n\n\tconstructor(baseUrl?: string) {\n\t\tthis.baseUrl = baseUrl || API_BASE_URL;\n\t}\n\n\t// Token management\n\tsetToken(token: string): void {\n\t\tthis.token = token;\n\t}\n\n\tclearToken(): void {\n\t\tthis.token = null;\n\t}\n\n\tgetToken(): string | null {\n\t\treturn this.token;\n\t}\n\n\t// HTTP request helper\n\tprivate async request<T>(\n\t\tendpoint: string,\n\t\toptions: RequestInit = {}\n\t): Promise<T> {\n\t\tconst url = `${this.baseUrl}${endpoint}`;\n\t\tconst headers: Record<string, string> = {\n\t\t\t'Content-Type': 'application/json',\n\t\t\t...options.headers as Record<string, string>\n\t\t};\n\n\t\tif (this.token) {\n\t\t\theaders.Authorization = `Bearer ${this.token}`;\n\t\t}\n\n\t\tconst config: RequestInit = {\n\t\t\t...options,\n\t\t\theaders\n\t\t};\n\n\t\ttry {\n\t\t\tconst response = await fetch(url, config);\n\t\t\t\n\t\t\tif (!response.ok) {\n\t\t\t\tlet errorMessage = `HTTP ${response.status}`;\n\t\t\t\tlet errorData: unknown = null;\n\n\t\t\t\ttry {\n\t\t\t\t\tconst errorResponse = await response.json();\n\t\t\t\t\terrorMessage = errorResponse.message || errorMessage;\n\t\t\t\t\terrorData = errorResponse;\n\t\t\t\t} catch {\n\t\t\t\t\t// If error response is not JSON, use status text\n\t\t\t\t\terrorMessage = response.statusText || errorMessage;\n\t\t\t\t}\n\n\t\t\t\tthrow new ApiError(response.status, errorMessage, errorData);\n\t\t\t}\n\n\t\t\t// Handle empty responses\n\t\t\tconst contentType = response.headers.get('content-type');\n\t\t\tif (contentType && contentType.includes('application/json')) {\n\t\t\t\treturn await response.json();\n\t\t\t}\n\n\t\t\treturn {} as T;\n\t\t} catch (error) {\n\t\t\tif (error instanceof ApiError) {\n\t\t\t\tthrow error;\n\t\t\t}\n\t\t\tthrow new ApiError(0, 'Network error', error);\n\t\t}\n\t}\n\n\t// Authentication endpoints\n\tasync login(credentials: LoginRequest): Promise<AuthResponse> {\n\t\treturn this.request<AuthResponse>('/api/auth/login', {\n\t\t\tmethod: 'POST',\n\t\t\tbody: JSON.stringify(credentials)\n\t\t});\n\t}\n\n\tasync register(userData: RegisterRequest): Promise<AuthResponse> {\n\t\treturn this.request<AuthResponse>('/api/auth/register', {\n\t\t\tmethod: 'POST',\n\t\t\tbody: JSON.stringify(userData)\n\t\t});\n\t}\n\n\tasync logout(): Promise<void> {\n\t\tawait this.request<void>('/api/auth/logout', {\n\t\t\tmethod: 'POST'\n\t\t});\n\t}\n\n\tasync refreshToken(): Promise<AuthResponse> {\n\t\treturn this.request<AuthResponse>('/api/auth/refresh', {\n\t\t\tmethod: 'POST'\n\t\t});\n\t}\n\n\tasync getCurrentUser(): Promise<User> {\n\t\treturn this.request<User>('/api/auth/me');\n\t}\n\n\tasync guestLogin(): Promise<AuthResponse> {\n\t\treturn this.request<AuthResponse>('/api/auth/guest', {\n\t\t\tmethod: 'POST'\n\t\t});\n\t}\n\n\t// User endpoints\n\tasync getUserProfile(): Promise<User> {\n\t\treturn this.request<User>('/api/user/profile');\n\t}\n\n\tasync updateUserProfile(updates: Partial<User>): Promise<User> {\n\t\treturn this.request<User>('/api/user/profile', {\n\t\t\tmethod: 'PUT',\n\t\t\tbody: JSON.stringify(updates)\n\t\t});\n\t}\n\n\t// Server endpoints\n\tasync getServers(): Promise<Server[]> {\n\t\tconst response = await this.request<{ servers: Server[] }>('/api/servers');\n\t\treturn response.servers;\n\t}\n\n\tasync getServer(serverId: number): Promise<Server> {\n\t\treturn this.request<Server>(`/api/servers/${serverId}`);\n\t}\n\n\tasync createServer(serverData: Partial<Server>): Promise<Server> {\n\t\treturn this.request<Server>('/api/servers', {\n\t\t\tmethod: 'POST',\n\t\t\tbody: JSON.stringify(serverData)\n\t\t});\n\t}\n\n\tasync updateServer(serverId: number, updates: Partial<Server>): Promise<Server> {\n\t\treturn this.request<Server>(`/api/servers/${serverId}`, {\n\t\t\tmethod: 'PUT',\n\t\t\tbody: JSON.stringify(updates)\n\t\t});\n\t}\n\n\tasync deleteServer(serverId: number): Promise<void> {\n\t\tawait this.request<void>(`/api/servers/${serverId}`, {\n\t\t\tmethod: 'DELETE'\n\t\t});\n\t}\n\n\t// Channel endpoints\n\tasync getChannels(serverId: number): Promise<Channel[]> {\n\t\tconst response = await this.request<{ channels: any[] }>(`/api/servers/${serverId}/channels`);\n\t\t// Map the API response to match the frontend Channel interface\n\t\treturn response.channels.map(channel => ({\n\t\t\t...channel,\n\t\t\ttype: channel.channel_type, // Map channel_type to type\n\t\t\tserverId: serverId\n\t\t}));\n\t}\n\n\tasync getServerUsers(serverId: number): Promise<User[]> {\n\t\tconst response = await this.request<{ success: boolean; data: User[] }>(`/api/servers/${serverId}/users`);\n\t\treturn response.data;\n\t}\n\n\tasync createChannel(serverId: number, channelData: Partial<Channel>): Promise<Channel> {\n\t\treturn this.request<Channel>(`/api/servers/${serverId}/channels`, {\n\t\t\tmethod: 'POST',\n\t\t\tbody: JSON.stringify(channelData)\n\t\t});\n\t}\n\n\tasync updateChannel(channelId: number, updates: Partial<Channel>): Promise<Channel> {\n\t\treturn this.request<Channel>(`/api/channels/${channelId}`, {\n\t\t\tmethod: 'PUT',\n\t\t\tbody: JSON.stringify(updates)\n\t\t});\n\t}\n\n\tasync deleteChannel(channelId: number): Promise<void> {\n\t\tawait this.request<void>(`/api/channels/${channelId}`, {\n\t\t\tmethod: 'DELETE'\n\t\t});\n\t}\n\n\t// Message endpoints\n\tasync getMessages(\n\t\tchannelId: number,\n\t\tpage = 1,\n\t\tlimit = 50\n\t): Promise<{ messages: Message[] }> {\n\t\tconst params = new URLSearchParams({\n\t\t\tpage: page.toString(),\n\t\t\tlimit: limit.toString()\n\t\t});\n\t\treturn this.request<{ messages: Message[] }>(`/api/channels/${channelId}/messages?${params}`);\n\t}\n\n\tasync sendMessage(channelId: number, content: string, replyToId?: number): Promise<Message> {\n\t\tconst messageData: { content: string; replyToId?: number } = { content };\n\t\tif (replyToId) {\n\t\t\tmessageData.replyToId = replyToId;\n\t\t}\n\n\t\tconst response = await this.request<{ success: boolean; message: string; data: any }>(`/api/channels/${channelId}/messages`, {\n\t\t\tmethod: 'POST',\n\t\t\tbody: JSON.stringify(messageData)\n\t\t});\n\n\t\t// Return the message data from the response\n\t\treturn response.data;\n\t}\n\n\tasync updateMessage(messageId: number, content: string): Promise<Message> {\n\t\treturn this.request<Message>(`/api/messages/${messageId}`, {\n\t\t\tmethod: 'PUT',\n\t\t\tbody: JSON.stringify({ content })\n\t\t});\n\t}\n\n\tasync deleteMessage(messageId: number): Promise<void> {\n\t\tawait this.request<void>(`/api/messages/${messageId}`, {\n\t\t\tmethod: 'DELETE'\n\t\t});\n\t}\n\n\t// Admin endpoints\n\tasync getUsers(): Promise<User[]> {\n\t\tconst response = await this.request<{ success: boolean; data: User[] }>('/api/admin/users');\n\t\treturn response.data;\n\t}\n\n\tasync createUser(userData: Partial<User>): Promise<User> {\n\t\treturn this.request<User>('/api/admin/users', {\n\t\t\tmethod: 'POST',\n\t\t\tbody: JSON.stringify(userData)\n\t\t});\n\t}\n\n\tasync updateUser(userId: number, updates: Partial<User>): Promise<User> {\n\t\treturn this.request<User>(`/api/admin/users/${userId}`, {\n\t\t\tmethod: 'PUT',\n\t\t\tbody: JSON.stringify(updates)\n\t\t});\n\t}\n\n\tasync deleteUser(userId: number): Promise<void> {\n\t\tawait this.request<void>(`/api/admin/users/${userId}`, {\n\t\t\tmethod: 'DELETE'\n\t\t});\n\t}\n\n\tasync updateUserRole(userId: number, role: string): Promise<User> {\n\t\treturn this.request<User>(`/api/admin/users/${userId}/role`, {\n\t\t\tmethod: 'POST',\n\t\t\tbody: JSON.stringify({ role })\n\t\t});\n\t}\n\n\tasync kickUser(userId: number, reason?: string): Promise<void> {\n\t\tawait this.request<void>(`/api/admin/users/${userId}/kick`, {\n\t\t\tmethod: 'POST',\n\t\t\tbody: JSON.stringify({ reason })\n\t\t});\n\t}\n\n\tasync banUser(userId: number, reason?: string, duration?: number): Promise<void> {\n\t\tawait this.request<void>(`/api/admin/users/${userId}/ban`, {\n\t\t\tmethod: 'POST',\n\t\t\tbody: JSON.stringify({ reason, duration })\n\t\t});\n\t}\n\n\tasync muteUser(userId: number, reason?: string, duration?: number): Promise<void> {\n\t\tawait this.request<void>(`/api/admin/users/${userId}/mute`, {\n\t\t\tmethod: 'POST',\n\t\t\tbody: JSON.stringify({ reason, duration })\n\t\t});\n\t}\n\n\tasync unbanUser(userId: number): Promise<void> {\n\t\tawait this.request<void>(`/api/admin/users/${userId}/unban`, {\n\t\t\tmethod: 'POST'\n\t\t});\n\t}\n\n\tasync unmuteUser(userId: number): Promise<void> {\n\t\tawait this.request<void>(`/api/admin/users/${userId}/unmute`, {\n\t\t\tmethod: 'POST'\n\t\t});\n\t}\n\n\t// Health check\n\tasync healthCheck(): Promise<{ status: string; timestamp: string }> {\n\t\treturn this.request<{ status: string; timestamp: string }>('/health');\n\t}\n\n\t// Admin endpoints\n\tasync getAdminHealth(): Promise<unknown> {\n\t\treturn this.request<unknown>('/api/admin/health');\n\t}\n\n\tasync getMetrics(): Promise<unknown> {\n\t\treturn this.request<unknown>('/api/admin/metrics');\n\t}\n\n\tasync getOnlineUsers(): Promise<unknown[]> {\n\t\treturn this.request<unknown[]>('/api/admin/users/online');\n\t}\n\n\tasync getUserLatency(): Promise<unknown[]> {\n\t\treturn this.request<unknown[]>('/api/admin/users/latency');\n\t}\n\n\tasync getAuditLogs(limit?: number, offset?: number): Promise<unknown[]> {\n\t\tconst params = new URLSearchParams();\n\t\tif (limit) params.append('limit', limit.toString());\n\t\tif (offset) params.append('offset', offset.toString());\n\t\treturn this.request<unknown[]>(`/api/admin/logs?${params}`);\n\t}\n}\n\n// Export singleton instance\nexport const apiClient = new ApiClient();\nexport { ApiError };","usedDeprecatedRules":[]},{"filePath":"/Users/bennerrr/Feathur/client/web/src/lib/api/websocket.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'WebSocketEvent' is defined but never used. Allowed unused vars must match /^_/u.","line":4,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":29},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":57,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":57,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1957,2015],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":61,"column":6,"nodeType":"MemberExpression","messageId":"unexpected","endLine":61,"endColumn":17,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2087,2143],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":74,"column":6,"nodeType":"MemberExpression","messageId":"unexpected","endLine":74,"endColumn":17,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2439,2509],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":89,"column":6,"nodeType":"MemberExpression","messageId":"unexpected","endLine":89,"endColumn":19,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[2822,2874],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":140,"column":4,"nodeType":"MemberExpression","messageId":"unexpected","endLine":140,"endColumn":15,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4089,4153],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":142,"column":4,"nodeType":"MemberExpression","messageId":"unexpected","endLine":142,"endColumn":15,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4197,4249],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":148,"column":6,"nodeType":"MemberExpression","messageId":"unexpected","endLine":148,"endColumn":17,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4397,4654],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":171,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":171,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[5278,5357],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":198,"column":6,"nodeType":"MemberExpression","messageId":"unexpected","endLine":198,"endColumn":17,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[5996,6163],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":217,"column":6,"nodeType":"MemberExpression","messageId":"unexpected","endLine":217,"endColumn":17,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[6479,6617],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":231,"column":6,"nodeType":"MemberExpression","messageId":"unexpected","endLine":231,"endColumn":17,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[6848,6897],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":236,"column":6,"nodeType":"MemberExpression","messageId":"unexpected","endLine":236,"endColumn":17,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[6984,7028],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":240,"column":6,"nodeType":"MemberExpression","messageId":"unexpected","endLine":240,"endColumn":17,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[7064,7126],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":245,"column":4,"nodeType":"MemberExpression","messageId":"unexpected","endLine":245,"endColumn":17,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[7200,7273],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":246,"column":4,"nodeType":"MemberExpression","messageId":"unexpected","endLine":246,"endColumn":17,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[7277,7337],"text":""},"desc":"Remove the console.error()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { browser } from '$app/environment';\n// Use dynamic env import so build doesn't fail if variable is missing\nconst { PUBLIC_WS_URL } = import.meta.env;\nimport type { WebSocketEvent, TypingEvent, MessageEvent, UserEvent } from '$lib/types';\n\n// Use relative URLs in browser to leverage Vite's proxy, fallback to direct URL\nconst WS_BASE_URL = browser ? '' : (PUBLIC_WS_URL || 'ws://localhost:8081');\n\ntype EventHandler<T = unknown> = (data: T) => void;\n\ninterface WebSocketOptions {\n\turl?: string;\n\treconnectDelay?: number;\n\tmaxReconnectAttempts?: number;\n\theartbeatInterval?: number;\n}\n\nclass WebSocketClient {\n\tprivate ws: WebSocket | null = null;\n\tprivate token: string | null = null;\n\tprivate url: string;\n\tprivate reconnectDelay: number;\n\tprivate maxReconnectAttempts: number;\n\tprivate heartbeatInterval: number;\n\tprivate reconnectAttempts = 0;\n\tprivate reconnectTimer: NodeJS.Timeout | null = null;\n\tprivate heartbeatTimer: NodeJS.Timeout | null = null;\n\tprivate isManualDisconnect = false;\n\tprivate isConnectingState = false;\n\tprivate eventHandlers = new Map<string, EventHandler[]>();\n\n\tconstructor(options: WebSocketOptions = {}) {\n\t\tthis.url = options.url || WS_BASE_URL;\n\t\tthis.reconnectDelay = options.reconnectDelay || 1000;\n\t\tthis.maxReconnectAttempts = options.maxReconnectAttempts || 5;\n\t\tthis.heartbeatInterval = options.heartbeatInterval || 30000;\n\t}\n\n\t// Connection management\n\tconnect(token: string): Promise<void> {\n\t\tif (!browser) {\n\t\t\treturn Promise.reject(new Error('WebSocket only available in browser'));\n\t\t}\n\n\t\tif (this.ws?.readyState === WebSocket.OPEN) {\n\t\t\treturn Promise.resolve();\n\t\t}\n\n\t\tthis.token = token;\n\t\tthis.isManualDisconnect = false;\n\n\t\treturn new Promise((resolve, reject) => {\n\t\t\ttry {\n\t\t\t\tthis.isConnectingState = true;\n\t\t\t\t// Use relative URL in browser to leverage Vite's proxy\n\t\t\t\tconst wsUrl = browser ? `/ws?token=${encodeURIComponent(token)}` : `${this.url}/ws?token=${encodeURIComponent(token)}`;\n\t\t\t\tconsole.log('Attempting WebSocket connection to:', wsUrl);\n\t\t\t\tthis.ws = new WebSocket(wsUrl);\n\n\t\t\t\tthis.ws.onopen = () => {\n\t\t\t\t\tconsole.log('WebSocket connection opened successfully');\n\t\t\t\t\tthis.isConnectingState = false;\n\t\t\t\t\tthis.reconnectAttempts = 0;\n\t\t\t\t\tthis.startHeartbeat();\n\t\t\t\t\tthis.emit('connected', { timestamp: new Date() });\n\t\t\t\t\tresolve();\n\t\t\t\t};\n\n\t\t\t\tthis.ws.onmessage = (event) => {\n\t\t\t\t\tthis.handleMessage(event);\n\t\t\t\t};\n\n\t\t\t\tthis.ws.onclose = (event) => {\n\t\t\t\t\tconsole.log('WebSocket connection closed:', event.code, event.reason);\n\t\t\t\t\tthis.isConnectingState = false;\n\t\t\t\t\tthis.stopHeartbeat();\n\t\t\t\t\tthis.emit('disconnected', { \n\t\t\t\t\t\tcode: event.code, \n\t\t\t\t\t\treason: event.reason,\n\t\t\t\t\t\ttimestamp: new Date()\n\t\t\t\t\t});\n\n\t\t\t\t\tif (!this.isManualDisconnect) {\n\t\t\t\t\t\tthis.attemptReconnect();\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\tthis.ws.onerror = (error) => {\n\t\t\t\t\tconsole.error('WebSocket connection error:', error);\n\t\t\t\t\tthis.isConnectingState = false;\n\t\t\t\t\tthis.emit('error', { error, timestamp: new Date() });\n\t\t\t\t\treject(new Error('WebSocket connection failed'));\n\t\t\t\t};\n\n\t\t\t} catch (error) {\n\t\t\t\tthis.isConnectingState = false;\n\t\t\t\treject(error);\n\t\t\t}\n\t\t});\n\t}\n\n\tdisconnect(): void {\n\t\tthis.isManualDisconnect = true;\n\t\tthis.stopHeartbeat();\n\t\tif (this.reconnectTimer) {\n\t\t\tclearTimeout(this.reconnectTimer);\n\t\t\tthis.reconnectTimer = null;\n\t\t}\n\t\tif (this.ws) {\n\t\t\tthis.ws.close(1000, 'Manual disconnect');\n\t\t\tthis.ws = null;\n\t\t}\n\t}\n\n\tprivate attemptReconnect(): void {\n\t\tif (this.isManualDisconnect || !this.token) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (this.reconnectAttempts >= this.maxReconnectAttempts) {\n\t\t\tthis.emit('reconnectFailed', { attempts: this.reconnectAttempts });\n\t\t\treturn;\n\t\t}\n\n\t\tconst delay = this.reconnectDelay * Math.pow(2, this.reconnectAttempts);\n\t\tthis.reconnectAttempts++;\n\n\t\tthis.reconnectTimer = setTimeout(() => {\n\t\t\tif (!this.isManualDisconnect && this.token) {\n\t\t\t\tthis.emit('reconnecting', { attempt: this.reconnectAttempts });\n\t\t\t\tthis.connect(this.token!).catch(() => {\n\t\t\t\t\t// Reconnection failed, will try again\n\t\t\t\t});\n\t\t\t}\n\t\t}, delay);\n\t}\n\n\tprivate handleMessage(event: MessageEvent): void {\n\t\ttry {\n\t\t\tconsole.log('📨 [WEBSOCKET] Raw message received:', event.data);\n\t\t\tconst data = JSON.parse(event.data);\n\t\t\tconsole.log('📨 [WEBSOCKET] Parsed message:', data);\n\t\t\t\n\t\t\t// Handle different message types based on backend format\n\t\t\tswitch (data.type) {\n\t\t\t\tcase 'text': {\n\t\t\t\t\t// Text message from backend\n\t\t\t\t\tconsole.log('💬 [WEBSOCKET] Processing text message from backend:', {\n\t\t\t\t\t\tchannelId: data.channel_id,\n\t\t\t\t\t\tuserId: data.user_id,\n\t\t\t\t\t\tusername: data.username,\n\t\t\t\t\t\tcontent: data.content?.substring(0, 50) + '...',\n\t\t\t\t\t\tmessageId: data.data?.id\n\t\t\t\t\t});\n\t\t\t\t\t\n\t\t\t\t\t// Handle different message structures from backend\n\t\t\t\t\tlet messageId = data.data?.id;\n\t\t\t\t\tlet messageContent = data.content;\n\t\t\t\t\tlet messageCreatedAt = data.data?.created_at || data.timestamp || new Date().toISOString();\n\t\t\t\t\t\n\t\t\t\t\t// If data is directly in the message (alternative structure)\n\t\t\t\t\tif (!messageId && data.data) {\n\t\t\t\t\t\tmessageId = data.data.id;\n\t\t\t\t\t\tmessageContent = data.data.content;\n\t\t\t\t\t\tmessageCreatedAt = data.data.created_at || data.timestamp || new Date().toISOString();\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t// Fallback to timestamp if no ID\n\t\t\t\t\tif (!messageId) {\n\t\t\t\t\t\tmessageId = Date.now();\n\t\t\t\t\t\tconsole.log('⚠️ [WEBSOCKET] No message ID found, using timestamp:', messageId);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tconst messageEvent = {\n\t\t\t\t\t\ttype: 'message_created',\n\t\t\t\t\t\tchannelId: Number(data.channel_id), // Ensure it's a number\n\t\t\t\t\t\tmessage: {\n\t\t\t\t\t\t\tid: messageId,\n\t\t\t\t\t\t\tcontent: messageContent,\n\t\t\t\t\t\t\tchannelId: Number(data.channel_id), // Ensure it's a number\n\t\t\t\t\t\t\tauthorId: data.user_id,\n\t\t\t\t\t\t\tauthor: {\n\t\t\t\t\t\t\t\tid: data.user_id,\n\t\t\t\t\t\t\t\tusername: data.username\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tcreatedAt: messageCreatedAt,\n\t\t\t\t\t\t\tupdatedAt: messageCreatedAt\n\t\t\t\t\t\t}\n\t\t\t\t\t} as MessageEvent;\n\t\t\t\t\t\n\t\t\t\t\tthis.emit('message', messageEvent);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tcase 'join':\n\t\t\t\tcase 'leave':\n\t\t\t\t\t// User joined/left channel\n\t\t\t\t\tconsole.log('👥 [WEBSOCKET] User event:', {\n\t\t\t\t\t\ttype: data.type,\n\t\t\t\t\t\tuserId: data.user_id,\n\t\t\t\t\t\tusername: data.username,\n\t\t\t\t\t\tchannelId: data.channel_id\n\t\t\t\t\t});\n\t\t\t\t\tthis.emit('user', {\n\t\t\t\t\t\ttype: data.type === 'join' ? 'user_joined' : 'user_left',\n\t\t\t\t\t\tuser: {\n\t\t\t\t\t\t\tid: data.user_id,\n\t\t\t\t\t\t\tusername: data.username\n\t\t\t\t\t\t},\n\t\t\t\t\t\tchannel_id: data.channel_id\n\t\t\t\t\t} as UserEvent);\n\t\t\t\t\tbreak;\n\t\t\t\t\n\t\t\t\tcase 'typing':\n\t\t\t\tcase 'stop_typing':\n\t\t\t\t\t// Typing indicators\n\t\t\t\t\tconsole.log('⌨️ [WEBSOCKET] Typing event:', {\n\t\t\t\t\t\ttype: data.type,\n\t\t\t\t\t\tuserId: data.user_id,\n\t\t\t\t\t\tchannelId: data.channel_id\n\t\t\t\t\t});\n\t\t\t\t\tthis.emit('typing', {\n\t\t\t\t\t\tuserId: data.user_id,\n\t\t\t\t\t\tchannelId: data.channel_id,\n\t\t\t\t\t\tisTyping: data.type === 'typing'\n\t\t\t\t\t} as TypingEvent);\n\t\t\t\t\tbreak;\n\t\t\t\t\n\t\t\t\tcase 'heartbeat':\n\t\t\t\t\t// Handle heartbeat response\n\t\t\t\t\tconsole.log('💓 [WEBSOCKET] Heartbeat received');\n\t\t\t\t\tbreak;\n\t\t\t\t\n\t\t\t\tcase 'pong':\n\t\t\t\t\t// Handle pong response (heartbeat reply)\n\t\t\t\t\tconsole.log('💓 [WEBSOCKET] Pong received');\n\t\t\t\t\tbreak;\n\t\t\t\t\n\t\t\t\tdefault:\n\t\t\t\t\tconsole.log('❓ [WEBSOCKET] Unknown message type:', data.type);\n\t\t\t\t\tthis.emit('unknown', data);\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tconsole.error('❌ [WEBSOCKET] Failed to parse WebSocket message:', error);\n\t\t\tconsole.error('❌ [WEBSOCKET] Raw message was:', event.data);\n\t\t\tthis.emit('error', { error: 'Failed to parse WebSocket message', timestamp: new Date() });\n\t\t}\n\t}\n\n\tprivate startHeartbeat(): void {\n\t\tthis.stopHeartbeat();\n\t\tthis.heartbeatTimer = setInterval(() => {\n\t\t\tif (this.ws?.readyState === WebSocket.OPEN) {\n\t\t\t\tthis.ws.send(JSON.stringify({ type: 'heartbeat' }));\n\t\t\t}\n\t\t}, this.heartbeatInterval);\n\t}\n\n\tprivate stopHeartbeat(): void {\n\t\tif (this.heartbeatTimer) {\n\t\t\tclearInterval(this.heartbeatTimer);\n\t\t\tthis.heartbeatTimer = null;\n\t\t}\n\t}\n\n\t// Message sending\n\tsendMessage(channelId: number, content: string, replyToId?: number): void {\n\t\tif (this.ws?.readyState === WebSocket.OPEN) {\n\t\t\tconst message = {\n\t\t\t\ttype: 'text',\n\t\t\t\tchannel_id: channelId,\n\t\t\t\tcontent: content,\n\t\t\t\treply_to_id: replyToId\n\t\t\t};\n\t\t\tthis.ws.send(JSON.stringify(message));\n\t\t}\n\t}\n\n\tjoinChannel(channelId: number): void {\n\t\tif (this.ws?.readyState === WebSocket.OPEN) {\n\t\t\tconst message = {\n\t\t\t\ttype: 'join',\n\t\t\t\tchannel_id: channelId\n\t\t\t};\n\t\t\tthis.ws.send(JSON.stringify(message));\n\t\t}\n\t}\n\n\tleaveChannel(channelId: number): void {\n\t\tif (this.ws?.readyState === WebSocket.OPEN) {\n\t\t\tconst message = {\n\t\t\t\ttype: 'leave',\n\t\t\t\tchannel_id: channelId\n\t\t\t};\n\t\t\tthis.ws.send(JSON.stringify(message));\n\t\t}\n\t}\n\n\tstartTyping(channelId: number): void {\n\t\tif (this.ws?.readyState === WebSocket.OPEN) {\n\t\t\tconst message = {\n\t\t\t\ttype: 'typing',\n\t\t\t\tchannel_id: channelId\n\t\t\t};\n\t\t\tthis.ws.send(JSON.stringify(message));\n\t\t}\n\t}\n\n\tstopTyping(channelId: number): void {\n\t\tif (this.ws?.readyState === WebSocket.OPEN) {\n\t\t\tconst message = {\n\t\t\t\ttype: 'stop_typing',\n\t\t\t\tchannel_id: channelId\n\t\t\t};\n\t\t\tthis.ws.send(JSON.stringify(message));\n\t\t}\n\t}\n\n\t// Event handling\n\ton<T = unknown>(event: string, handler: EventHandler<T>): void {\n\t\tif (!this.eventHandlers.has(event)) {\n\t\t\tthis.eventHandlers.set(event, []);\n\t\t}\n\t\tthis.eventHandlers.get(event)!.push(handler as EventHandler);\n\t}\n\n\toff(event: string, handler: EventHandler): void {\n\t\tconst handlers = this.eventHandlers.get(event);\n\t\tif (handlers) {\n\t\t\tconst index = handlers.indexOf(handler);\n\t\t\tif (index > -1) {\n\t\t\t\thandlers.splice(index, 1);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate emit<T = unknown>(event: string, data: T): void {\n\t\tconst handlers = this.eventHandlers.get(event);\n\t\tif (handlers) {\n\t\t\thandlers.forEach(handler => {\n\t\t\t\ttry {\n\t\t\t\t\thandler(data);\n\t\t\t\t} catch (error) {\n\t\t\t\t\t// Silently handle event handler errors\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\n\t// Status methods\n\tisConnected(): boolean {\n\t\treturn this.ws?.readyState === WebSocket.OPEN;\n\t}\n\n\tisConnecting(): boolean {\n\t\treturn this.isConnectingState;\n\t}\n\n\tgetReconnectAttempts(): number {\n\t\treturn this.reconnectAttempts;\n\t}\n}\n\n// Export singleton instance\nexport const wsClient = new WebSocketClient();","usedDeprecatedRules":[]},{"filePath":"/Users/bennerrr/Feathur/client/web/src/lib/components/ui/Badge.svelte","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/bennerrr/Feathur/client/web/src/lib/components/ui/Button.svelte","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/bennerrr/Feathur/client/web/src/lib/components/ui/ChannelList.svelte","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":8,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":8,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[313,316],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[313,316],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"svelte/valid-compile","severity":1,"message":"Visible, non-interactive elements with a click event must be accompanied by a keyboard event handler. Consider whether an interactive element such as `<button type=\"button\">` or `<a>` might be more appropriate\nhttps://svelte.dev/e/a11y_click_events_have_key_events(a11y_click_events_have_key_events)","line":68,"column":6,"nodeType":null,"endLine":83,"endColumn":12},{"ruleId":"svelte/valid-compile","severity":1,"message":"`<div>` with a click handler must have an ARIA role\nhttps://svelte.dev/e/a11y_no_static_element_interactions(a11y_no_static_element_interactions)","line":68,"column":6,"nodeType":null,"endLine":83,"endColumn":12},{"ruleId":"svelte/valid-compile","severity":1,"message":"Visible, non-interactive elements with a click event must be accompanied by a keyboard event handler. Consider whether an interactive element such as `<button type=\"button\">` or `<a>` might be more appropriate\nhttps://svelte.dev/e/a11y_click_events_have_key_events(a11y_click_events_have_key_events)","line":107,"column":6,"nodeType":null,"endLine":122,"endColumn":12},{"ruleId":"svelte/valid-compile","severity":1,"message":"`<div>` with a click handler must have an ARIA role\nhttps://svelte.dev/e/a11y_no_static_element_interactions(a11y_no_static_element_interactions)","line":107,"column":6,"nodeType":null,"endLine":122,"endColumn":12},{"ruleId":"svelte/valid-compile","severity":1,"message":"Unused CSS selector \".channel-icon\"\nhttps://svelte.dev/e/css_unused_selector(css_unused_selector)","line":258,"column":2,"nodeType":null,"endLine":258,"endColumn":15}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"<script lang=\"ts\">\n\timport { createEventDispatcher } from 'svelte';\n\timport { Hash, Mic, Plus, Settings, ChevronDown } from 'lucide-svelte';\n\timport type { Channel, Server } from '$lib/types';\n\n\texport let server: Server | null = null;\n\texport let currentChannelId: number | null = null;\n\texport let currentUser: any = null;\n\n\tconst dispatch = createEventDispatcher<{\n\t\tselectChannel: Channel;\n\t\tcreateChannel: { type: 'text' | 'voice' };\n\t\topenChannelSettings: Channel | null;\n\t}>();\n\n\tfunction handleChannelClick(channel: Channel) {\n\t\tdispatch('selectChannel', channel);\n\t}\n\n\tfunction handleCreateChannel(type: 'text' | 'voice') {\n\t\tdispatch('createChannel', { type });\n\t}\n\n\tfunction handleChannelSettings(channel: Channel) {\n\t\tdispatch('openChannelSettings', channel);\n\t}\n\n\t$: textChannels = server?.channels?.filter(c => c.type === 'text') || [];\n\t$: voiceChannels = server?.channels?.filter(c => c.type === 'voice') || [];\n</script>\n\n<div class=\"channel-list\">\n\t<!-- Server Header -->\n\t{#if server}\n\t\t<div class=\"server-header\">\n\t\t\t<div class=\"server-info\">\n\t\t\t\t<h3 class=\"server-name\">{server.name}</h3>\n\t\t\t\t{#if server.description}\n\t\t\t\t\t<p class=\"server-description\">{server.description}</p>\n\t\t\t\t{/if}\n\t\t\t</div>\n\t\t\t{#if currentUser?.role === 'super_admin' || currentUser?.role === 'admin'}\n\t\t\t\t<button class=\"server-settings-btn\" on:click={() => dispatch('openChannelSettings', null)}>\n\t\t\t\t\t<Settings size={16} />\n\t\t\t\t</button>\n\t\t\t{/if}\n\t\t</div>\n\t{/if}\n\n\t<!-- Text Channels -->\n\t{#if textChannels.length > 0}\n\t\t<div class=\"channel-category\">\n\t\t\t<div class=\"category-header\">\n\t\t\t\t<ChevronDown size={16} />\n\t\t\t\t<span>TEXT CHANNELS</span>\n\t\t\t\t{#if currentUser?.role === 'super_admin' || currentUser?.role === 'admin'}\n\t\t\t\t\t<button \n\t\t\t\t\t\tclass=\"add-channel-btn\" \n\t\t\t\t\t\ton:click={() => handleCreateChannel('text')}\n\t\t\t\t\t\ttitle=\"Create Text Channel\"\n\t\t\t\t\t>\n\t\t\t\t\t\t<Plus size={16} />\n\t\t\t\t\t</button>\n\t\t\t\t{/if}\n\t\t\t</div>\n\t\t\t<div class=\"channel-items\">\n\t\t\t\t{#each textChannels as channel (channel.id)}\n\t\t\t\t\t<div \n\t\t\t\t\t\tclass=\"channel-item\" \n\t\t\t\t\t\tclass:active={currentChannelId === channel.id}\n\t\t\t\t\t\ton:click={() => handleChannelClick(channel)}\n\t\t\t\t\t>\n\t\t\t\t\t\t<Hash size={16} class=\"channel-icon\" />\n\t\t\t\t\t\t<span class=\"channel-name\">{channel.name}</span>\n\t\t\t\t\t\t{#if currentUser?.role === 'super_admin' || currentUser?.role === 'admin'}\n\t\t\t\t\t\t\t<button \n\t\t\t\t\t\t\t\tclass=\"channel-settings-btn\"\n\t\t\t\t\t\t\t\ton:click|stopPropagation={() => handleChannelSettings(channel)}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<Settings size={14} />\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t{/if}\n\t\t\t\t\t</div>\n\t\t\t\t{/each}\n\t\t\t</div>\n\t\t</div>\n\t{/if}\n\n\t<!-- Voice Channels -->\n\t{#if voiceChannels.length > 0}\n\t\t<div class=\"channel-category\">\n\t\t\t<div class=\"category-header\">\n\t\t\t\t<ChevronDown size={16} />\n\t\t\t\t<span>VOICE CHANNELS</span>\n\t\t\t\t{#if currentUser?.role === 'super_admin' || currentUser?.role === 'admin'}\n\t\t\t\t\t<button \n\t\t\t\t\t\tclass=\"add-channel-btn\" \n\t\t\t\t\t\ton:click={() => handleCreateChannel('voice')}\n\t\t\t\t\t\ttitle=\"Create Voice Channel\"\n\t\t\t\t\t>\n\t\t\t\t\t\t<Plus size={16} />\n\t\t\t\t\t</button>\n\t\t\t\t{/if}\n\t\t\t</div>\n\t\t\t<div class=\"channel-items\">\n\t\t\t\t{#each voiceChannels as channel (channel.id)}\n\t\t\t\t\t<div \n\t\t\t\t\t\tclass=\"channel-item voice-channel\" \n\t\t\t\t\t\tclass:active={currentChannelId === channel.id}\n\t\t\t\t\t\ton:click={() => handleChannelClick(channel)}\n\t\t\t\t\t>\n\t\t\t\t\t\t<Mic size={16} class=\"channel-icon\" />\n\t\t\t\t\t\t<span class=\"channel-name\">{channel.name}</span>\n\t\t\t\t\t\t{#if currentUser?.role === 'super_admin' || currentUser?.role === 'admin'}\n\t\t\t\t\t\t\t<button \n\t\t\t\t\t\t\t\tclass=\"channel-settings-btn\"\n\t\t\t\t\t\t\t\ton:click|stopPropagation={() => handleChannelSettings(channel)}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<Settings size={14} />\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t{/if}\n\t\t\t\t\t</div>\n\t\t\t\t{/each}\n\t\t\t</div>\n\t\t</div>\n\t{/if}\n\n\t<!-- Empty State -->\n\t{#if (!textChannels.length && !voiceChannels.length) && server}\n\t\t<div class=\"empty-state\">\n\t\t\t<p>No channels yet</p>\n\t\t\t{#if currentUser?.role === 'super_admin' || currentUser?.role === 'admin'}\n\t\t\t\t<button class=\"create-first-channel\" on:click={() => handleCreateChannel('text')}>\n\t\t\t\t\t<Plus size={16} />\n\t\t\t\t\tCreate your first channel\n\t\t\t\t</button>\n\t\t\t{/if}\n\t\t</div>\n\t{/if}\n</div>\n\n<style>\n\t.channel-list {\n\t\twidth: 240px;\n\t\tbackground: var(--color-bg-alt);\n\t\tborder-right: 1px solid var(--color-glass-border);\n\t\tdisplay: flex;\n\t\tflex-direction: column;\n\t\theight: 100vh;\n\t\toverflow-y: auto;\n\t}\n\n\t.server-header {\n\t\tpadding: 16px;\n\t\tborder-bottom: 1px solid var(--color-glass-border);\n\t\tdisplay: flex;\n\t\talign-items: center;\n\t\tjustify-content: space-between;\n\t}\n\n\t.server-info {\n\t\tflex: 1;\n\t}\n\n\t.server-name {\n\t\tfont-size: 16px;\n\t\tfont-weight: 600;\n\t\tcolor: var(--color-text);\n\t\tmargin: 0 0 4px 0;\n\t}\n\n\t.server-description {\n\t\tfont-size: 12px;\n\t\tcolor: var(--color-text);\n\t\topacity: 0.7;\n\t\tmargin: 0;\n\t}\n\n\t.server-settings-btn {\n\t\tbackground: transparent;\n\t\tborder: none;\n\t\tcolor: var(--color-text);\n\t\topacity: 0.7;\n\t\tcursor: pointer;\n\t\tpadding: 4px;\n\t\tborder-radius: 4px;\n\t\ttransition: opacity 0.2s ease;\n\t}\n\n\t.server-settings-btn:hover {\n\t\topacity: 1;\n\t\tbackground: var(--color-glass);\n\t}\n\n\t.channel-category {\n\t\tmargin-top: 8px;\n\t}\n\n\t.category-header {\n\t\tpadding: 8px 16px;\n\t\tdisplay: flex;\n\t\talign-items: center;\n\t\tgap: 8px;\n\t\tfont-size: 12px;\n\t\tfont-weight: 600;\n\t\tcolor: var(--color-text);\n\t\topacity: 0.7;\n\t\ttext-transform: uppercase;\n\t\tletter-spacing: 0.5px;\n\t}\n\n\t.add-channel-btn {\n\t\tbackground: transparent;\n\t\tborder: none;\n\t\tcolor: var(--color-text);\n\t\topacity: 0.7;\n\t\tcursor: pointer;\n\t\tpadding: 2px;\n\t\tborder-radius: 4px;\n\t\ttransition: opacity 0.2s ease;\n\t\tmargin-left: auto;\n\t}\n\n\t.add-channel-btn:hover {\n\t\topacity: 1;\n\t\tbackground: var(--color-glass);\n\t}\n\n\t.channel-items {\n\t\tdisplay: flex;\n\t\tflex-direction: column;\n\t}\n\n\t.channel-item {\n\t\tpadding: 8px 16px;\n\t\tdisplay: flex;\n\t\talign-items: center;\n\t\tgap: 8px;\n\t\tcursor: pointer;\n\t\tborder-radius: 4px;\n\t\tmargin: 0 8px;\n\t\ttransition: all 0.2s ease;\n\t\tcolor: var(--color-text);\n\t\topacity: 0.8;\n\t}\n\n\t.channel-item:hover {\n\t\tbackground: var(--color-glass);\n\t\topacity: 1;\n\t}\n\n\t.channel-item.active {\n\t\tbackground: var(--color-accent);\n\t\tcolor: white;\n\t\topacity: 1;\n\t}\n\n\t.channel-icon {\n\t\tflex-shrink: 0;\n\t}\n\n\t.channel-name {\n\t\tflex: 1;\n\t\tfont-size: 14px;\n\t\twhite-space: nowrap;\n\t\toverflow: hidden;\n\t\ttext-overflow: ellipsis;\n\t}\n\n\t.channel-settings-btn {\n\t\tbackground: transparent;\n\t\tborder: none;\n\t\tcolor: inherit;\n\t\topacity: 0;\n\t\tcursor: pointer;\n\t\tpadding: 2px;\n\t\tborder-radius: 4px;\n\t\ttransition: opacity 0.2s ease;\n\t}\n\n\t.channel-item:hover .channel-settings-btn {\n\t\topacity: 0.7;\n\t}\n\n\t.channel-settings-btn:hover {\n\t\topacity: 1;\n\t\tbackground: rgba(255, 255, 255, 0.1);\n\t}\n\n\t.voice-channel {\n\t\tcolor: var(--color-accent);\n\t}\n\n\t.voice-channel.active {\n\t\tcolor: white;\n\t}\n\n\t.empty-state {\n\t\tpadding: 32px 16px;\n\t\ttext-align: center;\n\t\tcolor: var(--color-text);\n\t\topacity: 0.7;\n\t}\n\n\t.empty-state p {\n\t\tmargin: 0 0 16px 0;\n\t\tfont-size: 14px;\n\t}\n\n\t.create-first-channel {\n\t\tbackground: var(--color-accent);\n\t\tcolor: white;\n\t\tborder: none;\n\t\tpadding: 8px 16px;\n\t\tborder-radius: 6px;\n\t\tfont-size: 14px;\n\t\tcursor: pointer;\n\t\tdisplay: flex;\n\t\talign-items: center;\n\t\tgap: 8px;\n\t\tmargin: 0 auto;\n\t\ttransition: background 0.2s ease;\n\t}\n\n\t.create-first-channel:hover {\n\t\tbackground: var(--color-accent-hover);\n\t}\n\n\t/* Scrollbar styling */\n\t.channel-list::-webkit-scrollbar {\n\t\twidth: 4px;\n\t}\n\n\t.channel-list::-webkit-scrollbar-track {\n\t\tbackground: transparent;\n\t}\n\n\t.channel-list::-webkit-scrollbar-thumb {\n\t\tbackground: var(--color-glass-border);\n\t\tborder-radius: 2px;\n\t}\n\n\t.channel-list::-webkit-scrollbar-thumb:hover {\n\t\tbackground: var(--color-accent);\n\t}\n</style> ","usedDeprecatedRules":[]},{"filePath":"/Users/bennerrr/Feathur/client/web/src/lib/components/ui/ChatArea.svelte","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Send' is defined but never used. Allowed unused vars must match /^_/u.","line":4,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":15},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":12,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":12,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[489,492],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[489,492],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"<script lang=\"ts\">\n\timport { onMount, tick } from 'svelte';\n\timport { createEventDispatcher } from 'svelte';\n\timport { Send, Paperclip, Smile } from 'lucide-svelte';\n\timport type { Message, Channel, User } from '$lib/types';\n\timport MessageComponent from './Message.svelte';\n\timport MessageInput from './MessageInput.svelte';\n\timport LoadingSpinner from './LoadingSpinner.svelte';\n\n\texport let channel: Channel | null = null;\n\texport let messages: Message[] = [];\n\texport let typingUsers: any[] = [];\n\texport let isLoadingMessages = false;\n\texport let hasMoreMessages = true;\n\texport let currentUser: User | null = null;\n\n\tconst dispatch = createEventDispatcher<{\n\t\tsendMessage: string;\n\t\tloadMoreMessages: void;\n\t}>();\n\n\tlet messagesContainer: HTMLElement;\n\tlet isScrolledToBottom = true;\n\n\tonMount(() => {\n\t\tif (messagesContainer) {\n\t\t\tscrollToBottom();\n\t\t}\n\t});\n\n\t$: if (messages.length > 0 && messagesContainer) {\n\t\ttick().then(() => {\n\t\t\tif (isScrolledToBottom) {\n\t\t\t\tscrollToBottom();\n\t\t\t}\n\t\t});\n\t}\n\n\tfunction scrollToBottom() {\n\t\tif (messagesContainer) {\n\t\t\tmessagesContainer.scrollTop = messagesContainer.scrollHeight;\n\t\t}\n\t}\n\n\tfunction handleScroll() {\n\t\tif (messagesContainer) {\n\t\t\tconst { scrollTop, scrollHeight, clientHeight } = messagesContainer;\n\t\t\tisScrolledToBottom = scrollTop + clientHeight >= scrollHeight - 100;\n\t\t\t\n\t\t\t// Load more messages when scrolling to top\n\t\t\tif (scrollTop === 0 && hasMoreMessages && !isLoadingMessages) {\n\t\t\t\tdispatch('loadMoreMessages');\n\t\t\t}\n\t\t}\n\t}\n\n\tfunction handleSendMessage(content: string) {\n\t\tdispatch('sendMessage', content);\n\t}\n</script>\n\n<div class=\"chat-area\">\n\t<!-- Channel Header -->\n\t{#if channel}\n\t\t<div class=\"channel-header\">\n\t\t\t<div class=\"channel-info\">\n\t\t\t\t<h2 class=\"channel-name\">#{channel.name}</h2>\n\t\t\t\t{#if channel.description}\n\t\t\t\t\t<p class=\"channel-description\">{channel.description}</p>\n\t\t\t\t{/if}\n\t\t\t</div>\n\t\t\t<div class=\"channel-actions\">\n\t\t\t\t<button class=\"action-btn\" title=\"Attach file\">\n\t\t\t\t\t<Paperclip size={16} />\n\t\t\t\t</button>\n\t\t\t\t<button class=\"action-btn\" title=\"Emoji\">\n\t\t\t\t\t<Smile size={16} />\n\t\t\t\t</button>\n\t\t\t</div>\n\t\t</div>\n\t{/if}\n\n\t<!-- Messages Container -->\n\t<div \n\t\tclass=\"messages-container\" \n\t\tbind:this={messagesContainer}\n\t\ton:scroll={handleScroll}\n\t>\n\t\t<!-- Loading indicator for older messages -->\n\t\t{#if isLoadingMessages}\n\t\t\t<div class=\"loading-messages\">\n\t\t\t\t<LoadingSpinner size=\"sm\" />\n\t\t\t\t<span>Loading messages...</span>\n\t\t\t</div>\n\t\t{/if}\n\n\t\t<!-- Messages -->\n\t\t{#if messages.length > 0}\n\t\t\t{#each messages as message, index (message.id)}\n\t\t\t\t<MessageComponent \n\t\t\t\t\t{message} \n\t\t\t\t\t{currentUser}\n\t\t\t\t\tisFirstInGroup={index === 0 || messages[index - 1].authorId !== message.authorId}\n\t\t\t\t/>\n\t\t\t{/each}\n\t\t{:else if !isLoadingMessages}\n\t\t\t<div class=\"empty-messages\">\n\t\t\t\t<div class=\"empty-icon\">💬</div>\n\t\t\t\t<h3>No messages yet</h3>\n\t\t\t\t<p>Be the first to send a message in #{channel?.name}!</p>\n\t\t\t</div>\n\t\t{/if}\n\n\t\t<!-- Typing indicator -->\n\t\t{#if typingUsers.length > 0}\n\t\t\t<div class=\"typing-indicator\">\n\t\t\t\t<div class=\"typing-dots\">\n\t\t\t\t\t<span></span>\n\t\t\t\t\t<span></span>\n\t\t\t\t\t<span></span>\n\t\t\t\t</div>\n\t\t\t\t<span class=\"typing-text\">\n\t\t\t\t\t{typingUsers.length === 1 \n\t\t\t\t\t\t? `${typingUsers[0].username} is typing...`\n\t\t\t\t\t\t: `${typingUsers.length} people are typing...`\n\t\t\t\t\t}\n\t\t\t\t</span>\n\t\t\t</div>\n\t\t{/if}\n\t</div>\n\n\t<!-- Message Input -->\n\t{#if channel}\n\t\t<div class=\"message-input-container\">\n\t\t\t\t\t<MessageInput \n\t\t\tplaceholder=\"Message #{channel.name}\"\n\t\t\ton:send={(event) => handleSendMessage(event.detail)}\n\t\t/>\n\t\t</div>\n\t{/if}\n</div>\n\n<style>\n\t.chat-area {\n\t\tflex: 1;\n\t\tdisplay: flex;\n\t\tflex-direction: column;\n\t\theight: 100vh;\n\t\tbackground: var(--color-bg);\n\t}\n\n\t.channel-header {\n\t\tpadding: 16px 24px;\n\t\tborder-bottom: 1px solid var(--color-glass-border);\n\t\tdisplay: flex;\n\t\talign-items: center;\n\t\tjustify-content: space-between;\n\t\tbackground: var(--color-bg-alt);\n\t}\n\n\t.channel-info {\n\t\tflex: 1;\n\t}\n\n\t.channel-name {\n\t\tfont-size: 18px;\n\t\tfont-weight: 600;\n\t\tcolor: var(--color-text);\n\t\tmargin: 0 0 4px 0;\n\t}\n\n\t.channel-description {\n\t\tfont-size: 14px;\n\t\tcolor: var(--color-text);\n\t\topacity: 0.7;\n\t\tmargin: 0;\n\t}\n\n\t.channel-actions {\n\t\tdisplay: flex;\n\t\tgap: 8px;\n\t}\n\n\t.action-btn {\n\t\tbackground: transparent;\n\t\tborder: none;\n\t\tcolor: var(--color-text);\n\t\topacity: 0.7;\n\t\tcursor: pointer;\n\t\tpadding: 8px;\n\t\tborder-radius: 6px;\n\t\ttransition: all 0.2s ease;\n\t}\n\n\t.action-btn:hover {\n\t\topacity: 1;\n\t\tbackground: var(--color-glass);\n\t}\n\n\t.messages-container {\n\t\tflex: 1;\n\t\toverflow-y: auto;\n\t\tpadding: 16px 24px;\n\t\tdisplay: flex;\n\t\tflex-direction: column;\n\t\tgap: 8px;\n\t}\n\n\t.loading-messages {\n\t\tdisplay: flex;\n\t\talign-items: center;\n\t\tjustify-content: center;\n\t\tgap: 8px;\n\t\tpadding: 16px;\n\t\tcolor: var(--color-text);\n\t\topacity: 0.7;\n\t\tfont-size: 14px;\n\t}\n\n\t.empty-messages {\n\t\tdisplay: flex;\n\t\tflex-direction: column;\n\t\talign-items: center;\n\t\tjustify-content: center;\n\t\tpadding: 64px 24px;\n\t\ttext-align: center;\n\t\tcolor: var(--color-text);\n\t\topacity: 0.7;\n\t}\n\n\t.empty-icon {\n\t\tfont-size: 48px;\n\t\tmargin-bottom: 16px;\n\t}\n\n\t.empty-messages h3 {\n\t\tfont-size: 18px;\n\t\tfont-weight: 600;\n\t\tmargin: 0 0 8px 0;\n\t}\n\n\t.empty-messages p {\n\t\tfont-size: 14px;\n\t\tmargin: 0;\n\t}\n\n\t.typing-indicator {\n\t\tdisplay: flex;\n\t\talign-items: center;\n\t\tgap: 8px;\n\t\tpadding: 8px 16px;\n\t\tcolor: var(--color-text);\n\t\topacity: 0.7;\n\t\tfont-size: 14px;\n\t}\n\n\t.typing-dots {\n\t\tdisplay: flex;\n\t\tgap: 2px;\n\t}\n\n\t.typing-dots span {\n\t\twidth: 4px;\n\t\theight: 4px;\n\t\tbackground: var(--color-text);\n\t\tborder-radius: 50%;\n\t\tanimation: typing 1.4s infinite ease-in-out;\n\t}\n\n\t.typing-dots span:nth-child(1) {\n\t\tanimation-delay: -0.32s;\n\t}\n\n\t.typing-dots span:nth-child(2) {\n\t\tanimation-delay: -0.16s;\n\t}\n\n\t@keyframes typing {\n\t\t0%, 80%, 100% {\n\t\t\ttransform: scale(0.8);\n\t\t\topacity: 0.5;\n\t\t}\n\t\t40% {\n\t\t\ttransform: scale(1);\n\t\t\topacity: 1;\n\t\t}\n\t}\n\n\t.message-input-container {\n\t\tpadding: 16px 24px;\n\t\tborder-top: 1px solid var(--color-glass-border);\n\t\tbackground: var(--color-bg-alt);\n\t}\n\n\t/* Scrollbar styling */\n\t.messages-container::-webkit-scrollbar {\n\t\twidth: 6px;\n\t}\n\n\t.messages-container::-webkit-scrollbar-track {\n\t\tbackground: transparent;\n\t}\n\n\t.messages-container::-webkit-scrollbar-thumb {\n\t\tbackground: var(--color-glass-border);\n\t\tborder-radius: 3px;\n\t}\n\n\t.messages-container::-webkit-scrollbar-thumb:hover {\n\t\tbackground: var(--color-accent);\n\t}\n</style> ","usedDeprecatedRules":[]},{"filePath":"/Users/bennerrr/Feathur/client/web/src/lib/components/ui/Dropdown.svelte","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/bennerrr/Feathur/client/web/src/lib/components/ui/EnhancedChatArea.svelte","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Message' is defined but never used. Allowed unused vars must match /^_/u.","line":5,"column":31,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":38},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":46,"column":4,"nodeType":"MemberExpression","messageId":"unexpected","endLine":46,"endColumn":17,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[1478,1527],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":84,"column":4,"nodeType":"MemberExpression","messageId":"unexpected","endLine":84,"endColumn":17,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[2520,2575],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":93,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":93,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2763,2819],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":96,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":96,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2859,2862],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2859,2862],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"<script lang=\"ts\">\n\timport { onMount, afterUpdate } from 'svelte';\n\timport { chatStore, chatActions, messages } from '$lib/stores/app';\n\timport { voiceStore } from '$lib/stores/voice';\n\timport type { Channel, User, Message } from '$lib/types';\n\timport EnhancedMessage from './EnhancedMessage.svelte';\n\timport EnhancedMessageInput from './EnhancedMessageInput.svelte';\n\timport EnhancedVoiceControls from './EnhancedVoiceControls.svelte';\n\timport LoadingSpinner from './LoadingSpinner.svelte';\n\n\texport let channel: Channel | null = null;\n\texport let currentUser: User | null = null;\n\n\tlet messagesContainer: HTMLElement;\n\tlet isAtBottom = true;\n\tlet showScrollToBottom = false;\n\tlet isLoadingOlder = false;\n\n\t$: channelMessages = $messages.filter(message => {\n\t\tconst isValid = message && message.createdAt;\n\t\tconst isForCurrentChannel = message?.channelId === channel?.id;\n\t\t\n\t\treturn isValid && isForCurrentChannel;\n\t});\n\t$: isVoiceChannel = channel?.type === 'voice';\n\t$: hasVoiceConnection = $voiceStore.currentConnection?.channelId === channel?.id;\n\n\t// Auto-scroll to bottom when new messages arrive\n\tafterUpdate(() => {\n\t\tif (isAtBottom && messagesContainer) {\n\t\t\tscrollToBottom();\n\t\t}\n\t});\n\n\t// Load messages when channel changes\n\t$: if (channel) {\n\t\tloadChannelMessages(channel.id);\n\t}\n\n\tasync function loadChannelMessages(channelId: number) {\n\t\ttry {\n\t\t\tchatActions.clearChat();\n\t\t\tawait chatActions.loadMessages(channelId);\n\t\t\tscrollToBottom();\n\t\t} catch (error) {\n\t\t\tconsole.error('Failed to load messages:', error);\n\t\t}\n\t}\n\n\tfunction scrollToBottom() {\n\t\tif (messagesContainer) {\n\t\t\tmessagesContainer.scrollTop = messagesContainer.scrollHeight;\n\t\t\tisAtBottom = true;\n\t\t\tshowScrollToBottom = false;\n\t\t}\n\t}\n\n\tfunction handleScroll() {\n\t\tif (!messagesContainer) return;\n\n\t\tconst { scrollTop, scrollHeight, clientHeight } = messagesContainer;\n\t\tconst threshold = 100;\n\n\t\t// Check if user is at the bottom\n\t\tisAtBottom = scrollTop + clientHeight >= scrollHeight - threshold;\n\t\tshowScrollToBottom = !isAtBottom && channelMessages.length > 0;\n\n\t\t// Load older messages when scrolled to top\n\t\tif (scrollTop < threshold && !isLoadingOlder && $chatStore.hasMoreMessages) {\n\t\t\tloadOlderMessages();\n\t\t}\n\t}\n\n\tasync function loadOlderMessages() {\n\t\tif (!channel || isLoadingOlder || !$chatStore.hasMoreMessages) return;\n\n\t\ttry {\n\t\t\tisLoadingOlder = true;\n\t\t\tconst oldestMessage = channelMessages[0];\n\t\t\tif (oldestMessage) {\n\t\t\t\tawait chatActions.loadMessages(channel.id, 50, oldestMessage.id);\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tconsole.error('Failed to load older messages:', error);\n\t\t} finally {\n\t\t\tisLoadingOlder = false;\n\t\t}\n\t}\n\n\tfunction handleReply(event: CustomEvent) {\n\t\tconst { message } = event.detail;\n\t\t// TODO: Implement reply functionality when available\n\t\tconsole.log('Reply requested for message:', message.id);\n\t}\n\n\tfunction formatTypingUsers(users: any[]) {\n\t\tif (users.length === 0) return '';\n\t\tif (users.length === 1) return `${users[0].username} is typing...`;\n\t\tif (users.length === 2) return `${users[0].username} and ${users[1].username} are typing...`;\n\t\treturn `${users[0].username} and ${users.length - 1} others are typing...`;\n\t}\n\n\tonMount(() => {\n\t\t// Set up scroll event listener\n\t\tif (messagesContainer) {\n\t\t\tmessagesContainer.addEventListener('scroll', handleScroll);\n\t\t\treturn () => {\n\t\t\t\tmessagesContainer.removeEventListener('scroll', handleScroll);\n\t\t\t};\n\t\t}\n\t});\n</script>\n\n<div class=\"chat-area\" class:voice-channel={isVoiceChannel}>\n\t{#if channel}\n\t\t<!-- Channel Header -->\n\t\t<div class=\"channel-header\">\n\t\t\t<div class=\"channel-info\">\n\t\t\t\t<span class=\"channel-icon\">\n\t\t\t\t\t{#if isVoiceChannel}\n\t\t\t\t\t\t🎤\n\t\t\t\t\t{:else}\n\t\t\t\t\t\t💬\n\t\t\t\t\t{/if}\n\t\t\t\t</span>\n\t\t\t\t<h2 class=\"channel-name\">{channel.name}</h2>\n\t\t\t\t{#if channel.description}\n\t\t\t\t\t<span class=\"channel-description\">{channel.description}</span>\n\t\t\t\t{/if}\n\t\t\t</div>\n\n\t\t\t<div class=\"channel-actions\">\n\t\t\t\t{#if isVoiceChannel}\n\t\t\t\t\t<div class=\"voice-status\">\n\t\t\t\t\t\t{#if hasVoiceConnection}\n\t\t\t\t\t\t\t<span class=\"voice-indicator connected\">🔴 Live</span>\n\t\t\t\t\t\t{:else}\n\t\t\t\t\t\t\t<span class=\"voice-indicator\">🎤 Voice Channel</span>\n\t\t\t\t\t\t{/if}\n\t\t\t\t\t</div>\n\t\t\t\t{/if}\n\t\t\t</div>\n\t\t</div>\n\n\t\t<!-- Voice Controls (for voice channels) -->\n\t\t{#if isVoiceChannel}\n\t\t\t<EnhancedVoiceControls {channel} {currentUser} />\n\t\t{/if}\n\n\t\t<!-- Messages Area -->\n\t\t<div class=\"messages-area\">\n\t\t\t<div \n\t\t\t\tclass=\"messages-container\" \n\t\t\t\tbind:this={messagesContainer}\n\t\t\t\ton:scroll={handleScroll}\n\t\t\t>\n\t\t\t\t<!-- Loading indicator for older messages -->\n\t\t\t\t{#if isLoadingOlder}\n\t\t\t\t\t<div class=\"loading-older\">\n\t\t\t\t\t\t<LoadingSpinner size=\"sm\" />\n\t\t\t\t\t\t<span>Loading older messages...</span>\n\t\t\t\t\t</div>\n\t\t\t\t{/if}\n\n\t\t\t\t<!-- No messages state -->\n\t\t\t\t{#if channelMessages.length === 0 && !$chatStore.isLoadingMessages}\n\t\t\t\t\t<div class=\"empty-state\">\n\t\t\t\t\t\t<div class=\"empty-icon\">\n\t\t\t\t\t\t\t{#if isVoiceChannel}\n\t\t\t\t\t\t\t\t🎤\n\t\t\t\t\t\t\t{:else}\n\t\t\t\t\t\t\t\t💬\n\t\t\t\t\t\t\t{/if}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<h3>Welcome to #{channel.name}!</h3>\n\t\t\t\t\t\t<p>\n\t\t\t\t\t\t\t{#if isVoiceChannel}\n\t\t\t\t\t\t\t\tThis is a voice channel. Join the voice chat to start talking with others.\n\t\t\t\t\t\t\t{:else}\n\t\t\t\t\t\t\t\tThis is the beginning of your conversation in #{channel.name}.\n\t\t\t\t\t\t\t{/if}\n\t\t\t\t\t\t</p>\n\t\t\t\t\t</div>\n\t\t\t\t{/if}\n\n\t\t\t\t<!-- Messages -->\n\t\t\t\t{#each channelMessages as message, index (message?.id || index)}\n\t\t\t\t\t{@const prevMessage = channelMessages[index - 1]}\n\t\t\t\t\t{@const isGrouped = message && prevMessage && prevMessage.authorId === message.authorId && \n\t\t\t\t\t\tnew Date(message.createdAt).getTime() - new Date(prevMessage.createdAt).getTime() < 300000}\n\t\t\t\t\t\n\t\t\t\t\t{#if message}\n\t\t\t\t\t\t<div class=\"message-wrapper\" class:grouped={isGrouped}>\n\t\t\t\t\t\t\t<EnhancedMessage \n\t\t\t\t\t\t\t\t{message} \n\t\t\t\t\t\t\t\t{currentUser}\n\t\t\t\t\t\t\t\tisReply={!!message.replyToId}\n\t\t\t\t\t\t\t\tshowActions={true}\n\t\t\t\t\t\t\t\ton:reply={handleReply}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t{/if}\n\t\t\t\t{/each}\n\n\t\t\t\t<!-- Typing indicators -->\n\t\t\t\t{#if $chatStore.typingUsers.length > 0}\n\t\t\t\t\t<div class=\"typing-indicator\">\n\t\t\t\t\t\t<div class=\"typing-dots\">\n\t\t\t\t\t\t\t<span></span>\n\t\t\t\t\t\t\t<span></span>\n\t\t\t\t\t\t\t<span></span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<span class=\"typing-text\">\n\t\t\t\t\t\t\t{formatTypingUsers($chatStore.typingUsers)}\n\t\t\t\t\t\t</span>\n\t\t\t\t\t</div>\n\t\t\t\t{/if}\n\n\t\t\t\t<!-- Loading indicator -->\n\t\t\t\t{#if $chatStore.isLoadingMessages}\n\t\t\t\t\t<div class=\"loading-messages\">\n\t\t\t\t\t\t<LoadingSpinner />\n\t\t\t\t\t\t<span>Loading messages...</span>\n\t\t\t\t\t</div>\n\t\t\t\t{/if}\n\t\t\t</div>\n\n\t\t\t<!-- Scroll to bottom button -->\n\t\t\t{#if showScrollToBottom}\n\t\t\t\t<button class=\"scroll-to-bottom\" on:click={scrollToBottom}>\n\t\t\t\t\t<span class=\"scroll-icon\">↓</span>\n\t\t\t\t\t<span class=\"scroll-text\">New messages</span>\n\t\t\t\t</button>\n\t\t\t{/if}\n\t\t</div>\n\n\t\t<!-- Message Input (for text channels) -->\n\t\t{#if !isVoiceChannel}\n\t\t\t<EnhancedMessageInput \n\t\t\t\tchannelId={channel.id}\n\t\t\t\tplaceholder=\"Message #{channel.name}\"\n\t\t\t\tdisabled={!currentUser}\n\t\t\t/>\n\t\t{/if}\n\n\t{:else}\n\t\t<!-- No channel selected state -->\n\t\t<div class=\"no-channel-state\">\n\t\t\t<div class=\"no-channel-icon\">💬</div>\n\t\t\t<h3>No channel selected</h3>\n\t\t\t<p>Select a channel from the sidebar to start chatting.</p>\n\t\t</div>\n\t{/if}\n</div>\n\n<style>\n\t.chat-area {\n\t\tdisplay: flex;\n\t\tflex-direction: column;\n\t\theight: 100%;\n\t\tbackground-color: var(--chat-bg, #1a1a1a);\n\t\tposition: relative;\n\t}\n\n\t.voice-channel {\n\t\tbackground-color: rgba(59, 130, 246, 0.02);\n\t}\n\n\t.channel-header {\n\t\tdisplay: flex;\n\t\talign-items: center;\n\t\tjustify-content: space-between;\n\t\tpadding: 1rem 1.5rem;\n\t\tborder-bottom: 1px solid var(--border-color, #404040);\n\t\tbackground-color: var(--surface-color, #2d2d2d);\n\t\tflex-shrink: 0;\n\t}\n\n\t.channel-info {\n\t\tdisplay: flex;\n\t\talign-items: center;\n\t\tgap: 0.75rem;\n\t}\n\n\t.channel-icon {\n\t\tfont-size: 1.5rem;\n\t}\n\n\t.channel-name {\n\t\tmargin: 0;\n\t\tfont-size: 1.25rem;\n\t\tfont-weight: 600;\n\t\tcolor: var(--text-primary, #ffffff);\n\t}\n\n\t.channel-description {\n\t\tcolor: var(--text-muted, #6b7280);\n\t\tfont-size: 0.875rem;\n\t}\n\n\t.channel-actions {\n\t\tdisplay: flex;\n\t\talign-items: center;\n\t\tgap: 1rem;\n\t}\n\n\t.voice-status {\n\t\tdisplay: flex;\n\t\talign-items: center;\n\t}\n\n\t.voice-indicator {\n\t\tpadding: 0.5rem 1rem;\n\t\tborder-radius: 0.5rem;\n\t\tfont-weight: 500;\n\t\tfont-size: 0.875rem;\n\t\tbackground-color: var(--surface-color, #2d2d2d);\n\t\tborder: 1px solid var(--border-color, #404040);\n\t\tcolor: var(--text-muted, #6b7280);\n\t}\n\n\t.voice-indicator.connected {\n\t\tbackground-color: rgba(239, 68, 68, 0.1);\n\t\tborder-color: #ef4444;\n\t\tcolor: #ef4444;\n\t\tanimation: pulse 2s infinite;\n\t}\n\n\t@keyframes pulse {\n\t\t0%, 100% { opacity: 1; }\n\t\t50% { opacity: 0.7; }\n\t}\n\n\t.messages-area {\n\t\tflex: 1;\n\t\tposition: relative;\n\t\toverflow: hidden;\n\t\tdisplay: flex;\n\t\tflex-direction: column;\n\t}\n\n\t.messages-container {\n\t\tflex: 1;\n\t\toverflow-y: auto;\n\t\tscroll-behavior: smooth;\n\t}\n\n\t.loading-older {\n\t\tdisplay: flex;\n\t\talign-items: center;\n\t\tjustify-content: center;\n\t\tgap: 0.5rem;\n\t\tpadding: 1rem;\n\t\tcolor: var(--text-muted, #6b7280);\n\t\tfont-size: 0.875rem;\n\t}\n\n\t.empty-state {\n\t\tdisplay: flex;\n\t\tflex-direction: column;\n\t\talign-items: center;\n\t\tjustify-content: center;\n\t\theight: 100%;\n\t\ttext-align: center;\n\t\tpadding: 2rem;\n\t\tcolor: var(--text-muted, #6b7280);\n\t}\n\n\t.empty-icon {\n\t\tfont-size: 4rem;\n\t\tmargin-bottom: 1rem;\n\t}\n\n\t.empty-state h3 {\n\t\tmargin: 0 0 0.5rem 0;\n\t\tcolor: var(--text-primary, #ffffff);\n\t\tfont-size: 1.5rem;\n\t}\n\n\t.empty-state p {\n\t\tmargin: 0;\n\t\tmax-width: 400px;\n\t\tline-height: 1.5;\n\t}\n\n\t.message-wrapper {\n\t\tborder-left: 3px solid transparent;\n\t\ttransition: border-color 0.2s;\n\t}\n\n\t.message-wrapper:hover {\n\t\tborder-left-color: var(--accent-color, #3b82f6);\n\t}\n\n\t.message-wrapper.grouped {\n\t\tmargin-top: 0.25rem;\n\t}\n\n\t.typing-indicator {\n\t\tdisplay: flex;\n\t\talign-items: center;\n\t\tgap: 0.75rem;\n\t\tpadding: 0.75rem 1rem;\n\t\tmargin: 0.5rem 1rem;\n\t\tbackground-color: var(--surface-color, #2d2d2d);\n\t\tborder-radius: 0.5rem;\n\t\tcolor: var(--text-muted, #6b7280);\n\t\tfont-size: 0.875rem;\n\t}\n\n\t.typing-dots {\n\t\tdisplay: flex;\n\t\tgap: 0.25rem;\n\t}\n\n\t.typing-dots span {\n\t\twidth: 0.5rem;\n\t\theight: 0.5rem;\n\t\tbackground-color: var(--accent-color, #3b82f6);\n\t\tborder-radius: 50%;\n\t\tanimation: typing 1.5s infinite;\n\t}\n\n\t.typing-dots span:nth-child(2) {\n\t\tanimation-delay: 0.2s;\n\t}\n\n\t.typing-dots span:nth-child(3) {\n\t\tanimation-delay: 0.4s;\n\t}\n\n\t@keyframes typing {\n\t\t0%, 60%, 100% {\n\t\t\ttransform: scale(1);\n\t\t\topacity: 0.5;\n\t\t}\n\t\t30% {\n\t\t\ttransform: scale(1.2);\n\t\t\topacity: 1;\n\t\t}\n\t}\n\n\t.loading-messages {\n\t\tdisplay: flex;\n\t\tflex-direction: column;\n\t\talign-items: center;\n\t\tjustify-content: center;\n\t\tpadding: 2rem;\n\t\tgap: 1rem;\n\t\tcolor: var(--text-muted, #6b7280);\n\t}\n\n\t.scroll-to-bottom {\n\t\tposition: absolute;\n\t\tbottom: 1rem;\n\t\tright: 1rem;\n\t\tdisplay: flex;\n\t\talign-items: center;\n\t\tgap: 0.5rem;\n\t\tpadding: 0.75rem 1rem;\n\t\tbackground-color: var(--accent-color, #3b82f6);\n\t\tcolor: white;\n\t\tborder: none;\n\t\tborder-radius: 2rem;\n\t\tcursor: pointer;\n\t\tfont-weight: 500;\n\t\tbox-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);\n\t\ttransition: all 0.2s;\n\t\tz-index: 10;\n\t}\n\n\t.scroll-to-bottom:hover {\n\t\tbackground-color: var(--accent-hover, #2563eb);\n\t\ttransform: translateY(-2px);\n\t\tbox-shadow: 0 6px 16px rgba(0, 0, 0, 0.4);\n\t}\n\n\t.scroll-icon {\n\t\tfont-size: 1.25rem;\n\t\tline-height: 1;\n\t}\n\n\t.scroll-text {\n\t\tfont-size: 0.875rem;\n\t}\n\n\t.no-channel-state {\n\t\tdisplay: flex;\n\t\tflex-direction: column;\n\t\talign-items: center;\n\t\tjustify-content: center;\n\t\theight: 100%;\n\t\ttext-align: center;\n\t\tcolor: var(--text-muted, #6b7280);\n\t}\n\n\t.no-channel-icon {\n\t\tfont-size: 4rem;\n\t\tmargin-bottom: 1rem;\n\t}\n\n\t.no-channel-state h3 {\n\t\tmargin: 0 0 0.5rem 0;\n\t\tcolor: var(--text-primary, #ffffff);\n\t\tfont-size: 1.5rem;\n\t}\n\n\t.no-channel-state p {\n\t\tmargin: 0;\n\t\tmax-width: 400px;\n\t\tline-height: 1.5;\n\t}\n\n\t/* Responsive design */\n\t@media (max-width: 768px) {\n\t\t.channel-header {\n\t\t\tpadding: 0.75rem 1rem;\n\t\t}\n\n\t\t.channel-info {\n\t\t\tgap: 0.5rem;\n\t\t}\n\n\t\t.channel-name {\n\t\t\tfont-size: 1.125rem;\n\t\t}\n\n\t\t.channel-description {\n\t\t\tdisplay: none;\n\t\t}\n\n\t\t.scroll-to-bottom {\n\t\t\tbottom: 0.5rem;\n\t\t\tright: 0.5rem;\n\t\t\tpadding: 0.5rem 0.75rem;\n\t\t}\n\n\t\t.scroll-text {\n\t\t\tdisplay: none;\n\t\t}\n\t}\n\n\t/* Custom scrollbar */\n\t.messages-container::-webkit-scrollbar {\n\t\twidth: 8px;\n\t}\n\n\t.messages-container::-webkit-scrollbar-track {\n\t\tbackground: var(--surface-color, #2d2d2d);\n\t}\n\n\t.messages-container::-webkit-scrollbar-thumb {\n\t\tbackground: var(--border-color, #404040);\n\t\tborder-radius: 4px;\n\t}\n\n\t.messages-container::-webkit-scrollbar-thumb:hover {\n\t\tbackground: var(--accent-color, #3b82f6);\n\t}\n</style>\n","usedDeprecatedRules":[]},{"filePath":"/Users/bennerrr/Feathur/client/web/src/lib/components/ui/EnhancedMessage.svelte","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":38,"column":4,"nodeType":"MemberExpression","messageId":"unexpected","endLine":38,"endColumn":17,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[1065,1113],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":52,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":52,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[1392,1442],"text":""},"desc":"Remove the console.error()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"<script lang=\"ts\">\n\timport { createEventDispatcher } from 'svelte';\n\timport type { Message, User } from '$lib/types';\n\timport { chatActions } from '$lib/stores/chat';\n\timport UserAvatar from './UserAvatar.svelte';\n\timport ReactionPicker from './ReactionPicker.svelte';\n\timport { formatDistanceToNow } from 'date-fns';\n\n\texport let message: Message;\n\texport let currentUser: User | null = null;\n\texport let isReply = false;\n\texport let showActions = true;\n\n\tconst dispatch = createEventDispatcher();\n\n\tlet showReactionPicker = false;\n\tlet isEditing = false;\n\tlet editContent = message.content;\n\n\t$: isOwnMessage = currentUser?.id === message.authorId;\n\t$: formattedTime = formatDistanceToNow(new Date(message.createdAt), { addSuffix: true });\n\n\tfunction handleReply() {\n\t\tchatActions.setReplyTo(message);\n\t\tdispatch('reply', { message });\n\t}\n\n\tfunction handleEdit() {\n\t\tisEditing = true;\n\t\teditContent = message.content;\n\t}\n\n\tasync function saveEdit() {\n\t\ttry {\n\t\t\tawait chatActions.editMessage(message.id, editContent);\n\t\t\tisEditing = false;\n\t\t} catch (error) {\n\t\t\tconsole.error('Failed to edit message:', error);\n\t\t}\n\t}\n\n\tfunction cancelEdit() {\n\t\tisEditing = false;\n\t\teditContent = message.content;\n\t}\n\n\tasync function handleDelete() {\n\t\tif (confirm('Are you sure you want to delete this message?')) {\n\t\t\ttry {\n\t\t\t\tawait chatActions.deleteMessageAsync(message.id);\n\t\t\t} catch (error) {\n\t\t\t\tconsole.error('Failed to delete message:', error);\n\t\t\t}\n\t\t}\n\t}\n\n\tfunction handleReaction(emoji: string) {\n\t\tif (!currentUser) return;\n\t\t\n\t\tconst existingReaction = message.reactions?.find(r => r.emoji === emoji);\n\t\tconst userReacted = existingReaction?.users.some(u => u.id === currentUser.id);\n\n\t\tif (userReacted) {\n\t\t\tchatActions.removeReaction(message.id, emoji, currentUser.id);\n\t\t} else {\n\t\t\tchatActions.addReaction(message.id, emoji, currentUser.id);\n\t\t}\n\t\t\n\t\tshowReactionPicker = false;\n\t}\n\n\tfunction handleKeydown(event: KeyboardEvent) {\n\t\tif (event.key === 'Enter' && !event.shiftKey) {\n\t\t\tevent.preventDefault();\n\t\t\tsaveEdit();\n\t\t} else if (event.key === 'Escape') {\n\t\t\tcancelEdit();\n\t\t}\n\t}\n</script>\n\n<div class=\"message-container\" class:is-reply={isReply} class:is-own={isOwnMessage}>\n\t{#if message.replyTo}\n\t\t<div class=\"reply-reference\">\n\t\t\t<div class=\"reply-line\"></div>\n\t\t\t<div class=\"reply-content\">\n\t\t\t\t<UserAvatar user={message.replyTo.author} size=\"sm\" />\n\t\t\t\t<span class=\"reply-username\">{message.replyTo.author.username}</span>\n\t\t\t\t<span class=\"reply-text\">{message.replyTo.content.slice(0, 50)}{message.replyTo.content.length > 50 ? '...' : ''}</span>\n\t\t\t</div>\n\t\t</div>\n\t{/if}\n\n\t<div class=\"message-main\">\n\t\t<div class=\"message-avatar\">\n\t\t\t<UserAvatar user={message.author} size=\"md\" />\n\t\t</div>\n\n\t\t<div class=\"message-content\">\n\t\t\t<div class=\"message-header\">\n\t\t\t\t<span class=\"username\" class:own-username={isOwnMessage}>\n\t\t\t\t\t{message.author.username}\n\t\t\t\t</span>\n\t\t\t\t<time class=\"timestamp\" title={new Date(message.createdAt).toLocaleString()}>\n\t\t\t\t\t{formattedTime}\n\t\t\t\t</time>\n\t\t\t\t{#if message.isEdited}\n\t\t\t\t\t<span class=\"edited-indicator\">(edited)</span>\n\t\t\t\t{/if}\n\t\t\t</div>\n\n\t\t\t<div class=\"message-body\">\n\t\t\t\t{#if isEditing}\n\t\t\t\t\t<div class=\"edit-container\">\n\t\t\t\t\t\t<textarea\n\t\t\t\t\t\t\tbind:value={editContent}\n\t\t\t\t\t\t\ton:keydown={handleKeydown}\n\t\t\t\t\t\t\tclass=\"edit-input\"\n\t\t\t\t\t\t\trows=\"1\"\n\t\t\t\t\t\t\tplaceholder=\"Edit message...\"\n\t\t\t\t\t\t></textarea>\n\t\t\t\t\t\t<div class=\"edit-actions\">\n\t\t\t\t\t\t\t<button on:click={saveEdit} class=\"save-btn\">Save</button>\n\t\t\t\t\t\t\t<button on:click={cancelEdit} class=\"cancel-btn\">Cancel</button>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t{:else}\n\t\t\t\t\t<div class=\"message-text\">\n\t\t\t\t\t\t{message.content}\n\t\t\t\t\t</div>\n\t\t\t\t{/if}\n\n\t\t\t\t{#if message.attachments?.length}\n\t\t\t\t\t<div class=\"attachments\">\n\t\t\t\t\t\t{#each message.attachments as attachment}\n\t\t\t\t\t\t\t<div class=\"attachment\">\n\t\t\t\t\t\t\t\t{#if attachment.mimeType.startsWith('image/')}\n\t\t\t\t\t\t\t\t\t<img src={attachment.url} alt={attachment.filename} class=\"attachment-image\" />\n\t\t\t\t\t\t\t\t{:else}\n\t\t\t\t\t\t\t\t\t<div class=\"attachment-file\">\n\t\t\t\t\t\t\t\t\t\t<span class=\"file-icon\">📎</span>\n\t\t\t\t\t\t\t\t\t\t<span class=\"file-name\">{attachment.filename}</span>\n\t\t\t\t\t\t\t\t\t\t<span class=\"file-size\">{(attachment.size / 1024).toFixed(1)}KB</span>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t{/if}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t{/each}\n\t\t\t\t\t</div>\n\t\t\t\t{/if}\n\n\t\t\t\t{#if message.reactions?.length}\n\t\t\t\t\t<div class=\"reactions\">\n\t\t\t\t\t\t{#each message.reactions as reaction}\n\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\tclass=\"reaction\"\n\t\t\t\t\t\t\t\tclass:user-reacted={reaction.users.some(u => u.id === currentUser?.id)}\n\t\t\t\t\t\t\t\ton:click={() => handleReaction(reaction.emoji)}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<span class=\"reaction-emoji\">{reaction.emoji}</span>\n\t\t\t\t\t\t\t\t<span class=\"reaction-count\">{reaction.count}</span>\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t{/each}\n\t\t\t\t\t</div>\n\t\t\t\t{/if}\n\t\t\t</div>\n\n\t\t\t{#if showActions && !isEditing}\n\t\t\t\t<div class=\"message-actions\">\n\t\t\t\t\t<button on:click={handleReply} class=\"action-btn\" title=\"Reply\">\n\t\t\t\t\t\t💬\n\t\t\t\t\t</button>\n\t\t\t\t\t<button \n\t\t\t\t\t\ton:click={() => showReactionPicker = !showReactionPicker} \n\t\t\t\t\t\tclass=\"action-btn\" \n\t\t\t\t\t\ttitle=\"Add reaction\"\n\t\t\t\t\t>\n\t\t\t\t\t\t😊\n\t\t\t\t\t</button>\n\t\t\t\t\t{#if isOwnMessage}\n\t\t\t\t\t\t<button on:click={handleEdit} class=\"action-btn\" title=\"Edit\">\n\t\t\t\t\t\t\t✏️\n\t\t\t\t\t\t</button>\n\t\t\t\t\t\t<button on:click={handleDelete} class=\"action-btn delete\" title=\"Delete\">\n\t\t\t\t\t\t\t🗑️\n\t\t\t\t\t\t</button>\n\t\t\t\t\t{/if}\n\t\t\t\t</div>\n\t\t\t{/if}\n\n\t\t\t{#if showReactionPicker}\n\t\t\t\t<ReactionPicker on:reaction={(e) => handleReaction(e.detail)} />\n\t\t\t{/if}\n\t\t</div>\n\t</div>\n</div>\n\n<style>\n\t.message-container {\n\t\tdisplay: flex;\n\t\tflex-direction: column;\n\t\tpadding: 0.5rem 1rem;\n\t\tborder-radius: 0.5rem;\n\t\ttransition: background-color 0.2s;\n\t}\n\n\t.message-container:hover {\n\t\tbackground-color: rgba(255, 255, 255, 0.05);\n\t}\n\n\t.message-container:hover .message-actions {\n\t\topacity: 1;\n\t}\n\n\t.is-reply {\n\t\tmargin-left: 2rem;\n\t\tborder-left: 3px solid var(--accent-color, #3b82f6);\n\t\tpadding-left: 1rem;\n\t}\n\n\t.is-own {\n\t\tbackground-color: rgba(59, 130, 246, 0.1);\n\t}\n\n\t.reply-reference {\n\t\tdisplay: flex;\n\t\talign-items: center;\n\t\tmargin-bottom: 0.5rem;\n\t\tfont-size: 0.875rem;\n\t\tcolor: var(--text-muted, #6b7280);\n\t}\n\n\t.reply-line {\n\t\twidth: 2px;\n\t\theight: 1rem;\n\t\tbackground-color: var(--accent-color, #3b82f6);\n\t\tmargin-right: 0.5rem;\n\t}\n\n\t.reply-content {\n\t\tdisplay: flex;\n\t\talign-items: center;\n\t\tgap: 0.5rem;\n\t}\n\n\t.reply-username {\n\t\tfont-weight: 600;\n\t\tcolor: var(--accent-color, #3b82f6);\n\t}\n\n\t.reply-text {\n\t\topacity: 0.8;\n\t}\n\n\t.message-main {\n\t\tdisplay: flex;\n\t\tgap: 0.75rem;\n\t}\n\n\t.message-avatar {\n\t\tflex-shrink: 0;\n\t}\n\n\t.message-content {\n\t\tflex: 1;\n\t\tmin-width: 0;\n\t\tposition: relative;\n\t}\n\n\t.message-header {\n\t\tdisplay: flex;\n\t\talign-items: baseline;\n\t\tgap: 0.5rem;\n\t\tmargin-bottom: 0.25rem;\n\t}\n\n\t.username {\n\t\tfont-weight: 600;\n\t\tcolor: var(--text-primary, #ffffff);\n\t}\n\n\t.own-username {\n\t\tcolor: var(--accent-color, #3b82f6);\n\t}\n\n\t.timestamp {\n\t\tfont-size: 0.75rem;\n\t\tcolor: var(--text-muted, #6b7280);\n\t}\n\n\t.edited-indicator {\n\t\tfont-size: 0.75rem;\n\t\tcolor: var(--text-muted, #6b7280);\n\t\tfont-style: italic;\n\t}\n\n\t.message-body {\n\t\tmargin-bottom: 0.5rem;\n\t}\n\n\t.message-text {\n\t\twhite-space: pre-wrap;\n\t\tword-wrap: break-word;\n\t\tline-height: 1.5;\n\t\tcolor: var(--text-secondary, #e5e5e5);\n\t}\n\n\t.edit-container {\n\t\tdisplay: flex;\n\t\tflex-direction: column;\n\t\tgap: 0.5rem;\n\t}\n\n\t.edit-input {\n\t\tbackground: var(--surface-color, #2d2d2d);\n\t\tborder: 1px solid var(--border-color, #404040);\n\t\tborder-radius: 0.375rem;\n\t\tpadding: 0.5rem;\n\t\tcolor: var(--text-primary, #ffffff);\n\t\tresize: vertical;\n\t\tmin-height: 2.5rem;\n\t}\n\n\t.edit-actions {\n\t\tdisplay: flex;\n\t\tgap: 0.5rem;\n\t}\n\n\t.save-btn, .cancel-btn {\n\t\tpadding: 0.25rem 0.75rem;\n\t\tborder-radius: 0.25rem;\n\t\tborder: none;\n\t\tfont-size: 0.875rem;\n\t\tcursor: pointer;\n\t\ttransition: background-color 0.2s;\n\t}\n\n\t.save-btn {\n\t\tbackground-color: var(--accent-color, #3b82f6);\n\t\tcolor: white;\n\t}\n\n\t.save-btn:hover {\n\t\tbackground-color: var(--accent-hover, #2563eb);\n\t}\n\n\t.cancel-btn {\n\t\tbackground-color: transparent;\n\t\tcolor: var(--text-muted, #6b7280);\n\t\tborder: 1px solid var(--border-color, #404040);\n\t}\n\n\t.cancel-btn:hover {\n\t\tbackground-color: var(--surface-color, #2d2d2d);\n\t}\n\n\t.attachments {\n\t\tmargin-top: 0.5rem;\n\t\tdisplay: flex;\n\t\tflex-direction: column;\n\t\tgap: 0.5rem;\n\t}\n\n\t.attachment-image {\n\t\tmax-width: 400px;\n\t\tmax-height: 300px;\n\t\tborder-radius: 0.5rem;\n\t\tcursor: pointer;\n\t}\n\n\t.attachment-file {\n\t\tdisplay: flex;\n\t\talign-items: center;\n\t\tgap: 0.5rem;\n\t\tpadding: 0.5rem;\n\t\tbackground-color: var(--surface-color, #2d2d2d);\n\t\tborder-radius: 0.375rem;\n\t\tborder: 1px solid var(--border-color, #404040);\n\t}\n\n\t.file-icon {\n\t\tfont-size: 1.25rem;\n\t}\n\n\t.file-name {\n\t\tfont-weight: 500;\n\t\tcolor: var(--text-primary, #ffffff);\n\t}\n\n\t.file-size {\n\t\tfont-size: 0.875rem;\n\t\tcolor: var(--text-muted, #6b7280);\n\t}\n\n\t.reactions {\n\t\tdisplay: flex;\n\t\tflex-wrap: wrap;\n\t\tgap: 0.25rem;\n\t\tmargin-top: 0.5rem;\n\t}\n\n\t.reaction {\n\t\tdisplay: flex;\n\t\talign-items: center;\n\t\tgap: 0.25rem;\n\t\tpadding: 0.25rem 0.5rem;\n\t\tbackground-color: var(--surface-color, #2d2d2d);\n\t\tborder: 1px solid var(--border-color, #404040);\n\t\tborder-radius: 1rem;\n\t\tcursor: pointer;\n\t\ttransition: all 0.2s;\n\t\tfont-size: 0.875rem;\n\t}\n\n\t.reaction:hover {\n\t\tborder-color: var(--accent-color, #3b82f6);\n\t}\n\n\t.reaction.user-reacted {\n\t\tbackground-color: var(--accent-color, #3b82f6);\n\t\tborder-color: var(--accent-color, #3b82f6);\n\t\tcolor: white;\n\t}\n\n\t.reaction-emoji {\n\t\tfont-size: 1rem;\n\t}\n\n\t.reaction-count {\n\t\tfont-weight: 500;\n\t\tmin-width: 1rem;\n\t\ttext-align: center;\n\t}\n\n\t.message-actions {\n\t\tposition: absolute;\n\t\ttop: -0.5rem;\n\t\tright: 0;\n\t\tdisplay: flex;\n\t\tgap: 0.25rem;\n\t\tbackground-color: var(--surface-color, #2d2d2d);\n\t\tborder: 1px solid var(--border-color, #404040);\n\t\tborder-radius: 0.5rem;\n\t\tpadding: 0.25rem;\n\t\topacity: 0;\n\t\ttransition: opacity 0.2s;\n\t\tbox-shadow: 0 2px 8px rgba(0, 0, 0, 0.2);\n\t}\n\n\t.action-btn {\n\t\tpadding: 0.25rem;\n\t\tbackground: transparent;\n\t\tborder: none;\n\t\tborder-radius: 0.25rem;\n\t\tcursor: pointer;\n\t\tfont-size: 0.875rem;\n\t\ttransition: background-color 0.2s;\n\t\tcolor: var(--text-secondary, #e5e5e5);\n\t}\n\n\t.action-btn:hover {\n\t\tbackground-color: var(--accent-color, #3b82f6);\n\t}\n\n\t.action-btn.delete:hover {\n\t\tbackground-color: #ef4444;\n\t}\n\n\t/* Dark mode adjustments */\n\t@media (prefers-color-scheme: dark) {\n\t\t.message-container {\n\t\t\tcolor: #e5e5e5;\n\t\t}\n\t}\n</style>\n","usedDeprecatedRules":[]},{"filePath":"/Users/bennerrr/Feathur/client/web/src/lib/components/ui/EnhancedMessageInput.svelte","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Message' is defined but never used. Allowed unused vars must match /^_/u.","line":3,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":23},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":44,"column":4,"nodeType":"MemberExpression","messageId":"unexpected","endLine":44,"endColumn":17,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[1257,1305],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":101,"column":4,"nodeType":"MemberExpression","messageId":"unexpected","endLine":101,"endColumn":17,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[2601,2648],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"svelte/valid-compile","severity":1,"message":"`<div>` with a dragover, dragleave or drop handler must have an ARIA role\nhttps://svelte.dev/e/a11y_no_static_element_interactions(a11y_no_static_element_interactions)","line":156,"column":2,"nodeType":null,"endLine":226,"endColumn":8}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"<script lang=\"ts\">\n\timport { createEventDispatcher } from 'svelte';\n\timport type { Message } from '$lib/types';\n\timport { chatActions, replyingTo } from '$lib/stores/chat';\n\n\texport let channelId: number;\n\texport let placeholder = 'Type a message...';\n\texport let disabled = false;\n\n\tconst dispatch = createEventDispatcher();\n\n\tlet content = '';\n\tlet textArea: HTMLTextAreaElement;\n\tlet fileInput: HTMLInputElement;\n\tlet isDragging = false;\n\tlet isUploading = false;\n\tlet uploadProgress = 0;\n\n\t$: canSend = content.trim().length > 0 && !disabled && !isUploading;\n\n\tfunction adjustTextAreaHeight() {\n\t\tif (textArea) {\n\t\t\ttextArea.style.height = 'auto';\n\t\t\ttextArea.style.height = Math.min(textArea.scrollHeight, 200) + 'px';\n\t\t}\n\t}\n\n\tasync function sendMessage() {\n\t\tif (!canSend) return;\n\n\t\tconst messageContent = content.trim();\n\t\tconst replyToId = $replyingTo && typeof $replyingTo === 'object' && 'id' in $replyingTo ? $replyingTo.id : undefined;\n\n\t\t// Clear input immediately for better UX\n\t\tcontent = '';\n\t\tadjustTextAreaHeight();\n\n\t\ttry {\n\t\t\tawait chatActions.sendMessage(channelId, messageContent, replyToId);\n\t\t\tdispatch('messageSent', { content: messageContent });\n\t\t} catch (error) {\n\t\t\t// Restore content on error\n\t\t\tcontent = messageContent;\n\t\t\tconsole.error('Failed to send message:', error);\n\t\t}\n\t}\n\n\tfunction handleKeyDown(event: KeyboardEvent) {\n\t\tif (event.key === 'Enter' && !event.shiftKey) {\n\t\t\tevent.preventDefault();\n\t\t\tsendMessage();\n\t\t}\n\t}\n\n\tfunction handleFileSelect() {\n\t\tfileInput.click();\n\t}\n\n\tasync function handleFileChange(event: Event) {\n\t\tconst files = (event.target as HTMLInputElement).files;\n\t\tif (!files || files.length === 0) return;\n\n\t\tfor (const file of Array.from(files)) {\n\t\t\tawait uploadFile(file);\n\t\t}\n\t}\n\n\tasync function uploadFile(file: File) {\n\t\ttry {\n\t\t\tisUploading = true;\n\t\t\tuploadProgress = 0;\n\n\t\t\t// Create FormData for file upload\n\t\t\tconst formData = new FormData();\n\t\t\tformData.append('file', file);\n\t\t\tformData.append('channelId', channelId.toString());\n\n\t\t\t// Upload file to server\n\t\t\tconst response = await fetch('/api/upload', {\n\t\t\t\tmethod: 'POST',\n\t\t\t\theaders: {\n\t\t\t\t\t'Authorization': `Bearer ${localStorage.getItem('auth_token')}`\n\t\t\t\t},\n\t\t\t\tbody: formData\n\t\t\t});\n\n\t\t\tif (!response.ok) {\n\t\t\t\tthrow new Error('Upload failed');\n\t\t\t}\n\n\t\t\tconst result = await response.json();\n\t\t\t\n\t\t\t// Send message with file attachment\n\t\t\tawait chatActions.sendMessage(\n\t\t\t\tchannelId, \n\t\t\t\t`📎 [${file.name}](${result.url})`, \n\t\t\t\t$replyingTo && typeof $replyingTo === 'object' && 'id' in $replyingTo ? $replyingTo.id : undefined\n\t\t\t);\n\n\t\t} catch (error) {\n\t\t\tconsole.error('Failed to upload file:', error);\n\t\t\t// Show error to user\n\t\t\tdispatch('error', { message: 'Failed to upload file' });\n\t\t} finally {\n\t\t\tisUploading = false;\n\t\t\tuploadProgress = 0;\n\t\t}\n\t}\n\n\tfunction handleDragOver(event: DragEvent) {\n\t\tevent.preventDefault();\n\t\tisDragging = true;\n\t}\n\n\tfunction handleDragLeave(event: DragEvent) {\n\t\tevent.preventDefault();\n\t\tif (!event.relatedTarget || !(event.currentTarget as HTMLElement)?.contains(event.relatedTarget as Node)) {\n\t\t\tisDragging = false;\n\t\t}\n\t}\n\n\tfunction handleDrop(event: DragEvent) {\n\t\tevent.preventDefault();\n\t\tisDragging = false;\n\n\t\tconst files = event.dataTransfer?.files;\n\t\tif (files && files.length > 0) {\n\t\t\tfor (const file of Array.from(files)) {\n\t\t\t\tuploadFile(file);\n\t\t\t}\n\t\t}\n\t}\n\n\tfunction clearReply() {\n\t\tchatActions.clearReply();\n\t}\n\n\t// Auto-resize textarea on content change\n\t$: if (content !== undefined) {\n\t\trequestAnimationFrame(adjustTextAreaHeight);\n\t}\n</script>\n\n<div class=\"message-input-container\">\n\t{#if $replyingTo}\n\t\t<div class=\"reply-preview\">\n\t\t\t<div class=\"reply-content\">\n\t\t\t\t<span class=\"reply-label\">Replying to</span>\n\t\t\t\t<span class=\"reply-username\">{$replyingTo.author.username}</span>\n\t\t\t\t<span class=\"reply-text\">{$replyingTo.content.slice(0, 100)}</span>\n\t\t\t</div>\n\t\t\t<button on:click={clearReply} class=\"reply-close\">✕</button>\n\t\t</div>\n\t{/if}\n\n\t<div \n\t\tclass=\"input-wrapper\" \n\t\tclass:dragging={isDragging}\n\t\tclass:uploading={isUploading}\n\t\ton:dragover={handleDragOver}\n\t\ton:dragleave={handleDragLeave}\n\t\ton:drop={handleDrop}\n\t>\n\t\t{#if isDragging}\n\t\t\t<div class=\"drag-overlay\">\n\t\t\t\t<div class=\"drag-content\">\n\t\t\t\t\t<span class=\"drag-icon\">📁</span>\n\t\t\t\t\t<span class=\"drag-text\">Drop files to upload</span>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t{/if}\n\n\t\t{#if isUploading}\n\t\t\t<div class=\"upload-overlay\">\n\t\t\t\t<div class=\"upload-progress\">\n\t\t\t\t\t<div class=\"progress-bar\" style=\"width: {uploadProgress}%\"></div>\n\t\t\t\t</div>\n\t\t\t\t<span class=\"upload-text\">Uploading... {uploadProgress}%</span>\n\t\t\t</div>\n\t\t{/if}\n\n\t\t<div class=\"input-controls\">\n\t\t\t<button\n\t\t\t\tclass=\"control-btn file-btn\"\n\t\t\t\ton:click={handleFileSelect}\n\t\t\t\tdisabled={isUploading}\n\t\t\t\ttitle=\"Attach file\"\n\t\t\t>\n\t\t\t\t📎\n\t\t\t</button>\n\n\t\t\t<textarea\n\t\t\t\tbind:this={textArea}\n\t\t\t\tbind:value={content}\n\t\t\t\ton:keydown={handleKeyDown}\n\t\t\t\ton:input={adjustTextAreaHeight}\n\t\t\t\t{placeholder}\n\t\t\t\t{disabled}\n\t\t\t\tclass=\"message-textarea\"\n\t\t\t\trows=\"1\"\n\t\t\t></textarea>\n\n\t\t\t<button\n\t\t\t\tclass=\"control-btn send-btn\"\n\t\t\t\tclass:can-send={canSend}\n\t\t\t\ton:click={sendMessage}\n\t\t\t\tdisabled={!canSend}\n\t\t\t\ttitle=\"Send message\"\n\t\t\t>\n\t\t\t\t{#if isUploading}\n\t\t\t\t\t⏳\n\t\t\t\t{:else}\n\t\t\t\t\t➤\n\t\t\t\t{/if}\n\t\t\t</button>\n\t\t</div>\n\n\t\t<input\n\t\t\tbind:this={fileInput}\n\t\t\ttype=\"file\"\n\t\t\tmultiple\n\t\t\ton:change={handleFileChange}\n\t\t\tstyle=\"display: none\"\n\t\t\taccept=\"image/*,video/*,audio/*,.pdf,.doc,.docx,.txt,.zip,.rar\"\n\t\t/>\n\t</div>\n\n\t<div class=\"input-hints\">\n\t\t<span class=\"hint\">Press <kbd>Enter</kbd> to send, <kbd>Shift+Enter</kbd> for new line</span>\n\t</div>\n</div>\n\n<style>\n\t.message-input-container {\n\t\tdisplay: flex;\n\t\tflex-direction: column;\n\t\tpadding: 1rem;\n\t\tbackground-color: var(--surface-color, #2d2d2d);\n\t\tborder-top: 1px solid var(--border-color, #404040);\n\t}\n\n\t.reply-preview {\n\t\tdisplay: flex;\n\t\talign-items: center;\n\t\tjustify-content: space-between;\n\t\tbackground-color: var(--accent-color, #3b82f6);\n\t\tbackground-color: rgba(59, 130, 246, 0.1);\n\t\tborder: 1px solid var(--accent-color, #3b82f6);\n\t\tborder-radius: 0.5rem 0.5rem 0 0;\n\t\tpadding: 0.75rem;\n\t\tmargin-bottom: 0.5rem;\n\t}\n\n\t.reply-content {\n\t\tdisplay: flex;\n\t\tflex-direction: column;\n\t\tgap: 0.25rem;\n\t\tflex: 1;\n\t\tmin-width: 0;\n\t}\n\n\t.reply-label {\n\t\tfont-size: 0.75rem;\n\t\tcolor: var(--accent-color, #3b82f6);\n\t\tfont-weight: 600;\n\t}\n\n\t.reply-username {\n\t\tfont-weight: 600;\n\t\tcolor: var(--text-primary, #ffffff);\n\t}\n\n\t.reply-text {\n\t\tcolor: var(--text-muted, #6b7280);\n\t\toverflow: hidden;\n\t\ttext-overflow: ellipsis;\n\t\twhite-space: nowrap;\n\t}\n\n\t.reply-close {\n\t\tbackground: none;\n\t\tborder: none;\n\t\tcolor: var(--text-muted, #6b7280);\n\t\tcursor: pointer;\n\t\tpadding: 0.25rem;\n\t\tborder-radius: 0.25rem;\n\t\ttransition: all 0.2s;\n\t}\n\n\t.reply-close:hover {\n\t\tbackground-color: rgba(255, 255, 255, 0.1);\n\t\tcolor: var(--text-primary, #ffffff);\n\t}\n\n\t.input-wrapper {\n\t\tposition: relative;\n\t\tbackground-color: var(--input-bg, #1a1a1a);\n\t\tborder: 2px solid var(--border-color, #404040);\n\t\tborder-radius: 0.75rem;\n\t\ttransition: all 0.2s;\n\t}\n\n\t.input-wrapper:focus-within {\n\t\tborder-color: var(--accent-color, #3b82f6);\n\t}\n\n\t.input-wrapper.dragging {\n\t\tborder-color: var(--accent-color, #3b82f6);\n\t\tbackground-color: rgba(59, 130, 246, 0.1);\n\t}\n\n\t.input-wrapper.uploading {\n\t\tborder-color: #f59e0b;\n\t}\n\n\t.drag-overlay, .upload-overlay {\n\t\tposition: absolute;\n\t\ttop: 0;\n\t\tleft: 0;\n\t\tright: 0;\n\t\tbottom: 0;\n\t\tdisplay: flex;\n\t\talign-items: center;\n\t\tjustify-content: center;\n\t\tbackground-color: rgba(0, 0, 0, 0.8);\n\t\tborder-radius: 0.75rem;\n\t\tz-index: 10;\n\t}\n\n\t.drag-content {\n\t\tdisplay: flex;\n\t\tflex-direction: column;\n\t\talign-items: center;\n\t\tgap: 0.5rem;\n\t}\n\n\t.drag-icon {\n\t\tfont-size: 2rem;\n\t}\n\n\t.drag-text {\n\t\tfont-weight: 600;\n\t\tcolor: var(--accent-color, #3b82f6);\n\t}\n\n\t.upload-progress {\n\t\twidth: 200px;\n\t\theight: 4px;\n\t\tbackground-color: var(--border-color, #404040);\n\t\tborder-radius: 2px;\n\t\toverflow: hidden;\n\t\tmargin-bottom: 0.5rem;\n\t}\n\n\t.progress-bar {\n\t\theight: 100%;\n\t\tbackground-color: #f59e0b;\n\t\ttransition: width 0.3s ease;\n\t}\n\n\t.upload-text {\n\t\tcolor: #f59e0b;\n\t\tfont-weight: 600;\n\t\tfont-size: 0.875rem;\n\t}\n\n\t.input-controls {\n\t\tdisplay: flex;\n\t\talign-items: flex-end;\n\t\tgap: 0.5rem;\n\t\tpadding: 0.75rem;\n\t}\n\n\t.control-btn {\n\t\tbackground: none;\n\t\tborder: none;\n\t\tpadding: 0.5rem;\n\t\tborder-radius: 0.5rem;\n\t\tcursor: pointer;\n\t\ttransition: all 0.2s;\n\t\tfont-size: 1.25rem;\n\t\tcolor: var(--text-muted, #6b7280);\n\t\tflex-shrink: 0;\n\t}\n\n\t.control-btn:hover {\n\t\tbackground-color: var(--surface-color, #2d2d2d);\n\t\tcolor: var(--text-primary, #ffffff);\n\t}\n\n\t.control-btn:disabled {\n\t\topacity: 0.5;\n\t\tcursor: not-allowed;\n\t}\n\n\t.send-btn.can-send {\n\t\tcolor: var(--accent-color, #3b82f6);\n\t}\n\n\t.send-btn.can-send:hover {\n\t\tbackground-color: var(--accent-color, #3b82f6);\n\t\tcolor: white;\n\t}\n\n\t.message-textarea {\n\t\tflex: 1;\n\t\tbackground: none;\n\t\tborder: none;\n\t\toutline: none;\n\t\tcolor: var(--text-primary, #ffffff);\n\t\tfont-size: 1rem;\n\t\tline-height: 1.5;\n\t\tresize: none;\n\t\tmin-height: 1.5rem;\n\t\tmax-height: 200px;\n\t\tfont-family: inherit;\n\t}\n\n\t.message-textarea::placeholder {\n\t\tcolor: var(--text-muted, #6b7280);\n\t}\n\n\t.input-hints {\n\t\tdisplay: flex;\n\t\tjustify-content: space-between;\n\t\talign-items: center;\n\t\tmargin-top: 0.5rem;\n\t\tfont-size: 0.75rem;\n\t\tcolor: var(--text-muted, #6b7280);\n\t}\n\n\t.hint {\n\t\tdisplay: flex;\n\t\talign-items: center;\n\t\tgap: 0.25rem;\n\t}\n\n\tkbd {\n\t\tbackground-color: var(--surface-color, #2d2d2d);\n\t\tborder: 1px solid var(--border-color, #404040);\n\t\tborder-radius: 0.25rem;\n\t\tpadding: 0.125rem 0.25rem;\n\t\tfont-size: 0.625rem;\n\t\tfont-family: monospace;\n\t}\n\n\t/* Responsive design */\n\t@media (max-width: 768px) {\n\t\t.message-input-container {\n\t\t\tpadding: 0.75rem;\n\t\t}\n\n\t\t.input-hints {\n\t\t\tdisplay: none;\n\t\t}\n\n\t\t.control-btn {\n\t\t\tpadding: 0.375rem;\n\t\t\tfont-size: 1rem;\n\t\t}\n\t}\n</style>\n","usedDeprecatedRules":[]},{"filePath":"/Users/bennerrr/Feathur/client/web/src/lib/components/ui/EnhancedVoiceControls.svelte","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":91,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":91,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2400,2403],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2400,2403],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":92,"column":4,"nodeType":"MemberExpression","messageId":"unexpected","endLine":92,"endColumn":17,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[2410,2457],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":108,"column":4,"nodeType":"MemberExpression","messageId":"unexpected","endLine":108,"endColumn":15,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2729,2780],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":115,"column":4,"nodeType":"MemberExpression","messageId":"unexpected","endLine":115,"endColumn":15,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2952,3012],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":117,"column":4,"nodeType":"MemberExpression","messageId":"unexpected","endLine":117,"endColumn":17,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[3034,3084],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":123,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":123,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[3262,3317],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":132,"column":4,"nodeType":"MemberExpression","messageId":"unexpected","endLine":132,"endColumn":15,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3475,3540],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'getConnectionQualityIcon' is defined but never used. Allowed unused vars must match /^_/u.","line":152,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":152,"endColumn":35},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'getConnectionQualityColor' is defined but never used. Allowed unused vars must match /^_/u.","line":161,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":161,"endColumn":36},{"ruleId":"svelte/valid-compile","severity":1,"message":"Visible, non-interactive elements with a click event must be accompanied by a keyboard event handler. Consider whether an interactive element such as `<button type=\"button\">` or `<a>` might be more appropriate\nhttps://svelte.dev/e/a11y_click_events_have_key_events(a11y_click_events_have_key_events)","line":362,"column":3,"nodeType":null,"endLine":380,"endColumn":9},{"ruleId":"svelte/valid-compile","severity":1,"message":"`<div>` with a click handler must have an ARIA role\nhttps://svelte.dev/e/a11y_no_static_element_interactions(a11y_no_static_element_interactions)","line":362,"column":3,"nodeType":null,"endLine":380,"endColumn":9},{"ruleId":"svelte/valid-compile","severity":1,"message":"Visible, non-interactive elements with a click event must be accompanied by a keyboard event handler. Consider whether an interactive element such as `<button type=\"button\">` or `<a>` might be more appropriate\nhttps://svelte.dev/e/a11y_click_events_have_key_events(a11y_click_events_have_key_events)","line":363,"column":4,"nodeType":null,"endLine":379,"endColumn":10},{"ruleId":"svelte/valid-compile","severity":1,"message":"`<div>` with a click handler must have an ARIA role\nhttps://svelte.dev/e/a11y_no_static_element_interactions(a11y_no_static_element_interactions)","line":363,"column":4,"nodeType":null,"endLine":379,"endColumn":10},{"ruleId":"svelte/valid-compile","severity":1,"message":"Unused CSS selector \".participant-status\"\nhttps://svelte.dev/e/css_unused_selector(css_unused_selector)","line":572,"column":2,"nodeType":null,"endLine":572,"endColumn":21},{"ruleId":"svelte/valid-compile","severity":1,"message":"Unused CSS selector \".speaking-indicator\"\nhttps://svelte.dev/e/css_unused_selector(css_unused_selector)","line":577,"column":2,"nodeType":null,"endLine":577,"endColumn":21},{"ruleId":"svelte/valid-compile","severity":1,"message":"Unused CSS selector \".muted-indicator\"\nhttps://svelte.dev/e/css_unused_selector(css_unused_selector)","line":581,"column":2,"nodeType":null,"endLine":581,"endColumn":18},{"ruleId":"svelte/valid-compile","severity":1,"message":"Unused CSS selector \".deafened-indicator\"\nhttps://svelte.dev/e/css_unused_selector(css_unused_selector)","line":581,"column":20,"nodeType":null,"endLine":581,"endColumn":39},{"ruleId":"svelte/valid-compile","severity":1,"message":"Unused CSS selector \".participant-controls\"\nhttps://svelte.dev/e/css_unused_selector(css_unused_selector)","line":585,"column":2,"nodeType":null,"endLine":585,"endColumn":23},{"ruleId":"svelte/valid-compile","severity":1,"message":"Unused CSS selector \".volume-control\"\nhttps://svelte.dev/e/css_unused_selector(css_unused_selector)","line":591,"column":2,"nodeType":null,"endLine":591,"endColumn":17},{"ruleId":"svelte/valid-compile","severity":1,"message":"Unused CSS selector \".connection-quality\"\nhttps://svelte.dev/e/css_unused_selector(css_unused_selector)","line":633,"column":2,"nodeType":null,"endLine":633,"endColumn":21}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":20,"fixableErrorCount":0,"fixableWarningCount":0,"source":"<script lang=\"ts\">\n\timport { onMount, onDestroy } from 'svelte';\n\timport { voiceClient, type VoiceState, type VoiceSettings } from '$lib/webrtc/voice';\n\timport { authStore } from '$lib/stores/auth';\n\timport type { Channel, User } from '$lib/types';\n\n\texport let channel: Channel | null = null;\n\texport let currentUser: User | null = null;\n\n\tlet voiceState: VoiceState;\n\tlet voiceSettings: VoiceSettings;\n\tlet isConnecting = false;\n\tlet isDisconnecting = false;\n\tlet error = '';\n\tlet showSettings = false;\n\tlet showParticipants = false;\n\tlet showDisconnectConfirm = false;\n\tlet showSuccessMessage = false;\n\n\t// Subscribe to voice state and settings\n\tonMount(() => {\n\t\tconst unsubscribeState = voiceClient.stateStore.subscribe(state => {\n\t\t\tvoiceState = state;\n\t\t});\n\n\t\tconst unsubscribeSettings = voiceClient.settingsStore.subscribe(settings => {\n\t\t\tvoiceSettings = settings;\n\t\t});\n\n\t\t// Add keyboard event listener for Escape key and quick disconnect\n\t\tconst handleKeyDown = (event: KeyboardEvent) => {\n\t\t\tif (event.key === 'Escape' && showDisconnectConfirm) {\n\t\t\t\tcancelDisconnect();\n\t\t\t}\n\t\t\t\n\t\t\t// Quick disconnect with Ctrl+D (or Cmd+D on Mac)\n\t\t\tif ((event.ctrlKey || event.metaKey) && event.key === 'd') {\n\t\t\t\tevent.preventDefault();\n\t\t\t\tif (voiceState?.isConnected && voiceState?.currentChannelId) {\n\t\t\t\t\tconfirmDisconnect();\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tdocument.addEventListener('keydown', handleKeyDown);\n\n\t\treturn () => {\n\t\t\tunsubscribeState();\n\t\t\tunsubscribeSettings();\n\t\t\tdocument.removeEventListener('keydown', handleKeyDown);\n\t\t};\n\t});\n\n\tonDestroy(() => {\n\t\t// Clean up voice connection when component is destroyed\n\t\tif (voiceState?.currentChannelId) {\n\t\t\tvoiceClient.leaveChannel();\n\t\t}\n\t});\n\n\tasync function connectVoice() {\n\t\tif (!channel || !currentUser) {\n\t\t\terror = 'No channel or user selected';\n\t\t\treturn;\n\t\t}\n\n\t\tconst token = $authStore.token;\n\t\tif (!token) {\n\t\t\terror = 'Not authenticated';\n\t\t\treturn;\n\t\t}\n\n\t\tisConnecting = true;\n\t\terror = '';\n\n\t\ttry {\n\t\t\t// Connect to voice server using relative URL to leverage Vite's proxy\n\t\t\tawait voiceClient.connect(token, '');\n\t\t\t\n\t\t\t// Start local audio stream\n\t\t\tawait voiceClient.startLocalStream();\n\t\t\t\n\t\t\t// Join voice channel\n\t\t\tawait voiceClient.joinChannel(channel.id, channel.serverId);\n\t\t\t\n\t\t\t// Handle audio autoplay after user interaction\n\t\t\tsetTimeout(() => {\n\t\t\t\tvoiceClient.handleAudioAutoplay();\n\t\t\t}, 1000);\n\t\t\t\n\t\t} catch (err: any) {\n\t\t\tconsole.error('Failed to connect voice:', err);\n\t\t\terror = err.message || 'Failed to connect to voice channel';\n\t\t} finally {\n\t\t\tisConnecting = false;\n\t\t}\n\t}\n\n\tasync function disconnectVoice() {\n\t\tif (isDisconnecting) {\n\t\t\treturn; // Prevent multiple clicks\n\t\t}\n\t\t\n\t\tisDisconnecting = true;\n\t\terror = '';\n\t\t\n\t\ttry {\n\t\t\tconsole.log('Disconnecting from voice channel...');\n\t\t\tawait voiceClient.leaveChannel();\n\t\t\tshowDisconnectConfirm = false;\n\t\t\tshowSuccessMessage = true;\n\t\t\tsetTimeout(() => {\n\t\t\t\tshowSuccessMessage = false;\n\t\t\t}, 3000);\n\t\t\tconsole.log('Successfully disconnected from voice channel');\n\t\t} catch (err) {\n\t\t\tconsole.error('Failed to disconnect voice:', err);\n\t\t\terror = 'Failed to disconnect from voice channel';\n\t\t\t// Even if there's an error, try to force disconnect\n\t\t\ttry {\n\t\t\t\tvoiceClient.disconnect();\n\t\t\t} catch (forceErr) {\n\t\t\t\tconsole.error('Failed to force disconnect:', forceErr);\n\t\t\t}\n\t\t} finally {\n\t\t\tisDisconnecting = false;\n\t\t}\n\t}\n\n\tfunction confirmDisconnect() {\n\t\tif (!voiceState?.isConnected || !voiceState?.currentChannelId) {\n\t\t\tconsole.log('Not connected to voice channel, cannot disconnect');\n\t\t\treturn;\n\t\t}\n\t\tshowDisconnectConfirm = true;\n\t}\n\n\tfunction cancelDisconnect() {\n\t\tshowDisconnectConfirm = false;\n\t}\n\n\tfunction toggleMute() {\n\t\tif (!voiceState) return;\n\t\tvoiceClient.setMuted(!voiceState.isMuted);\n\t}\n\n\tfunction toggleDeafen() {\n\t\tif (!voiceState) return;\n\t\tvoiceClient.setDeafened(!voiceState.isDeafened);\n\t}\n\n\tfunction getConnectionQualityIcon(quality: string) {\n\t\tswitch (quality) {\n\t\t\tcase 'excellent': return '📶';\n\t\t\tcase 'good': return '📶';\n\t\t\tcase 'poor': return '📵';\n\t\t\tdefault: return '❌';\n\t\t}\n\t}\n\n\tfunction getConnectionQualityColor(quality: string) {\n\t\tswitch (quality) {\n\t\t\tcase 'excellent': return '#10b981';\n\t\t\tcase 'good': return '#f59e0b';\n\t\t\tcase 'poor': return '#ef4444';\n\t\t\tdefault: return '#6b7280';\n\t\t}\n\t}\n</script>\n\n<div class=\"voice-controls\" class:connected={voiceState?.isConnected}>\n\t{#if channel?.type === 'voice'}\n\t\t<div class=\"voice-header\">\n\t\t\t<div class=\"channel-info\">\n\t\t\t\t<span class=\"voice-icon\">🎤</span>\n\t\t\t\t<span class=\"channel-name\">{channel.name}</span>\n\t\t\t\t{#if voiceState?.isConnected}\n\t\t\t\t\t<span class=\"connection-status connected\">Connected</span>\n\t\t\t\t{:else}\n\t\t\t\t\t<span class=\"connection-status\">Disconnected</span>\n\t\t\t\t{/if}\n\t\t\t</div>\n\n\t\t\t<div class=\"voice-actions\">\n\t\t\t\t<button\n\t\t\t\t\tclass=\"voice-btn join-btn\"\n\t\t\t\t\tclass:connected={voiceState?.isConnected}\n\t\t\t\t\ton:click={voiceState?.isConnected ? confirmDisconnect : connectVoice}\n\t\t\t\t\tdisabled={!currentUser || isConnecting || isDisconnecting || (voiceState?.isConnected && !voiceState?.currentChannelId)}\n\t\t\t\t\ttitle={voiceState?.isConnected ? 'Leave Voice Channel (Ctrl+D)' : 'Join Voice Channel'}\n\t\t\t\t>\n\t\t\t\t\t{#if isConnecting}\n\t\t\t\t\t\t⏳ Connecting...\n\t\t\t\t\t{:else if isDisconnecting}\n\t\t\t\t\t\t⏳ Disconnecting...\n\t\t\t\t\t{:else if voiceState?.isConnected}\n\t\t\t\t\t\t🔌 Disconnect\n\t\t\t\t\t{:else}\n\t\t\t\t\t\t🎤 Join Voice\n\t\t\t\t\t{/if}\n\t\t\t\t</button>\n\n\t\t\t\t{#if voiceState?.isConnected && voiceState.peers.size > 0}\n\t\t\t\t\t<button\n\t\t\t\t\t\tclass=\"voice-btn participants-btn\"\n\t\t\t\t\t\ton:click={() => showParticipants = !showParticipants}\n\t\t\t\t\t>\n\t\t\t\t\t\t👥 {voiceState.peers.size}\n\t\t\t\t\t</button>\n\t\t\t\t{/if}\n\t\t\t</div>\n\t\t</div>\n\n\t\t{#if voiceState?.isConnected}\n\t\t\t<div class=\"voice-status\">\n\t\t\t\t<div class=\"local-controls\">\n\t\t\t\t\t<button\n\t\t\t\t\t\tclass=\"control-btn mute-btn\"\n\t\t\t\t\t\tclass:active={voiceState?.isMuted}\n\t\t\t\t\t\ton:click={toggleMute}\n\t\t\t\t\t\ttitle={voiceState?.isMuted ? 'Unmute' : 'Mute'}\n\t\t\t\t\t>\n\t\t\t\t\t\t{#if voiceState?.isMuted}\n\t\t\t\t\t\t\t🔇\n\t\t\t\t\t\t{:else}\n\t\t\t\t\t\t\t🎤\n\t\t\t\t\t\t{/if}\n\t\t\t\t\t</button>\n\n\t\t\t\t\t<button\n\t\t\t\t\t\tclass=\"control-btn deafen-btn\"\n\t\t\t\t\t\tclass:active={voiceState?.isDeafened}\n\t\t\t\t\t\ton:click={toggleDeafen}\n\t\t\t\t\t\ttitle={voiceState?.isDeafened ? 'Undeafen' : 'Deafen'}\n\t\t\t\t\t>\n\t\t\t\t\t\t{#if voiceState?.isDeafened}\n\t\t\t\t\t\t\t🔇\n\t\t\t\t\t\t{:else}\n\t\t\t\t\t\t\t🔊\n\t\t\t\t\t\t{/if}\n\t\t\t\t\t</button>\n\n\t\t\t\t\t<button\n\t\t\t\t\t\tclass=\"control-btn settings-btn\"\n\t\t\t\t\t\ton:click={() => showSettings = !showSettings}\n\t\t\t\t\t\ttitle=\"Voice Settings\"\n\t\t\t\t\t>\n\t\t\t\t\t\t⚙️\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\n\t\t\t\t{#if error}\n\t\t\t\t\t<div class=\"voice-error\">\n\t\t\t\t\t\t<span class=\"error-icon\">⚠️</span>\n\t\t\t\t\t\t<span class=\"error-text\">{error}</span>\n\t\t\t\t\t</div>\n\t\t\t\t{/if}\n\t\t\t</div>\n\n\t\t\t{#if showParticipants}\n\t\t\t\t<div class=\"participants-panel\">\n\t\t\t\t\t<h4 class=\"participants-title\">Voice Participants ({voiceState?.peers.size || 0})</h4>\n\t\t\t\t\t<div class=\"participants-list\">\n\t\t\t\t\t\t<!-- Note: Individual participant info not available in current voice state -->\n\t\t\t\t\t\t<div class=\"participant\">\n\t\t\t\t\t\t\t<div class=\"participant-info\">\n\t\t\t\t\t\t\t\t<span class=\"participant-name\">Connected peers: {voiceState?.peers.size || 0}</span>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t{/if}\n\n\t\t\t{#if showSettings}\n\t\t\t\t<div class=\"settings-panel\">\n\t\t\t\t\t<h4 class=\"settings-title\">Voice Settings</h4>\n\t\t\t\t\t\n\t\t\t\t\t<div class=\"setting-group\">\n\t\t\t\t\t\t<label class=\"setting-label\">\n\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\ttype=\"checkbox\"\n\t\t\t\t\t\t\t\tchecked={voiceSettings?.echoCancellation}\n\t\t\t\t\t\t\t\ton:change={() => voiceClient.updateSettings({ echoCancellation: !voiceSettings?.echoCancellation })}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\tEcho Cancellation\n\t\t\t\t\t\t</label>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<div class=\"setting-group\">\n\t\t\t\t\t\t<label class=\"setting-label\">\n\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\ttype=\"checkbox\"\n\t\t\t\t\t\t\t\tchecked={voiceSettings?.noiseSuppression}\n\t\t\t\t\t\t\t\ton:change={() => voiceClient.updateSettings({ noiseSuppression: !voiceSettings?.noiseSuppression })}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\tNoise Suppression\n\t\t\t\t\t\t</label>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<div class=\"setting-group\">\n\t\t\t\t\t\t<label class=\"setting-label\">\n\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\ttype=\"checkbox\"\n\t\t\t\t\t\t\t\tchecked={voiceSettings?.pushToTalk}\n\t\t\t\t\t\t\t\ton:change={() => voiceClient.updateSettings({ pushToTalk: !voiceSettings?.pushToTalk })}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\tPush to Talk\n\t\t\t\t\t\t</label>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t{#if voiceSettings?.pushToTalk}\n\t\t\t\t\t\t<div class=\"setting-group\">\n\t\t\t\t\t\t\t<label class=\"setting-label\">\n\t\t\t\t\t\t\t\tPush to Talk Key\n\t\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\t\t\tvalue={voiceSettings?.pushToTalkKey}\n\t\t\t\t\t\t\t\t\treadonly\n\t\t\t\t\t\t\t\t\tclass=\"key-input\"\n\t\t\t\t\t\t\t\t\tplaceholder=\"Press a key...\"\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t{/if}\n\n\t\t\t\t\t<div class=\"setting-group\">\n\t\t\t\t\t\t<label class=\"setting-label\">\n\t\t\t\t\t\t\tInput Volume\n\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\ttype=\"range\"\n\t\t\t\t\t\t\t\tmin=\"0\"\n\t\t\t\t\t\t\t\tmax=\"100\"\n\t\t\t\t\t\t\t\tvalue={voiceSettings?.inputVolume}\n\t\t\t\t\t\t\t\ton:input={(e) => voiceClient.updateSettings({ inputVolume: parseInt((e.target as HTMLInputElement).value) })}\n\t\t\t\t\t\t\t\tclass=\"volume-slider\"\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t<span class=\"volume-value\">{voiceSettings?.inputVolume}%</span>\n\t\t\t\t\t\t</label>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<div class=\"setting-group\">\n\t\t\t\t\t\t<label class=\"setting-label\">\n\t\t\t\t\t\t\tOutput Volume\n\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\ttype=\"range\"\n\t\t\t\t\t\t\t\tmin=\"0\"\n\t\t\t\t\t\t\t\tmax=\"100\"\n\t\t\t\t\t\t\t\tvalue={voiceSettings?.outputVolume}\n\t\t\t\t\t\t\t\ton:input={(e) => voiceClient.updateSettings({ outputVolume: parseInt((e.target as HTMLInputElement).value) })}\n\t\t\t\t\t\t\t\tclass=\"volume-slider\"\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t<span class=\"volume-value\">{voiceSettings?.outputVolume}%</span>\n\t\t\t\t\t\t</label>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t{/if}\n\t\t{/if}\n\t{/if}\n\n\t<!-- Disconnect Confirmation Modal -->\n\t{#if showDisconnectConfirm}\n\t\t<div class=\"modal-overlay\" on:click={cancelDisconnect}>\n\t\t\t<div class=\"modal-content\" on:click|stopPropagation>\n\t\t\t\t<div class=\"modal-header\">\n\t\t\t\t\t<h3>Leave Voice Channel</h3>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"modal-body\">\n\t\t\t\t\t<p>Are you sure you want to leave the voice channel?</p>\n\t\t\t\t\t<p class=\"modal-subtitle\">You will be disconnected from all voice participants.</p>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"modal-footer\">\n\t\t\t\t\t<button class=\"btn btn-secondary\" on:click={cancelDisconnect}>\n\t\t\t\t\t\tCancel\n\t\t\t\t\t</button>\n\t\t\t\t\t<button class=\"btn btn-danger\" on:click={disconnectVoice}>\n\t\t\t\t\t\tLeave Channel\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t{/if}\n\n\t<!-- Success Message -->\n\t{#if showSuccessMessage}\n\t\t<div class=\"success-message\">\n\t\t\t<span class=\"success-icon\">✅</span>\n\t\t\t<span class=\"success-text\">Successfully left voice channel</span>\n\t\t</div>\n\t{/if}\n</div>\n\n<style>\n\t.voice-controls {\n\t\tbackground-color: var(--surface-color, #2d2d2d);\n\t\tborder: 1px solid var(--border-color, #404040);\n\t\tborder-radius: 0.5rem;\n\t\tpadding: 1rem;\n\t\tmargin: 1rem;\n\t}\n\n\t.voice-controls.connected {\n\t\tborder-color: var(--accent-color, #3b82f6);\n\t\tbackground-color: rgba(59, 130, 246, 0.05);\n\t}\n\n\t.voice-header {\n\t\tdisplay: flex;\n\t\talign-items: center;\n\t\tjustify-content: space-between;\n\t\tmargin-bottom: 1rem;\n\t}\n\n\t.channel-info {\n\t\tdisplay: flex;\n\t\talign-items: center;\n\t\tgap: 0.5rem;\n\t}\n\n\t.voice-icon {\n\t\tfont-size: 1.25rem;\n\t}\n\n\t.channel-name {\n\t\tfont-weight: 600;\n\t\tcolor: var(--text-primary, #ffffff);\n\t}\n\n\t.connection-status {\n\t\tfont-size: 0.875rem;\n\t\tcolor: var(--text-muted, #6b7280);\n\t\tpadding: 0.25rem 0.5rem;\n\t\tborder-radius: 0.25rem;\n\t\tbackground-color: var(--surface-color, #2d2d2d);\n\t}\n\n\t.connection-status.connected {\n\t\tcolor: #10b981;\n\t\tbackground-color: rgba(16, 185, 129, 0.1);\n\t}\n\n\t.voice-actions {\n\t\tdisplay: flex;\n\t\tgap: 0.5rem;\n\t}\n\n\t.voice-btn {\n\t\tpadding: 0.5rem 1rem;\n\t\tbackground-color: var(--accent-color, #3b82f6);\n\t\tcolor: white;\n\t\tborder: none;\n\t\tborder-radius: 0.375rem;\n\t\tcursor: pointer;\n\t\tfont-weight: 500;\n\t\ttransition: all 0.2s;\n\t}\n\n\t.voice-btn:hover {\n\t\tbackground-color: var(--accent-hover, #2563eb);\n\t}\n\n\t.voice-btn:disabled {\n\t\topacity: 0.5;\n\t\tcursor: not-allowed;\n\t}\n\n\t.join-btn.connected {\n\t\tbackground-color: #ef4444;\n\t}\n\n\t.join-btn.connected:hover {\n\t\tbackground-color: #dc2626;\n\t}\n\n\t.participants-btn {\n\t\tbackground-color: var(--surface-color, #2d2d2d);\n\t\tcolor: var(--text-primary, #ffffff);\n\t\tborder: 1px solid var(--border-color, #404040);\n\t}\n\n\t.voice-status {\n\t\tdisplay: flex;\n\t\tflex-direction: column;\n\t\tgap: 1rem;\n\t}\n\n\t.local-controls {\n\t\tdisplay: flex;\n\t\tgap: 0.5rem;\n\t\talign-items: center;\n\t}\n\n\t.control-btn {\n\t\tpadding: 0.75rem;\n\t\tbackground-color: var(--surface-color, #2d2d2d);\n\t\tborder: 1px solid var(--border-color, #404040);\n\t\tborder-radius: 0.5rem;\n\t\tcursor: pointer;\n\t\tfont-size: 1.25rem;\n\t\ttransition: all 0.2s;\n\t\tcolor: var(--text-primary, #ffffff);\n\t}\n\n\t.control-btn:hover {\n\t\tbackground-color: var(--accent-color, #3b82f6);\n\t}\n\n\t.control-btn.active {\n\t\tbackground-color: #ef4444;\n\t\tborder-color: #ef4444;\n\t}\n\n\t.voice-error {\n\t\tdisplay: flex;\n\t\talign-items: center;\n\t\tgap: 0.5rem;\n\t\tpadding: 0.75rem;\n\t\tbackground-color: rgba(239, 68, 68, 0.1);\n\t\tborder: 1px solid #ef4444;\n\t\tborder-radius: 0.375rem;\n\t}\n\n\t.error-icon {\n\t\tfont-size: 1.25rem;\n\t}\n\n\t.error-text {\n\t\tcolor: #ef4444;\n\t\tfont-weight: 500;\n\t}\n\n\t.participants-panel, .settings-panel {\n\t\tbackground-color: var(--input-bg, #1a1a1a);\n\t\tborder: 1px solid var(--border-color, #404040);\n\t\tborder-radius: 0.5rem;\n\t\tpadding: 1rem;\n\t\tmargin-top: 1rem;\n\t}\n\n\t.participants-title, .settings-title {\n\t\tmargin: 0 0 1rem 0;\n\t\tfont-size: 1rem;\n\t\tfont-weight: 600;\n\t\tcolor: var(--text-primary, #ffffff);\n\t}\n\n\t.participants-list {\n\t\tdisplay: flex;\n\t\tflex-direction: column;\n\t\tgap: 0.75rem;\n\t}\n\n\t.participant {\n\t\tdisplay: flex;\n\t\talign-items: center;\n\t\tjustify-content: space-between;\n\t\tpadding: 0.5rem;\n\t\tbackground-color: var(--surface-color, #2d2d2d);\n\t\tborder-radius: 0.375rem;\n\t}\n\n\t.participant-info {\n\t\tdisplay: flex;\n\t\tflex-direction: column;\n\t\tgap: 0.25rem;\n\t}\n\n\t.participant-name {\n\t\tfont-weight: 500;\n\t\tcolor: var(--text-primary, #ffffff);\n\t}\n\n\t.participant-status {\n\t\tdisplay: flex;\n\t\tgap: 0.25rem;\n\t}\n\n\t.speaking-indicator {\n\t\tcolor: #10b981;\n\t}\n\n\t.muted-indicator, .deafened-indicator {\n\t\tcolor: #ef4444;\n\t}\n\n\t.participant-controls {\n\t\tdisplay: flex;\n\t\talign-items: center;\n\t\tgap: 0.5rem;\n\t}\n\n\t.volume-control {\n\t\tdisplay: flex;\n\t\talign-items: center;\n\t\tgap: 0.25rem;\n\t}\n\n\t.setting-group {\n\t\tmargin-bottom: 1rem;\n\t}\n\n\t.setting-label {\n\t\tdisplay: flex;\n\t\talign-items: center;\n\t\tgap: 0.5rem;\n\t\tcolor: var(--text-primary, #ffffff);\n\t\tfont-weight: 500;\n\t}\n\n\t.setting-label input[type=\"checkbox\"] {\n\t\tmargin: 0;\n\t}\n\n\t.volume-slider {\n\t\twidth: 100px;\n\t\tmargin: 0 0.5rem;\n\t}\n\n\t.volume-value {\n\t\tfont-size: 0.875rem;\n\t\tcolor: var(--text-muted, #6b7280);\n\t\tmin-width: 3rem;\n\t}\n\n\t.key-input {\n\t\tbackground-color: var(--surface-color, #2d2d2d);\n\t\tborder: 1px solid var(--border-color, #404040);\n\t\tborder-radius: 0.25rem;\n\t\tpadding: 0.25rem 0.5rem;\n\t\tcolor: var(--text-primary, #ffffff);\n\t\tmargin-left: 0.5rem;\n\t}\n\n\t.connection-quality {\n\t\tfont-size: 1rem;\n\t}\n\n\t/* Responsive design */\n\t@media (max-width: 768px) {\n\t\t.voice-header {\n\t\t\tflex-direction: column;\n\t\t\tgap: 0.75rem;\n\t\t\talign-items: stretch;\n\t\t}\n\n\t\t.voice-actions {\n\t\t\tjustify-content: center;\n\t\t}\n\n\t\t.local-controls {\n\t\t\tjustify-content: center;\n\t\t}\n\n\t\t.participant {\n\t\t\tflex-direction: column;\n\t\t\tgap: 0.5rem;\n\t\t\ttext-align: center;\n\t\t}\n\t}\n\n\t/* Modal Styles */\n\t.modal-overlay {\n\t\tposition: fixed;\n\t\ttop: 0;\n\t\tleft: 0;\n\t\tright: 0;\n\t\tbottom: 0;\n\t\tbackground-color: rgba(0, 0, 0, 0.5);\n\t\tdisplay: flex;\n\t\talign-items: center;\n\t\tjustify-content: center;\n\t\tz-index: 1000;\n\t}\n\n\t.modal-content {\n\t\tbackground-color: var(--surface-color, #2d2d2d);\n\t\tborder: 1px solid var(--border-color, #404040);\n\t\tborder-radius: 0.5rem;\n\t\tpadding: 1.5rem;\n\t\tmax-width: 400px;\n\t\twidth: 90%;\n\t\tbox-shadow: 0 10px 25px rgba(0, 0, 0, 0.3);\n\t}\n\n\t.modal-header {\n\t\tmargin-bottom: 1rem;\n\t}\n\n\t.modal-header h3 {\n\t\tmargin: 0;\n\t\tcolor: var(--text-primary, #ffffff);\n\t\tfont-size: 1.25rem;\n\t\tfont-weight: 600;\n\t}\n\n\t.modal-body {\n\t\tmargin-bottom: 1.5rem;\n\t}\n\n\t.modal-body p {\n\t\tmargin: 0 0 0.5rem 0;\n\t\tcolor: var(--text-primary, #ffffff);\n\t}\n\n\t.modal-subtitle {\n\t\tfont-size: 0.875rem;\n\t\tcolor: var(--text-muted, #6b7280) !important;\n\t}\n\n\t.modal-footer {\n\t\tdisplay: flex;\n\t\tgap: 0.75rem;\n\t\tjustify-content: flex-end;\n\t}\n\n\t.btn {\n\t\tpadding: 0.5rem 1rem;\n\t\tborder: none;\n\t\tborder-radius: 0.25rem;\n\t\tfont-weight: 500;\n\t\tcursor: pointer;\n\t\ttransition: background-color 0.2s;\n\t}\n\n\t.btn-secondary {\n\t\tbackground-color: var(--surface-color, #404040);\n\t\tcolor: var(--text-primary, #ffffff);\n\t}\n\n\t.btn-secondary:hover {\n\t\tbackground-color: var(--border-color, #505050);\n\t}\n\n\t.btn-danger {\n\t\tbackground-color: #ef4444;\n\t\tcolor: white;\n\t}\n\n\t.btn-danger:hover {\n\t\tbackground-color: #dc2626;\n\t}\n\n\t/* Success Message */\n\t.success-message {\n\t\tposition: fixed;\n\t\ttop: 1rem;\n\t\tright: 1rem;\n\t\tbackground-color: #10b981;\n\t\tcolor: white;\n\t\tpadding: 0.75rem 1rem;\n\t\tborder-radius: 0.5rem;\n\t\tdisplay: flex;\n\t\talign-items: center;\n\t\tgap: 0.5rem;\n\t\tbox-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);\n\t\tz-index: 1001;\n\t\tanimation: slideIn 0.3s ease-out;\n\t}\n\n\t.success-icon {\n\t\tfont-size: 1.125rem;\n\t}\n\n\t.success-text {\n\t\tfont-weight: 500;\n\t}\n\n\t@keyframes slideIn {\n\t\tfrom {\n\t\t\ttransform: translateX(100%);\n\t\t\topacity: 0;\n\t\t}\n\t\tto {\n\t\t\ttransform: translateX(0);\n\t\t\topacity: 1;\n\t\t}\n\t}\n</style>\n","usedDeprecatedRules":[]},{"filePath":"/Users/bennerrr/Feathur/client/web/src/lib/components/ui/ErrorBoundary.svelte","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":8,"column":4,"nodeType":"MemberExpression","messageId":"unexpected","endLine":8,"endColumn":17,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[159,215],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":13,"column":4,"nodeType":"MemberExpression","messageId":"unexpected","endLine":13,"endColumn":17,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[313,373],"text":""},"desc":"Remove the console.error()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"<script lang=\"ts\">\n\timport { onMount } from 'svelte';\n\t\n\tlet error: Error | null = null;\n\t\n\tonMount(() => {\n\t\twindow.addEventListener('error', (event) => {\n\t\t\tconsole.error('Error caught by boundary:', event.error);\n\t\t\terror = event.error;\n\t\t});\n\t\t\n\t\twindow.addEventListener('unhandledrejection', (event) => {\n\t\t\tconsole.error('Unhandled promise rejection:', event.reason);\n\t\t\terror = new Error(event.reason);\n\t\t});\n\t});\n\t\n\tfunction reset() {\n\t\terror = null;\n\t\twindow.location.reload();\n\t}\n</script>\n\n{#if error}\n\t<div class=\"error-boundary\">\n\t\t<div class=\"error-content\">\n\t\t\t<h2>Something went wrong</h2>\n\t\t\t<p>An unexpected error occurred. Please try refreshing the page.</p>\n\t\t\t<button class=\"btn btn-primary\" on:click={reset}>\n\t\t\t\t🔄 Refresh Page\n\t\t\t</button>\n\t\t</div>\n\t</div>\n{:else}\n\t<slot />\n{/if}\n\n<style>\n\t.error-boundary {\n\t\tdisplay: flex;\n\t\talign-items: center;\n\t\tjustify-content: center;\n\t\tmin-height: 100vh;\n\t\tpadding: 2rem;\n\t\tbackground: var(--color-bg);\n\t}\n\t\n\t.error-content {\n\t\ttext-align: center;\n\t\tmax-width: 400px;\n\t}\n\t\n\t.error-content h2 {\n\t\tcolor: var(--color-error);\n\t\tmargin-bottom: 1rem;\n\t}\n\t\n\t.error-content p {\n\t\tcolor: var(--color-text-muted);\n\t\tmargin-bottom: 2rem;\n\t}\n</style> ","usedDeprecatedRules":[]},{"filePath":"/Users/bennerrr/Feathur/client/web/src/lib/components/ui/Input.svelte","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/bennerrr/Feathur/client/web/src/lib/components/ui/LoadingSpinner.svelte","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/bennerrr/Feathur/client/web/src/lib/components/ui/Message.svelte","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/bennerrr/Feathur/client/web/src/lib/components/ui/MessageInput.svelte","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/bennerrr/Feathur/client/web/src/lib/components/ui/Modal.svelte","messages":[{"ruleId":"svelte/valid-compile","severity":1,"message":"Component has unused export property 'show'. If it is for external reference only, please consider using `export const show`\nhttps://svelte.dev/e/export_let_unused(export_let_unused)","line":5,"column":13,"nodeType":null,"endLine":5,"endColumn":17},{"ruleId":"svelte/valid-compile","severity":1,"message":"Visible, non-interactive elements with a click event must be accompanied by a keyboard event handler. Consider whether an interactive element such as `<button type=\"button\">` or `<a>` might be more appropriate\nhttps://svelte.dev/e/a11y_click_events_have_key_events(a11y_click_events_have_key_events)","line":38,"column":1,"nodeType":null,"endLine":45,"endColumn":7},{"ruleId":"svelte/valid-compile","severity":1,"message":"`<div>` with a click handler must have an ARIA role\nhttps://svelte.dev/e/a11y_no_static_element_interactions(a11y_no_static_element_interactions)","line":38,"column":1,"nodeType":null,"endLine":45,"endColumn":7}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"<script lang=\"ts\">\n\timport { createEventDispatcher, onMount } from 'svelte';\n\timport { X } from 'lucide-svelte';\n\n\texport let show = true;\n\n\tconst dispatch = createEventDispatcher<{\n\t\tclose: void;\n\t}>();\n\n\tlet modalElement: HTMLElement;\n\n\tonMount(() => {\n\t\t// Close modal on escape key\n\t\tfunction handleKeydown(event: KeyboardEvent) {\n\t\t\tif (event.key === 'Escape') {\n\t\t\t\thandleClose();\n\t\t\t}\n\t\t}\n\n\t\tdocument.addEventListener('keydown', handleKeydown);\n\t\treturn () => {\n\t\t\tdocument.removeEventListener('keydown', handleKeydown);\n\t\t};\n\t});\n\n\tfunction handleClose() {\n\t\tdispatch('close');\n\t}\n\n\tfunction handleBackdropClick(event: MouseEvent) {\n\t\tif (event.target === event.currentTarget) {\n\t\t\thandleClose();\n\t\t}\n\t}\n</script>\n\n<div class=\"modal-backdrop\" on:click={handleBackdropClick}>\n\t<div class=\"modal-container\" bind:this={modalElement}>\n\t\t<button class=\"close-btn\" on:click={handleClose}>\n\t\t\t<X size={20} />\n\t\t</button>\n\t\t<slot />\n\t</div>\n</div>\n\n<style>\n\t.modal-backdrop {\n\t\tposition: fixed;\n\t\ttop: 0;\n\t\tleft: 0;\n\t\twidth: 100vw;\n\t\theight: 100vh;\n\t\tbackground: rgba(0, 0, 0, 0.5);\n\t\tbackdrop-filter: blur(4px);\n\t\tdisplay: flex;\n\t\talign-items: center;\n\t\tjustify-content: center;\n\t\tz-index: 1000;\n\t\tanimation: fadeIn 0.2s ease;\n\t}\n\n\t.modal-container {\n\t\tbackground: var(--color-bg-alt);\n\t\tborder: 1px solid var(--color-glass-border);\n\t\tborder-radius: 12px;\n\t\tposition: relative;\n\t\tmax-width: 90vw;\n\t\tmax-height: 90vh;\n\t\toverflow: auto;\n\t\tanimation: slideIn 0.2s ease;\n\t}\n\n\t.close-btn {\n\t\tposition: absolute;\n\t\ttop: 12px;\n\t\tright: 12px;\n\t\tbackground: transparent;\n\t\tborder: none;\n\t\tcolor: var(--color-text);\n\t\topacity: 0.7;\n\t\tcursor: pointer;\n\t\tpadding: 4px;\n\t\tborder-radius: 4px;\n\t\ttransition: all 0.2s ease;\n\t\tz-index: 1;\n\t}\n\n\t.close-btn:hover {\n\t\topacity: 1;\n\t\tbackground: var(--color-glass);\n\t}\n\n\t@keyframes fadeIn {\n\t\tfrom {\n\t\t\topacity: 0;\n\t\t}\n\t\tto {\n\t\t\topacity: 1;\n\t\t}\n\t}\n\n\t@keyframes slideIn {\n\t\tfrom {\n\t\t\ttransform: scale(0.95) translateY(-10px);\n\t\t\topacity: 0;\n\t\t}\n\t\tto {\n\t\t\ttransform: scale(1) translateY(0);\n\t\t\topacity: 1;\n\t\t}\n\t}\n\n\t/* Scrollbar styling */\n\t.modal-container::-webkit-scrollbar {\n\t\twidth: 6px;\n\t}\n\n\t.modal-container::-webkit-scrollbar-track {\n\t\tbackground: transparent;\n\t}\n\n\t.modal-container::-webkit-scrollbar-thumb {\n\t\tbackground: var(--color-glass-border);\n\t\tborder-radius: 3px;\n\t}\n\n\t.modal-container::-webkit-scrollbar-thumb:hover {\n\t\tbackground: var(--color-accent);\n\t}\n</style> ","usedDeprecatedRules":[]},{"filePath":"/Users/bennerrr/Feathur/client/web/src/lib/components/ui/QuickSwitcher.svelte","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":31,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":31,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1039,1042],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1039,1042],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"<script lang=\"ts\">\n  import { createEventDispatcher, onMount, onDestroy } from 'svelte';\n  export let servers: Array<{id: number; name: string}> = [];\n  export let channels: Array<{id: number; name: string; serverId: number}> = [];\n  export let open = false;\n\n  const dispatch = createEventDispatcher();\n  let query = '';\n  let inputEl: HTMLInputElement;\n\n  $: items = [\n    ...(Array.isArray(servers) ? servers.map(s => ({type: 'server', id: s.id, name: s.name})) : []),\n    ...(Array.isArray(channels) ? channels.map(c => ({type: 'channel', id: c.id, name: c.name, serverId: c.serverId})) : [])\n  ];\n  $: filtered = items.filter(i => i.name.toLowerCase().includes(query.toLowerCase()));\n\n  function handleKeydown(e: KeyboardEvent) {\n    if (e.key === 'Escape') {\n      dispatch('close');\n    }\n  }\n\n  onMount(() => {\n    document.addEventListener('keydown', handleKeydown);\n    if (open && inputEl) inputEl.focus();\n  });\n  onDestroy(() => {\n    document.removeEventListener('keydown', handleKeydown);\n  });\n\n  function selectItem(item: any) {\n    dispatch('select', item);\n  }\n</script>\n\n{#if open}\n  <div class=\"qs-backdrop\">\n    <div class=\"qs-modal\" role=\"dialog\" aria-modal=\"true\" aria-label=\"Quick switcher\">\n      <input class=\"qs-input\" placeholder=\"Search...\" bind:this={inputEl} bind:value={query} />\n      <ul class=\"qs-results\">\n        {#each filtered as item}\n          <li><button on:click={() => selectItem(item)}>{item.name}</button></li>\n        {/each}\n      </ul>\n      {#if filtered.length === 0}\n        <p class=\"qs-empty\">No results</p>\n      {/if}\n    </div>\n  </div>\n{/if}\n\n<style>\n  .qs-backdrop {\n    position: fixed;\n    inset: 0;\n    background: rgba(0,0,0,0.6);\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    z-index: 1100;\n  }\n  .qs-modal {\n    background: var(--color-surface, #111);\n    border: 1px solid var(--color-border, #333);\n    border-radius: var(--radius-md, 6px);\n    padding: 1rem;\n    width: 300px;\n  }\n  .qs-input {\n    width: 100%;\n    padding: 0.5rem;\n    margin-bottom: 0.5rem;\n  }\n  .qs-results {\n    list-style: none;\n    margin: 0;\n    padding: 0;\n    max-height: 200px;\n    overflow-y: auto;\n  }\n  .qs-results li button {\n    width: 100%;\n    text-align: left;\n    padding: 0.25rem 0.5rem;\n    background: transparent;\n    border: none;\n    color: var(--color-text, #fff);\n    cursor: pointer;\n  }\n  .qs-results li button:hover {\n    background: var(--color-accent, #2563eb);\n  }\n  .qs-empty {\n    text-align: center;\n    color: var(--color-text-muted, #888);\n  }\n</style>\n","usedDeprecatedRules":[]},{"filePath":"/Users/bennerrr/Feathur/client/web/src/lib/components/ui/ReactionPicker.svelte","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/bennerrr/Feathur/client/web/src/lib/components/ui/ServerHeader.svelte","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/bennerrr/Feathur/client/web/src/lib/components/ui/ServerList.svelte","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'UserAvatar' is defined but never used. Allowed unused vars must match /^_/u.","line":5,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":19},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":9,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":9,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[327,330],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[327,330],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"svelte/valid-compile","severity":1,"message":"Visible, non-interactive elements with a click event must be accompanied by a keyboard event handler. Consider whether an interactive element such as `<button type=\"button\">` or `<a>` might be more appropriate\nhttps://svelte.dev/e/a11y_click_events_have_key_events(a11y_click_events_have_key_events)","line":49,"column":4,"nodeType":null,"endLine":62,"endColumn":10},{"ruleId":"svelte/valid-compile","severity":1,"message":"`<div>` with a click handler must have an ARIA role\nhttps://svelte.dev/e/a11y_no_static_element_interactions(a11y_no_static_element_interactions)","line":49,"column":4,"nodeType":null,"endLine":62,"endColumn":10}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"<script lang=\"ts\">\n\timport { createEventDispatcher } from 'svelte';\n\timport { Plus, Settings, Crown } from 'lucide-svelte';\n\timport type { Server } from '$lib/types';\n\timport UserAvatar from './UserAvatar.svelte';\n\n\texport let servers: Server[] = [];\n\texport let currentServerId: number | null = null;\n\texport let currentUser: any = null;\n\n\n\n\tconst dispatch = createEventDispatcher<{\n\t\tselectServer: Server;\n\t\tcreateServer: void;\n\t\topenSettings: void;\n\t}>();\n\n\tfunction handleServerClick(server: Server) {\n\t\tdispatch('selectServer', server);\n\t}\n\n\tfunction handleCreateServer() {\n\t\tdispatch('createServer');\n\t}\n\n\tfunction handleOpenSettings() {\n\t\tdispatch('openSettings');\n\t}\n</script>\n\n<div class=\"server-list\">\n\t<!-- Home/User section -->\n\t<div class=\"server-section\">\n\t\t<div class=\"server-item home-item\" class:active={currentServerId === null}>\n\t\t\t<div class=\"server-icon home-icon\">\n\t\t\t\t<Crown size={20} />\n\t\t\t</div>\n\t\t\t<div class=\"server-tooltip\">Home</div>\n\t\t</div>\n\t</div>\n\n\t<!-- Separator -->\n\t<div class=\"separator\"></div>\n\n\t<!-- Servers -->\n\t<div class=\"server-section\">\n\t\t{#each servers as server (server.id)}\n\t\t\t<div \n\t\t\t\tclass=\"server-item\" \n\t\t\t\tclass:active={currentServerId === server.id}\n\t\t\t\ton:click={() => handleServerClick(server)}\n\t\t\t>\n\t\t\t\t<div class=\"server-icon\">\n\t\t\t\t\t{#if server.icon}\n\t\t\t\t\t\t<img src={server.icon} alt={server.name} />\n\t\t\t\t\t{:else}\n\t\t\t\t\t\t{server.name.charAt(0).toUpperCase()}\n\t\t\t\t\t{/if}\n\t\t\t\t</div>\n\t\t\t\t<div class=\"server-tooltip\">{server.name}</div>\n\t\t\t</div>\n\t\t{/each}\n\t</div>\n\n\t<!-- Separator -->\n\t<div class=\"separator\"></div>\n\n\t<!-- Actions -->\n\t<div class=\"server-section\">\n\t\t<button class=\"server-item action-item\" on:click={handleCreateServer}>\n\t\t\t<div class=\"server-icon\">\n\t\t\t\t<Plus size={20} />\n\t\t\t</div>\n\t\t\t<div class=\"server-tooltip\">Create Server</div>\n\t\t</button>\n\n\t\t{#if currentUser?.role === 'super_admin' || currentUser?.role === 'admin'}\n\t\t\t<button class=\"server-item action-item\" on:click={handleOpenSettings}>\n\t\t\t\t<div class=\"server-icon\">\n\t\t\t\t\t<Settings size={20} />\n\t\t\t\t</div>\n\t\t\t\t<div class=\"server-tooltip\">Server Settings</div>\n\t\t\t</button>\n\t\t{/if}\n\t</div>\n</div>\n\n<style>\n\t.server-list {\n\t\twidth: 72px;\n\t\tbackground: var(--color-bg-alt);\n\t\tborder-right: 1px solid var(--color-glass-border);\n\t\tdisplay: flex;\n\t\tflex-direction: column;\n\t\talign-items: center;\n\t\tpadding: 12px 0;\n\t\tgap: 8px;\n\t\theight: 100vh;\n\t\toverflow-y: auto;\n\t}\n\n\t.server-section {\n\t\tdisplay: flex;\n\t\tflex-direction: column;\n\t\talign-items: center;\n\t\tgap: 8px;\n\t\twidth: 100%;\n\t}\n\n\t.server-item {\n\t\twidth: 48px;\n\t\theight: 48px;\n\t\tborder-radius: 12px;\n\t\tbackground: var(--color-glass);\n\t\tborder: 1px solid var(--color-glass-border);\n\t\tdisplay: flex;\n\t\talign-items: center;\n\t\tjustify-content: center;\n\t\tcursor: pointer;\n\t\ttransition: all 0.2s ease;\n\t\tposition: relative;\n\t\tcolor: var(--color-text);\n\t}\n\n\t.server-item:hover {\n\t\tbackground: var(--color-accent);\n\t\tcolor: white;\n\t\tborder-radius: 16px;\n\t\ttransform: scale(1.05);\n\t}\n\n\t.server-item.active {\n\t\tbackground: var(--color-accent);\n\t\tcolor: white;\n\t\tborder-radius: 16px;\n\t}\n\n\t.server-icon {\n\t\twidth: 32px;\n\t\theight: 32px;\n\t\tborder-radius: 8px;\n\t\tdisplay: flex;\n\t\talign-items: center;\n\t\tjustify-content: center;\n\t\tfont-weight: 600;\n\t\tfont-size: 14px;\n\t\toverflow: hidden;\n\t}\n\n\t.server-icon img {\n\t\twidth: 100%;\n\t\theight: 100%;\n\t\tobject-fit: cover;\n\t}\n\n\t.home-icon {\n\t\tbackground: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n\t}\n\n\t.action-item {\n\t\tbackground: var(--color-glass);\n\t\tborder: 1px solid var(--color-glass-border);\n\t}\n\n\t.action-item:hover {\n\t\tbackground: var(--color-accent);\n\t\tcolor: white;\n\t}\n\n\t.server-tooltip {\n\t\tposition: absolute;\n\t\tleft: 60px;\n\t\tbackground: var(--color-bg-alt);\n\t\tcolor: var(--color-text);\n\t\tpadding: 8px 12px;\n\t\tborder-radius: 8px;\n\t\tfont-size: 14px;\n\t\twhite-space: nowrap;\n\t\topacity: 0;\n\t\tpointer-events: none;\n\t\ttransition: opacity 0.2s ease;\n\t\tz-index: 1000;\n\t\tbox-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);\n\t}\n\n\t.server-item:hover .server-tooltip {\n\t\topacity: 1;\n\t}\n\n\t.separator {\n\t\twidth: 32px;\n\t\theight: 2px;\n\t\tbackground: var(--color-glass-border);\n\t\tborder-radius: 1px;\n\t\tmargin: 4px 0;\n\t}\n\n\t/* Scrollbar styling */\n\t.server-list::-webkit-scrollbar {\n\t\twidth: 0px;\n\t}\n\n\t.server-list::-webkit-scrollbar-track {\n\t\tbackground: transparent;\n\t}\n\n\t.server-list::-webkit-scrollbar-thumb {\n\t\tbackground: transparent;\n\t}\n</style> ","usedDeprecatedRules":[]},{"filePath":"/Users/bennerrr/Feathur/client/web/src/lib/components/ui/UserAvatar.svelte","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/bennerrr/Feathur/client/web/src/lib/components/ui/UserList.svelte","messages":[{"ruleId":"svelte/valid-compile","severity":1,"message":"Component has unused export property 'currentUser'. If it is for external reference only, please consider using `export const currentUser`\nhttps://svelte.dev/e/export_let_unused(export_let_unused)","line":7,"column":13,"nodeType":null,"endLine":7,"endColumn":24},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":35,"column":4,"nodeType":"MemberExpression","messageId":"unexpected","endLine":35,"endColumn":17,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[842,893],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"svelte/valid-compile","severity":1,"message":"Unused CSS selector \".status-indicator\"\nhttps://svelte.dev/e/css_unused_selector(css_unused_selector)","line":190,"column":2,"nodeType":null,"endLine":190,"endColumn":19},{"ruleId":"svelte/valid-compile","severity":1,"message":"Unused CSS selector \".status-indicator.online\"\nhttps://svelte.dev/e/css_unused_selector(css_unused_selector)","line":194,"column":2,"nodeType":null,"endLine":194,"endColumn":26},{"ruleId":"svelte/valid-compile","severity":1,"message":"Unused CSS selector \".status-indicator.offline\"\nhttps://svelte.dev/e/css_unused_selector(css_unused_selector)","line":198,"column":2,"nodeType":null,"endLine":198,"endColumn":27}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"<script lang=\"ts\">\n\timport { Users, Circle } from 'lucide-svelte';\n\timport type { Server, User } from '$lib/types';\n\timport UserAvatar from './UserAvatar.svelte';\n\n\texport let server: Server | null = null;\n\texport let currentUser: User | null = null;\n\n\timport { onMount } from 'svelte';\n\timport { apiClient } from '$lib/api/client';\n\n\tlet onlineUsers: User[] = [];\n\tlet isLoading = true;\n\tlet error = '';\n\n\tonMount(async () => {\n\t\tif (server) {\n\t\t\tawait loadServerUsers();\n\t\t}\n\t});\n\n\tasync function loadServerUsers() {\n\t\tif (!server) return;\n\t\t\n\t\ttry {\n\t\t\tisLoading = true;\n\t\t\t// Load users for the current server\n\t\t\tconst users = await apiClient.getServerUsers(server.id);\n\t\t\t// Map the response to match the User interface\n\t\t\tonlineUsers = users.map(user => ({\n\t\t\t\t...user,\n\t\t\t\tisOnline: user.isOnline || false\n\t\t\t}));\n\t\t} catch (err) {\n\t\t\tconsole.error('Failed to load server users:', err);\n\t\t\terror = 'Failed to load users';\n\t\t} finally {\n\t\t\tisLoading = false;\n\t\t}\n\t}\n\n\t$: onlineCount = onlineUsers.filter(u => u.isOnline).length;\n\t$: totalCount = onlineUsers.length;\n</script>\n\n<div class=\"user-list\">\n\t<div class=\"user-list-header\">\n\t\t<div class=\"header-info\">\n\t\t\t<Users size={16} />\n\t\t\t<span>Members</span>\n\t\t</div>\n\t\t<div class=\"user-count\">\n\t\t\t{onlineCount}/{totalCount}\n\t\t</div>\n\t</div>\n\n\t<div class=\"user-sections\">\n\t\t{#if isLoading}\n\t\t\t<div class=\"loading-state\">\n\t\t\t\t<p>Loading users...</p>\n\t\t\t</div>\n\t\t{:else if error}\n\t\t\t<div class=\"error-state\">\n\t\t\t\t<p>{error}</p>\n\t\t\t\t<button on:click={loadServerUsers}>Retry</button>\n\t\t\t</div>\n\t\t{:else if onlineUsers.length === 0}\n\t\t\t<div class=\"empty-state\">\n\t\t\t\t<p>No users found</p>\n\t\t\t</div>\n\t\t{:else}\n\t\t\t<!-- Online Users -->\n\t\t\t{#if onlineUsers.filter(u => u.isOnline).length > 0}\n\t\t\t\t<div class=\"user-section\">\n\t\t\t\t\t<div class=\"section-header\">\n\t\t\t\t\t\t<Circle size={8} class=\"status-indicator online\" />\n\t\t\t\t\t\t<span>Online — {onlineCount}</span>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"user-items\">\n\t\t\t\t\t\t{#each onlineUsers.filter(u => u.isOnline) as user (user.id)}\n\t\t\t\t\t\t\t<div class=\"user-item\">\n\t\t\t\t\t\t\t\t<UserAvatar {user} size=\"sm\" />\n\t\t\t\t\t\t\t\t<span class=\"user-name\">{user.username}</span>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t{/each}\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t{/if}\n\n\t\t\t<!-- Offline Users -->\n\t\t\t{#if onlineUsers.filter(u => !u.isOnline).length > 0}\n\t\t\t\t<div class=\"user-section\">\n\t\t\t\t\t<div class=\"section-header\">\n\t\t\t\t\t\t<Circle size={8} class=\"status-indicator offline\" />\n\t\t\t\t\t\t<span>Offline — {totalCount - onlineCount}</span>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"user-items\">\n\t\t\t\t\t\t{#each onlineUsers.filter(u => !u.isOnline) as user (user.id)}\n\t\t\t\t\t\t\t<div class=\"user-item offline\">\n\t\t\t\t\t\t\t\t<UserAvatar {user} size=\"sm\" />\n\t\t\t\t\t\t\t\t<span class=\"user-name\">{user.username}</span>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t{/each}\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t{/if}\n\t\t{/if}\n\t</div>\n</div>\n\n<style>\n\t.user-list {\n\t\twidth: 240px;\n\t\tbackground: var(--color-bg-alt);\n\t\tborder-left: 1px solid var(--color-glass-border);\n\t\tdisplay: flex;\n\t\tflex-direction: column;\n\t\theight: 100vh;\n\t}\n\n\t.user-list-header {\n\t\tpadding: 16px;\n\t\tborder-bottom: 1px solid var(--color-glass-border);\n\t\tdisplay: flex;\n\t\talign-items: center;\n\t\tjustify-content: space-between;\n\t}\n\n\t.header-info {\n\t\tdisplay: flex;\n\t\talign-items: center;\n\t\tgap: 8px;\n\t\tcolor: var(--color-text);\n\t\tfont-weight: 600;\n\t\tfont-size: 14px;\n\t}\n\n\t.user-count {\n\t\tfont-size: 12px;\n\t\tcolor: var(--color-text);\n\t\topacity: 0.7;\n\t}\n\n\t.loading-state,\n\t.error-state,\n\t.empty-state {\n\t\tpadding: 1rem;\n\t\ttext-align: center;\n\t\tcolor: var(--color-text-muted);\n\t}\n\n\t.error-state button {\n\t\tbackground: var(--color-accent);\n\t\tcolor: white;\n\t\tborder: none;\n\t\tpadding: 0.5rem 1rem;\n\t\tborder-radius: var(--radius-sm);\n\t\tcursor: pointer;\n\t\tmargin-top: 0.5rem;\n\t\tfont-size: var(--font-size-sm);\n\t}\n\n\t.error-state button:hover {\n\t\tbackground: var(--color-accent-hover);\n\t}\n\n\t.user-sections {\n\t\tflex: 1;\n\t\toverflow-y: auto;\n\t\tpadding: 8px 0;\n\t}\n\n\t.user-section {\n\t\tmargin-bottom: 16px;\n\t}\n\n\t.section-header {\n\t\tdisplay: flex;\n\t\talign-items: center;\n\t\tgap: 8px;\n\t\tpadding: 8px 16px;\n\t\tfont-size: 12px;\n\t\tfont-weight: 600;\n\t\tcolor: var(--color-text);\n\t\topacity: 0.7;\n\t\ttext-transform: uppercase;\n\t\tletter-spacing: 0.5px;\n\t}\n\n\t.status-indicator {\n\t\tflex-shrink: 0;\n\t}\n\n\t.status-indicator.online {\n\t\tcolor: #10b981;\n\t}\n\n\t.status-indicator.offline {\n\t\tcolor: #6b7280;\n\t}\n\n\t.user-items {\n\t\tdisplay: flex;\n\t\tflex-direction: column;\n\t}\n\n\t.user-item {\n\t\tdisplay: flex;\n\t\talign-items: center;\n\t\tgap: 8px;\n\t\tpadding: 6px 16px;\n\t\tcursor: pointer;\n\t\tborder-radius: 4px;\n\t\tmargin: 0 8px;\n\t\ttransition: background 0.2s ease;\n\t}\n\n\t.user-item:hover {\n\t\tbackground: var(--color-glass);\n\t}\n\n\t.user-item.offline {\n\t\topacity: 0.6;\n\t}\n\n\t.user-name {\n\t\tfont-size: 14px;\n\t\tcolor: var(--color-text);\n\t\twhite-space: nowrap;\n\t\toverflow: hidden;\n\t\ttext-overflow: ellipsis;\n\t}\n\n\t/* Scrollbar styling */\n\t.user-sections::-webkit-scrollbar {\n\t\twidth: 4px;\n\t}\n\n\t.user-sections::-webkit-scrollbar-track {\n\t\tbackground: transparent;\n\t}\n\n\t.user-sections::-webkit-scrollbar-thumb {\n\t\tbackground: var(--color-glass-border);\n\t\tborder-radius: 2px;\n\t}\n\n\t.user-sections::-webkit-scrollbar-thumb:hover {\n\t\tbackground: var(--color-accent);\n\t}\n</style> ","usedDeprecatedRules":[]},{"filePath":"/Users/bennerrr/Feathur/client/web/src/lib/components/ui/VoiceControls.svelte","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'apiClient' is defined but never used. Allowed unused vars must match /^_/u.","line":5,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":20},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":59,"column":4,"nodeType":"MemberExpression","messageId":"unexpected","endLine":59,"endColumn":17,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[1660,1712],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":93,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":93,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2415,2418],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2415,2418],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":94,"column":4,"nodeType":"MemberExpression","messageId":"unexpected","endLine":94,"endColumn":17,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[2425,2472],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":103,"column":4,"nodeType":"MemberExpression","messageId":"unexpected","endLine":103,"endColumn":15,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2631,2682],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":105,"column":4,"nodeType":"MemberExpression","messageId":"unexpected","endLine":105,"endColumn":15,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2723,2783],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":107,"column":4,"nodeType":"MemberExpression","messageId":"unexpected","endLine":107,"endColumn":17,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[2805,2855],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":112,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":112,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[2979,3034],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":153,"column":58,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":153,"endColumn":61,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4060,4063],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4060,4063],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"svelte/valid-compile","severity":1,"message":"Visible, non-interactive elements with a click event must be accompanied by a keyboard event handler. Consider whether an interactive element such as `<button type=\"button\">` or `<a>` might be more appropriate\nhttps://svelte.dev/e/a11y_click_events_have_key_events(a11y_click_events_have_key_events)","line":266,"column":3,"nodeType":null,"endLine":406,"endColumn":9},{"ruleId":"svelte/valid-compile","severity":1,"message":"`<div>` with a click handler must have an ARIA role\nhttps://svelte.dev/e/a11y_no_static_element_interactions(a11y_no_static_element_interactions)","line":266,"column":3,"nodeType":null,"endLine":406,"endColumn":9},{"ruleId":"svelte/valid-compile","severity":1,"message":"Visible, non-interactive elements with a click event must be accompanied by a keyboard event handler. Consider whether an interactive element such as `<button type=\"button\">` or `<a>` might be more appropriate\nhttps://svelte.dev/e/a11y_click_events_have_key_events(a11y_click_events_have_key_events)","line":267,"column":4,"nodeType":null,"endLine":405,"endColumn":10},{"ruleId":"svelte/valid-compile","severity":1,"message":"`<div>` with a click handler must have an ARIA role\nhttps://svelte.dev/e/a11y_no_static_element_interactions(a11y_no_static_element_interactions)","line":267,"column":4,"nodeType":null,"endLine":405,"endColumn":10}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"<script lang=\"ts\">\n\timport { onMount, onDestroy } from 'svelte';\n\timport { Mic, MicOff, Headphones, Settings, Volume2, VolumeX } from 'lucide-svelte';\n\timport { voiceClient, type VoiceState, type VoiceSettings } from '$lib/webrtc/voice';\n\timport { apiClient } from '$lib/api/client';\n\timport { authStore } from '$lib/stores/auth';\n\n\texport let channelId: number | null = null;\n\texport let serverId: number | null = null;\n\n\tlet voiceState: VoiceState;\n\tlet voiceSettings: VoiceSettings;\n\tlet isConnecting = false;\n\tlet error = '';\n\tlet showSettings = false;\n\tlet audioDevices: MediaDeviceInfo[] = [];\n\tlet isPushToTalkActive = false;\n\n\t// Subscribe to voice state and settings\n\tonMount(() => {\n\t\tconst unsubscribeState = voiceClient.stateStore.subscribe(state => {\n\t\t\tvoiceState = state;\n\t\t});\n\n\t\tconst unsubscribeSettings = voiceClient.settingsStore.subscribe(settings => {\n\t\t\tvoiceSettings = settings;\n\t\t});\n\n\t\t// Set up push-to-talk keyboard listener\n\t\tif (typeof window !== 'undefined') {\n\t\t\twindow.addEventListener('keydown', handleKeyDown);\n\t\t\twindow.addEventListener('keyup', handleKeyUp);\n\t\t}\n\n\t\t// Load audio devices\n\t\tloadAudioDevices();\n\n\t\treturn () => {\n\t\t\tunsubscribeState();\n\t\t\tunsubscribeSettings();\n\t\t\tif (typeof window !== 'undefined') {\n\t\t\t\twindow.removeEventListener('keydown', handleKeyDown);\n\t\t\t\twindow.removeEventListener('keyup', handleKeyUp);\n\t\t\t}\n\t\t};\n\t});\n\n\tonDestroy(() => {\n\t\t// Clean up voice connection when component is destroyed\n\t\tif (voiceState?.currentChannelId) {\n\t\t\tvoiceClient.leaveChannel();\n\t\t}\n\t});\n\n\tasync function loadAudioDevices() {\n\t\ttry {\n\t\t\taudioDevices = await voiceClient.getAudioDevices();\n\t\t} catch (err) {\n\t\t\tconsole.error('Failed to load audio devices:', err);\n\t\t}\n\t}\n\n\tasync function connectVoice() {\n\t\tif (!channelId || !serverId) {\n\t\t\terror = 'No channel or server selected';\n\t\t\treturn;\n\t\t}\n\n\t\tconst token = $authStore.token;\n\t\tif (!token) {\n\t\t\terror = 'Not authenticated';\n\t\t\treturn;\n\t\t}\n\n\t\tisConnecting = true;\n\t\terror = '';\n\n\t\ttry {\n\t\t\t// Connect to voice server using relative URL to leverage Vite's proxy\n\t\t\tawait voiceClient.connect(token, '');\n\t\t\t\n\t\t\t// Start local audio stream\n\t\t\tawait voiceClient.startLocalStream();\n\t\t\t\n\t\t\t// Join voice channel\n\t\t\tawait voiceClient.joinChannel(channelId, serverId);\n\t\t\t\n\t\t\t// Handle audio autoplay after user interaction\n\t\t\tsetTimeout(() => {\n\t\t\t\tvoiceClient.handleAudioAutoplay();\n\t\t\t}, 1000);\n\t\t\t\n\t\t} catch (err: any) {\n\t\t\tconsole.error('Failed to connect voice:', err);\n\t\t\terror = err.message || 'Failed to connect to voice channel';\n\t\t} finally {\n\t\t\tisConnecting = false;\n\t\t}\n\t}\n\n\tasync function disconnectVoice() {\n\t\ttry {\n\t\t\tconsole.log('Disconnecting from voice channel...');\n\t\t\tawait voiceClient.leaveChannel();\n\t\t\tconsole.log('Successfully disconnected from voice channel');\n\t\t} catch (err) {\n\t\t\tconsole.error('Failed to disconnect voice:', err);\n\t\t\t// Even if there's an error, try to force disconnect\n\t\t\ttry {\n\t\t\t\tvoiceClient.disconnect();\n\t\t\t} catch (forceErr) {\n\t\t\t\tconsole.error('Failed to force disconnect:', forceErr);\n\t\t\t}\n\t\t}\n\t}\n\n\tfunction toggleMute() {\n\t\tif (!voiceState) return;\n\t\tvoiceClient.setMuted(!voiceState.isMuted);\n\t}\n\n\tfunction toggleDeafen() {\n\t\tif (!voiceState) return;\n\t\tvoiceClient.setDeafened(!voiceState.isDeafened);\n\t}\n\n\tfunction handleKeyDown(event: KeyboardEvent) {\n\t\tif (!voiceSettings?.pushToTalk) return;\n\t\t\n\t\tif (event.code === `Key${voiceSettings.pushToTalkKey.toUpperCase()}` || \n\t\t\tevent.code === `Space` && voiceSettings.pushToTalkKey === 'Space') {\n\t\t\tevent.preventDefault();\n\t\t\tif (!isPushToTalkActive) {\n\t\t\t\tisPushToTalkActive = true;\n\t\t\t\tvoiceClient.setMuted(false);\n\t\t\t}\n\t\t}\n\t}\n\n\tfunction handleKeyUp(event: KeyboardEvent) {\n\t\tif (!voiceSettings?.pushToTalk) return;\n\t\t\n\t\tif (event.code === `Key${voiceSettings.pushToTalkKey.toUpperCase()}` || \n\t\t\tevent.code === `Space` && voiceSettings.pushToTalkKey === 'Space') {\n\t\t\tevent.preventDefault();\n\t\t\tif (isPushToTalkActive) {\n\t\t\t\tisPushToTalkActive = false;\n\t\t\t\tvoiceClient.setMuted(true);\n\t\t\t}\n\t\t}\n\t}\n\n\tfunction updateSetting(key: keyof VoiceSettings, value: any) {\n\t\tvoiceClient.updateSettings({ [key]: value });\n\t}\n\n\tfunction getConnectionQualityColor() {\n\t\tswitch (voiceState?.connectionQuality) {\n\t\t\tcase 'excellent': return 'text-green-500';\n\t\t\tcase 'good': return 'text-yellow-500';\n\t\t\tcase 'poor': return 'text-red-500';\n\t\t\tdefault: return 'text-gray-500';\n\t\t}\n\t}\n\n\tfunction getConnectionQualityText() {\n\t\tswitch (voiceState?.connectionQuality) {\n\t\t\tcase 'excellent': return 'Excellent';\n\t\t\tcase 'good': return 'Good';\n\t\t\tcase 'poor': return 'Poor';\n\t\t\tdefault: return 'Disconnected';\n\t\t}\n\t}\n</script>\n\n<div class=\"voice-controls\">\n\t<!-- Connection Status -->\n\t<div class=\"voice-status\">\n\t\t{#if voiceState?.isConnected}\n\t\t\t<div class=\"status-indicator connected\">\n\t\t\t\t<div class=\"status-dot {getConnectionQualityColor()}\"></div>\n\t\t\t\t<span class=\"status-text\">{getConnectionQualityText()}</span>\n\t\t\t</div>\n\t\t{:else}\n\t\t\t<div class=\"status-indicator disconnected\">\n\t\t\t\t<div class=\"status-dot text-gray-500\"></div>\n\t\t\t\t<span class=\"status-text\">Disconnected</span>\n\t\t\t</div>\n\t\t{/if}\n\t</div>\n\n\t<!-- Voice Controls -->\n\t<div class=\"voice-buttons\">\n\t\t{#if voiceState?.isConnected}\n\t\t\t<!-- Mute Button -->\n\t\t\t<button \n\t\t\t\tclass=\"voice-btn {voiceState.isMuted ? 'muted' : ''} {voiceState.isSpeaking ? 'speaking' : ''}\"\n\t\t\t\ton:click={toggleMute}\n\t\t\t\ttitle=\"{voiceState.isMuted ? 'Unmute' : 'Mute'} ({voiceSettings?.pushToTalk ? voiceSettings.pushToTalkKey : 'Voice Activity'})\"\n\t\t\t>\n\t\t\t\t{#if voiceState.isMuted}\n\t\t\t\t\t<MicOff size={20} />\n\t\t\t\t{:else}\n\t\t\t\t\t<Mic size={20} />\n\t\t\t\t{/if}\n\t\t\t</button>\n\n\t\t\t<!-- Deafen Button -->\n\t\t\t<button \n\t\t\t\tclass=\"voice-btn {voiceState.isDeafened ? 'deafened' : ''}\"\n\t\t\t\ton:click={toggleDeafen}\n\t\t\t\ttitle=\"{voiceState.isDeafened ? 'Undeafen' : 'Deafen'}\"\n\t\t\t>\n\t\t\t\t{#if voiceState.isDeafened}\n\t\t\t\t\t<VolumeX size={20} />\n\t\t\t\t{:else}\n\t\t\t\t\t<Volume2 size={20} />\n\t\t\t\t{/if}\n\t\t\t</button>\n\n\t\t\t<!-- Settings Button -->\n\t\t\t<button \n\t\t\t\tclass=\"voice-btn settings\"\n\t\t\t\ton:click={() => showSettings = !showSettings}\n\t\t\t\ttitle=\"Voice Settings\"\n\t\t\t>\n\t\t\t\t<Settings size={20} />\n\t\t\t</button>\n\n\t\t\t<!-- Disconnect Button -->\n\t\t\t<button \n\t\t\t\tclass=\"voice-btn disconnect\"\n\t\t\t\ton:click={disconnectVoice}\n\t\t\t\ttitle=\"Leave Voice Channel\"\n\t\t\t>\n\t\t\t\t<Headphones size={20} />\n\t\t\t</button>\n\n\t\t{:else}\n\t\t\t<!-- Connect Button -->\n\t\t\t<button \n\t\t\t\tclass=\"voice-btn connect\"\n\t\t\t\ton:click={connectVoice}\n\t\t\t\tdisabled={isConnecting || !channelId}\n\t\t\t\ttitle=\"Join Voice Channel\"\n\t\t\t>\n\t\t\t\t{#if isConnecting}\n\t\t\t\t\t<div class=\"loading-spinner\"></div>\n\t\t\t\t{:else}\n\t\t\t\t\t<Headphones size={20} />\n\t\t\t\t{/if}\n\t\t\t</button>\n\t\t{/if}\n\t</div>\n\n\t<!-- Error Display -->\n\t{#if error}\n\t\t<div class=\"voice-error\">\n\t\t\t<span>{error}</span>\n\t\t\t<button on:click={() => error = ''} class=\"error-close\">×</button>\n\t\t</div>\n\t{/if}\n\n\t<!-- Voice Settings Modal -->\n\t{#if showSettings}\n\t\t<div class=\"voice-settings-overlay\" on:click={() => showSettings = false}>\n\t\t\t<div class=\"voice-settings-modal\" on:click|stopPropagation>\n\t\t\t\t<div class=\"settings-header\">\n\t\t\t\t\t<h3>Voice Settings</h3>\n\t\t\t\t\t<button on:click={() => showSettings = false} class=\"close-btn\">×</button>\n\t\t\t\t</div>\n\n\t\t\t\t<div class=\"settings-content\">\n\t\t\t\t\t<!-- Input Device -->\n\t\t\t\t\t<div class=\"setting-group\">\n\t\t\t\t\t\t<label for=\"input-device\">Input Device</label>\n\t\t\t\t\t\t<select \n\t\t\t\t\t\t\tid=\"input-device\"\n\t\t\t\t\t\t\tbind:value={voiceSettings.inputDevice}\n\t\t\t\t\t\t\ton:change={() => updateSetting('inputDevice', voiceSettings.inputDevice)}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{#each audioDevices.filter(d => d.kind === 'audioinput') as device}\n\t\t\t\t\t\t\t\t<option value={device.deviceId}>{device.label || `Microphone ${device.deviceId.slice(0, 8)}`}</option>\n\t\t\t\t\t\t\t{/each}\n\t\t\t\t\t\t</select>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<!-- Output Device -->\n\t\t\t\t\t<div class=\"setting-group\">\n\t\t\t\t\t\t<label for=\"output-device\">Output Device</label>\n\t\t\t\t\t\t<select \n\t\t\t\t\t\t\tid=\"output-device\"\n\t\t\t\t\t\t\tbind:value={voiceSettings.outputDevice}\n\t\t\t\t\t\t\ton:change={() => updateSetting('outputDevice', voiceSettings.outputDevice)}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{#each audioDevices.filter(d => d.kind === 'audiooutput') as device}\n\t\t\t\t\t\t\t\t<option value={device.deviceId}>{device.label || `Speaker ${device.deviceId.slice(0, 8)}`}</option>\n\t\t\t\t\t\t\t{/each}\n\t\t\t\t\t\t</select>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<!-- Input Volume -->\n\t\t\t\t\t<div class=\"setting-group\">\n\t\t\t\t\t\t<label for=\"input-volume\">Input Volume</label>\n\t\t\t\t\t\t<input \n\t\t\t\t\t\t\ttype=\"range\" \n\t\t\t\t\t\t\tid=\"input-volume\"\n\t\t\t\t\t\t\tmin=\"0\" \n\t\t\t\t\t\t\tmax=\"100\" \n\t\t\t\t\t\t\tbind:value={voiceSettings.inputVolume}\n\t\t\t\t\t\t\ton:input={() => updateSetting('inputVolume', voiceSettings.inputVolume)}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<span>{voiceSettings.inputVolume}%</span>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<!-- Output Volume -->\n\t\t\t\t\t<div class=\"setting-group\">\n\t\t\t\t\t\t<label for=\"output-volume\">Output Volume</label>\n\t\t\t\t\t\t<input \n\t\t\t\t\t\t\ttype=\"range\" \n\t\t\t\t\t\t\tid=\"output-volume\"\n\t\t\t\t\t\t\tmin=\"0\" \n\t\t\t\t\t\t\tmax=\"100\" \n\t\t\t\t\t\t\tbind:value={voiceSettings.outputVolume}\n\t\t\t\t\t\t\ton:input={() => updateSetting('outputVolume', voiceSettings.outputVolume)}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<span>{voiceSettings.outputVolume}%</span>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<!-- Audio Processing -->\n\t\t\t\t\t<div class=\"setting-group\">\n\t\t\t\t\t\t<label>\n\t\t\t\t\t\t\t<input \n\t\t\t\t\t\t\t\ttype=\"checkbox\" \n\t\t\t\t\t\t\t\tbind:checked={voiceSettings.noiseSuppression}\n\t\t\t\t\t\t\t\ton:change={() => updateSetting('noiseSuppression', voiceSettings.noiseSuppression)}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\tNoise Suppression\n\t\t\t\t\t\t</label>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<div class=\"setting-group\">\n\t\t\t\t\t\t<label>\n\t\t\t\t\t\t\t<input \n\t\t\t\t\t\t\t\ttype=\"checkbox\" \n\t\t\t\t\t\t\t\tbind:checked={voiceSettings.echoCancellation}\n\t\t\t\t\t\t\t\ton:change={() => updateSetting('echoCancellation', voiceSettings.echoCancellation)}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\tEcho Cancellation\n\t\t\t\t\t\t</label>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<div class=\"setting-group\">\n\t\t\t\t\t\t<label>\n\t\t\t\t\t\t\t<input \n\t\t\t\t\t\t\t\ttype=\"checkbox\" \n\t\t\t\t\t\t\t\tbind:checked={voiceSettings.autoGainControl}\n\t\t\t\t\t\t\t\ton:change={() => updateSetting('autoGainControl', voiceSettings.autoGainControl)}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\tAuto Gain Control\n\t\t\t\t\t\t</label>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<!-- Voice Activity Detection -->\n\t\t\t\t\t<div class=\"setting-group\">\n\t\t\t\t\t\t<label>\n\t\t\t\t\t\t\t<input \n\t\t\t\t\t\t\t\ttype=\"checkbox\" \n\t\t\t\t\t\t\t\tbind:checked={voiceSettings.voiceActivityDetection}\n\t\t\t\t\t\t\t\ton:change={() => updateSetting('voiceActivityDetection', voiceSettings.voiceActivityDetection)}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\tVoice Activity Detection\n\t\t\t\t\t\t</label>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<!-- Push to Talk -->\n\t\t\t\t\t<div class=\"setting-group\">\n\t\t\t\t\t\t<label>\n\t\t\t\t\t\t\t<input \n\t\t\t\t\t\t\t\ttype=\"checkbox\" \n\t\t\t\t\t\t\t\tbind:checked={voiceSettings.pushToTalk}\n\t\t\t\t\t\t\t\ton:change={() => updateSetting('pushToTalk', voiceSettings.pushToTalk)}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\tPush to Talk\n\t\t\t\t\t\t</label>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t{#if voiceSettings.pushToTalk}\n\t\t\t\t\t\t<div class=\"setting-group\">\n\t\t\t\t\t\t\t<label for=\"push-to-talk-key\">Push to Talk Key</label>\n\t\t\t\t\t\t\t<select \n\t\t\t\t\t\t\t\tid=\"push-to-talk-key\"\n\t\t\t\t\t\t\t\tbind:value={voiceSettings.pushToTalkKey}\n\t\t\t\t\t\t\t\ton:change={() => updateSetting('pushToTalkKey', voiceSettings.pushToTalkKey)}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<option value=\"Space\">Space</option>\n\t\t\t\t\t\t\t\t<option value=\"C\">C</option>\n\t\t\t\t\t\t\t\t<option value=\"V\">V</option>\n\t\t\t\t\t\t\t\t<option value=\"B\">B</option>\n\t\t\t\t\t\t\t\t<option value=\"N\">N</option>\n\t\t\t\t\t\t\t</select>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t{/if}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t{/if}\n</div>\n\n<style>\n\t.voice-controls {\n\t\tdisplay: flex;\n\t\tflex-direction: column;\n\t\tgap: 0.5rem;\n\t\tpadding: 1rem;\n\t\tbackground: var(--color-surface);\n\t\tborder: 1px solid var(--color-border);\n\t\tborder-radius: var(--radius-md);\n\t}\n\n\t.voice-status {\n\t\tdisplay: flex;\n\t\talign-items: center;\n\t\tjustify-content: center;\n\t}\n\n\t.status-indicator {\n\t\tdisplay: flex;\n\t\talign-items: center;\n\t\tgap: 0.5rem;\n\t\tfont-size: var(--font-size-sm);\n\t}\n\n\t.status-dot {\n\t\twidth: 8px;\n\t\theight: 8px;\n\t\tborder-radius: 50%;\n\t\tbackground: currentColor;\n\t}\n\n\t.voice-buttons {\n\t\tdisplay: flex;\n\t\tgap: 0.5rem;\n\t\tjustify-content: center;\n\t}\n\n\t.voice-btn {\n\t\tdisplay: flex;\n\t\talign-items: center;\n\t\tjustify-content: center;\n\t\twidth: 40px;\n\t\theight: 40px;\n\t\tborder: none;\n\t\tborder-radius: var(--radius-md);\n\t\tbackground: var(--color-primary);\n\t\tcolor: var(--color-text);\n\t\tcursor: pointer;\n\t\ttransition: all 0.2s ease;\n\t\tposition: relative;\n\t}\n\n\t.voice-btn:hover:not(:disabled) {\n\t\tbackground: var(--color-accent);\n\t\ttransform: translateY(-1px);\n\t}\n\n\t.voice-btn:disabled {\n\t\topacity: 0.5;\n\t\tcursor: not-allowed;\n\t}\n\n\t.voice-btn.muted {\n\t\tbackground: var(--color-error);\n\t}\n\n\t.voice-btn.deafened {\n\t\tbackground: var(--color-error);\n\t}\n\n\t.voice-btn.speaking {\n\t\tbackground: var(--color-success);\n\t\tanimation: pulse 1s infinite;\n\t}\n\n\t.voice-btn.settings {\n\t\tbackground: var(--color-primary);\n\t}\n\n\t.voice-btn.disconnect {\n\t\tbackground: var(--color-error);\n\t}\n\n\t.voice-btn.connect {\n\t\tbackground: var(--color-success);\n\t}\n\n\t.loading-spinner {\n\t\twidth: 16px;\n\t\theight: 16px;\n\t\tborder: 2px solid transparent;\n\t\tborder-top: 2px solid currentColor;\n\t\tborder-radius: 50%;\n\t\tanimation: spin 1s linear infinite;\n\t}\n\n\t.voice-error {\n\t\tdisplay: flex;\n\t\talign-items: center;\n\t\tjustify-content: space-between;\n\t\tpadding: 0.5rem;\n\t\tbackground: rgba(239, 68, 68, 0.1);\n\t\tborder: 1px solid var(--color-error);\n\t\tborder-radius: var(--radius-sm);\n\t\tfont-size: var(--font-size-sm);\n\t\tcolor: var(--color-error);\n\t}\n\n\t.error-close {\n\t\tbackground: none;\n\t\tborder: none;\n\t\tcolor: inherit;\n\t\tcursor: pointer;\n\t\tfont-size: 1.2rem;\n\t\tpadding: 0;\n\t\twidth: 20px;\n\t\theight: 20px;\n\t\tdisplay: flex;\n\t\talign-items: center;\n\t\tjustify-content: center;\n\t}\n\n\t.voice-settings-overlay {\n\t\tposition: fixed;\n\t\ttop: 0;\n\t\tleft: 0;\n\t\tright: 0;\n\t\tbottom: 0;\n\t\tbackground: rgba(0, 0, 0, 0.5);\n\t\tdisplay: flex;\n\t\talign-items: center;\n\t\tjustify-content: center;\n\t\tz-index: 1000;\n\t}\n\n\t.voice-settings-modal {\n\t\tbackground: var(--color-surface);\n\t\tborder: 1px solid var(--color-border);\n\t\tborder-radius: var(--radius-lg);\n\t\tpadding: 1.5rem;\n\t\tmax-width: 400px;\n\t\twidth: 90%;\n\t\tmax-height: 80vh;\n\t\toverflow-y: auto;\n\t}\n\n\t.settings-header {\n\t\tdisplay: flex;\n\t\talign-items: center;\n\t\tjustify-content: space-between;\n\t\tmargin-bottom: 1rem;\n\t\tpadding-bottom: 0.5rem;\n\t\tborder-bottom: 1px solid var(--color-border);\n\t}\n\n\t.settings-header h3 {\n\t\tmargin: 0;\n\t\tcolor: var(--color-text);\n\t\tfont-size: var(--font-size-lg);\n\t}\n\n\t.close-btn {\n\t\tbackground: none;\n\t\tborder: none;\n\t\tcolor: var(--color-text-muted);\n\t\tcursor: pointer;\n\t\tfont-size: 1.5rem;\n\t\tpadding: 0;\n\t\twidth: 30px;\n\t\theight: 30px;\n\t\tdisplay: flex;\n\t\talign-items: center;\n\t\tjustify-content: center;\n\t}\n\n\t.close-btn:hover {\n\t\tcolor: var(--color-text);\n\t}\n\n\t.settings-content {\n\t\tdisplay: flex;\n\t\tflex-direction: column;\n\t\tgap: 1rem;\n\t}\n\n\t.setting-group {\n\t\tdisplay: flex;\n\t\tflex-direction: column;\n\t\tgap: 0.5rem;\n\t}\n\n\t.setting-group label {\n\t\tcolor: var(--color-text);\n\t\tfont-size: var(--font-size-sm);\n\t\tfont-weight: 500;\n\t}\n\n\t.setting-group select,\n\t.setting-group input[type=\"range\"] {\n\t\tpadding: 0.5rem;\n\t\tborder: 1px solid var(--color-border);\n\t\tborder-radius: var(--radius-sm);\n\t\tbackground: var(--color-primary);\n\t\tcolor: var(--color-text);\n\t\tfont-size: var(--font-size-sm);\n\t}\n\n\t.setting-group input[type=\"checkbox\"] {\n\t\tmargin-right: 0.5rem;\n\t}\n\n\t.setting-group span {\n\t\tcolor: var(--color-text-muted);\n\t\tfont-size: var(--font-size-sm);\n\t}\n\n\t@keyframes pulse {\n\t\t0%, 100% { opacity: 1; }\n\t\t50% { opacity: 0.7; }\n\t}\n\n\t@keyframes spin {\n\t\tfrom { transform: rotate(0deg); }\n\t\tto { transform: rotate(360deg); }\n\t}\n</style> ","usedDeprecatedRules":[]},{"filePath":"/Users/bennerrr/Feathur/client/web/src/lib/components/ui/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/bennerrr/Feathur/client/web/src/lib/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/bennerrr/Feathur/client/web/src/lib/stores/app.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ApiError' is defined but never used. Allowed unused vars must match /^_/u.","line":4,"column":21,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":29},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":141,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":141,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3648,3704],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":164,"column":4,"nodeType":"MemberExpression","messageId":"unexpected","endLine":164,"endColumn":17,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[4300,4349],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":185,"column":4,"nodeType":"MemberExpression","messageId":"unexpected","endLine":185,"endColumn":17,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[4872,4920],"text":""},"desc":"Remove the console.error()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { writable, derived, get } from 'svelte/store';\nimport { browser } from '$app/environment';\nimport type { User, Server, Channel, Message, ChatState, TypingEvent, AppState } from '$lib/types';\nimport { apiClient, ApiError } from '$lib/api/client';\nimport { wsClient } from '$lib/api/websocket';\n\n// Initial app state\nconst initialState: AppState = {\n\tcurrentUser: null,\n\tcurrentServer: null,\n\tcurrentChannel: null,\n\tservers: [],\n\tisConnected: false,\n\tisLoading: false\n};\n\nconst initialChatState: ChatState = {\n\tmessages: [],\n\ttypingUsers: [],\n\tisLoadingMessages: false,\n\thasMoreMessages: true,\n\treplyingTo: null,\n\tselectedMessage: null,\n\tcurrentChannelId: undefined\n};\n\n// Create app store\nexport const appStore = writable<AppState>(initialState);\n\n// Create stores\nexport const chatStore = writable<ChatState>(initialChatState);\n\n// Derived stores for easier access\nexport const currentUser = derived(appStore, ($app) => $app.currentUser);\nexport const currentServer = derived(appStore, ($app) => $app.currentServer);\nexport const currentChannel = derived(appStore, ($app) => $app.currentChannel);\nexport const servers = derived(appStore, ($app) => $app.servers);\nexport const isConnected = derived(appStore, ($app) => $app.isConnected);\nexport const isLoading = derived(appStore, ($app) => $app.isLoading);\nexport const messages = derived(chatStore, ($chat) => $chat.messages);\nexport const typingUsers = derived(chatStore, ($chat) => $chat.typingUsers);\n\n// App actions\nexport const appActions = {\n\t// Set current user\n\tsetCurrentUser(user: User | null): void {\n\t\tappStore.update(state => ({\n\t\t\t...state,\n\t\t\tcurrentUser: user\n\t\t}));\n\t},\n\n\t// Set current server\n\tsetCurrentServer(server: Server | null): void {\n\t\tappStore.update(state => ({\n\t\t\t...state,\n\t\t\tcurrentServer: server,\n\t\t\tcurrentChannel: null // Clear channel when server changes\n\t\t}));\n\t},\n\n\t// Set current channel\n\tsetCurrentChannel(channel: Channel | null): void {\n\t\tappStore.update(state => ({\n\t\t\t...state,\n\t\t\tcurrentChannel: channel\n\t\t}));\n\t},\n\n\t// Set servers list\n\tsetServers(serversList: Server[]): void {\n\t\tappStore.update(state => ({\n\t\t\t...state,\n\t\t\tservers: serversList\n\t\t}));\n\t},\n\n\t// Add server to list\n\taddServer(server: Server): void {\n\t\tappStore.update(state => ({\n\t\t\t...state,\n\t\t\tservers: [...state.servers, server]\n\t\t}));\n\t},\n\n\t// Update server in list\n\tupdateServer(serverId: number, updates: Partial<Server>): void {\n\t\tappStore.update(state => ({\n\t\t\t...state,\n\t\t\tservers: state.servers.map(server => \n\t\t\t\tserver.id === serverId ? { ...server, ...updates } : server\n\t\t\t)\n\t\t}));\n\t},\n\n\t// Remove server from list\n\tremoveServer(serverId: number): void {\n\t\tappStore.update(state => ({\n\t\t\t...state,\n\t\t\tservers: state.servers.filter(server => server.id !== serverId),\n\t\t\tcurrentServer: state.currentServer?.id === serverId ? null : state.currentServer,\n\t\t\tcurrentChannel: state.currentChannel?.serverId === serverId ? null : state.currentChannel\n\t\t}));\n\t},\n\n\t// Set connection status\n\tsetConnectionStatus(connected: boolean): void {\n\t\tappStore.update(state => ({\n\t\t\t...state,\n\t\t\tisConnected: connected\n\t\t}));\n\t},\n\n\t// Set loading state\n\tsetLoading(loading: boolean): void {\n\t\tappStore.update(state => ({\n\t\t\t...state,\n\t\t\tisLoading: loading\n\t\t}));\n\t},\n\n\t// Reset app state (for logout)\n\treset(): void {\n\t\tappStore.set(initialState);\n\t},\n\n\t// Initialize app with user data\n\tinitialize(user: User): void {\n\t\tappStore.update(state => ({\n\t\t\t...state,\n\t\t\tcurrentUser: user,\n\t\t\tisConnected: true\n\t\t}));\n\t}\n};\n\n// Chat actions\nexport const chatActions = {\n\t// Load messages for a channel\n\tasync loadMessages(channelId: number, limit = 50, before?: number): Promise<void> {\n\t\tconsole.log('Loading messages for channel:', channelId);\n\t\tchatStore.update(state => ({ \n\t\t\t...state, \n\t\t\tisLoadingMessages: true,\n\t\t\tcurrentChannelId: channelId\n\t\t}));\n\n\t\ttry {\n\t\t\tconst response = await apiClient.getMessages(channelId, 1, limit);\n\t\t\t\n\t\t\t// Handle the actual backend response format\n\t\t\tconst messages = response.messages || response.data || [];\n\t\t\t\n\t\t\tchatStore.update(state => ({\n\t\t\t\t...state,\n\t\t\t\tmessages: before \n\t\t\t\t\t? [...messages.reverse(), ...state.messages]\n\t\t\t\t\t: messages.reverse(),\n\t\t\t\tisLoadingMessages: false,\n\t\t\t\thasMoreMessages: response.hasMore || false,\n\t\t\t\tcurrentChannelId: channelId\n\t\t\t}));\n\t\t} catch (error) {\n\t\t\tconsole.error('Failed to load messages:', error);\n\t\t\t\n\t\t\tchatStore.update(state => ({\n\t\t\t\t...state,\n\t\t\t\tisLoadingMessages: false\n\t\t\t}));\n\t\t}\n\t},\n\n\t// Send message\n\tasync sendMessage(channelId: number, content: string, replyToId?: number): Promise<void> {\n\t\ttry {\n\t\t\t// Try WebSocket first for real-time sending\n\t\t\tif (wsClient.isConnected()) {\n\t\t\t\twsClient.sendMessage(channelId, content);\n\t\t\t} else {\n\t\t\t\t// Fallback to HTTP API\n\t\t\t\tconst message = await apiClient.sendMessage(channelId, { content, replyToId });\n\t\t\t\tthis.addMessage(message);\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tconsole.error('Failed to send message:', error);\n\t\t\tthrow error;\n\t\t}\n\t},\n\n\t// Add message to chat\n\taddMessage(message: Message): void {\n\t\tconst currentState = get(chatStore);\n\t\t\n\t\t// Only add message if it's for the current channel\n\t\tif (currentState.currentChannelId === undefined) {\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tif (currentState.currentChannelId !== message.channelId) {\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tchatStore.update(state => ({\n\t\t\t...state,\n\t\t\tmessages: [...state.messages, message].sort((a, b) => \n\t\t\t\tnew Date(a.createdAt).getTime() - new Date(b.createdAt).getTime()\n\t\t\t)\n\t\t}));\n\t},\n\n\t// Update typing users\n\tupdateTypingUsers(typingEvent: TypingEvent): void {\n\t\tchatStore.update(state => {\n\t\t\tconst existingIndex = state.typingUsers.findIndex(\n\t\t\t\tuser => user.userId === typingEvent.userId && user.channelId === typingEvent.channelId\n\t\t\t);\n\n\t\t\tif (typingEvent.isTyping) {\n\t\t\t\t// Add or update typing user\n\t\t\t\tif (existingIndex >= 0) {\n\t\t\t\t\tstate.typingUsers[existingIndex] = typingEvent;\n\t\t\t\t} else {\n\t\t\t\t\tstate.typingUsers.push(typingEvent);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Remove typing user\n\t\t\t\tif (existingIndex >= 0) {\n\t\t\t\t\tstate.typingUsers.splice(existingIndex, 1);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\ttypingUsers: [...state.typingUsers]\n\t\t\t};\n\t\t});\n\t},\n\n\t// Clear chat state\n\tclearChat(): void {\n\t\tchatStore.set(initialChatState);\n\t},\n\n\t// Set current channel ID\n\tsetCurrentChannel(channelId: number): void {\n\t\tchatStore.update(state => ({\n\t\t\t...state,\n\t\t\tcurrentChannelId: channelId\n\t\t}));\n\t}\n};\n\n// WebSocket event handlers\nif (browser) {\n\t// Connection status events\n\twsClient.on('connected', () => {\n\t\tappStore.update(state => ({\n\t\t\t...state,\n\t\t\tisConnected: true,\n\t\t\tconnectionStatus: 'connected'\n\t\t}));\n\t});\n\n\twsClient.on('disconnected', () => {\n\t\tappStore.update(state => ({\n\t\t\t...state,\n\t\t\tisConnected: false,\n\t\t\tconnectionStatus: 'disconnected'\n\t\t}));\n\t});\n\n\twsClient.on('reconnecting', () => {\n\t\tappStore.update(state => ({\n\t\t\t...state,\n\t\t\tconnectionStatus: 'reconnecting'\n\t\t}));\n\t});\n\n\t// Note: Message and typing events are handled in the chat page component\n\t// to avoid duplicate processing and ensure proper channel filtering\n}","usedDeprecatedRules":[]},{"filePath":"/Users/bennerrr/Feathur/client/web/src/lib/stores/auth.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'getStorageItem' is defined but never used. Allowed unused vars must match /^_/u.","line":6,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'removeStorageItem' is defined but never used. Allowed unused vars must match /^_/u.","line":6,"column":26,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":43}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { writable, derived } from 'svelte/store';\nimport { browser } from '$app/environment';\nimport type { User, AuthResponse } from '$lib/types';\nimport { apiClient, ApiError } from '$lib/api/client';\nimport { wsClient } from '$lib/api/websocket';\nimport { getStorageItem, removeStorageItem } from '$lib/utils';\n\n// Auth state interface\ninterface AuthState {\n\tuser: User | null;\n\ttoken: string | null;\n\tisLoading: boolean;\n\terror: string | null;\n\tisInitialized: boolean;\n}\n\n// Initial state\nconst initialState: AuthState = {\n\tuser: null,\n\ttoken: null,\n\tisLoading: false,\n\terror: null,\n\tisInitialized: false\n};\n\n// Create writable store\nexport const authStore = writable<AuthState>(initialState);\n\n// Derived stores for convenience\nexport const currentUser = derived(authStore, ($auth) => $auth.user);\nexport const isAuthenticated = derived(authStore, ($auth) => !!$auth.user && !!$auth.token);\nexport const isLoading = derived(authStore, ($auth) => $auth.isLoading);\nexport const authError = derived(authStore, ($auth) => $auth.error);\n\n// Auth actions\nexport const authActions = {\n\t// Initialize auth state from localStorage\n\tasync initialize(): Promise<void> {\n\t\tif (!browser) return;\n\n\t\tauthStore.update(state => ({ ...state, isLoading: true }));\n\n\t\ttry {\n\t\t\tconst token = localStorage.getItem('auth_token');\n\t\t\t\n\t\t\tif (token) {\n\t\t\t\t// Set token in API client first\n\t\t\t\tapiClient.setToken(token);\n\t\t\t\t\n\t\t\t\t// Verify token is still valid by fetching current user\n\t\t\t\tconst user = await apiClient.getCurrentUser();\n\t\t\t\t\n\t\t\t\tauthStore.update(state => ({\n\t\t\t\t\t...state,\n\t\t\t\t\tuser,\n\t\t\t\t\ttoken,\n\t\t\t\t\tisLoading: false,\n\t\t\t\t\terror: null,\n\t\t\t\t\tisInitialized: true\n\t\t\t\t}));\n\n\t\t\t\t// Connect WebSocket\n\t\t\t\tawait wsClient.connect(token);\n\t\t\t} else {\n\t\t\t\tauthStore.update(state => ({\n\t\t\t\t\t...state,\n\t\t\t\t\tisLoading: false,\n\t\t\t\t\tisInitialized: true\n\t\t\t\t}));\n\t\t\t}\n\t\t} catch (error) {\n\t\t\t// Clear invalid token from localStorage and API client\n\t\t\tif (browser) {\n\t\t\t\tlocalStorage.removeItem('auth_token');\n\t\t\t}\n\t\t\tapiClient.clearToken();\n\t\t\t\n\t\t\tauthStore.update(state => ({\n\t\t\t\t...state,\n\t\t\t\tuser: null,\n\t\t\t\ttoken: null,\n\t\t\t\tisLoading: false,\n\t\t\t\terror: null, // Don't show error on initialization failure\n\t\t\t\tisInitialized: true\n\t\t\t}));\n\t\t}\n\t},\n\n\t// Login user\n\tasync login(username: string, password: string): Promise<void> {\n\t\tauthStore.update(state => ({ ...state, isLoading: true, error: null }));\n\n\t\ttry {\n\t\t\tconst authResponse: AuthResponse = await apiClient.login({ username, password });\n\t\t\t\n\t\t\tauthStore.update(state => ({\n\t\t\t\t...state,\n\t\t\t\tuser: authResponse.user,\n\t\t\t\ttoken: authResponse.token,\n\t\t\t\tisLoading: false,\n\t\t\t\terror: null\n\t\t\t}));\n\n\t\t\t// Store token in localStorage\n\t\t\tif (browser) {\n\t\t\t\tlocalStorage.setItem('auth_token', authResponse.token);\n\t\t\t}\n\n\t\t\t// Connect WebSocket\n\t\t\tawait wsClient.connect(authResponse.token);\n\t\t} catch (error) {\n\t\t\tconst errorMessage = error instanceof ApiError ? error.message : 'Login failed';\n\t\t\t\n\t\t\tauthStore.update(state => ({\n\t\t\t\t...state,\n\t\t\t\tuser: null,\n\t\t\t\ttoken: null,\n\t\t\t\tisLoading: false,\n\t\t\t\terror: errorMessage\n\t\t\t}));\n\n\t\t\tthrow error;\n\t\t}\n\t},\n\n\t// Register user\n\tasync register(username: string, email: string, password: string): Promise<void> {\n\t\tauthStore.update(state => ({ ...state, isLoading: true, error: null }));\n\n\t\ttry {\n\t\t\tconst authResponse: AuthResponse = await apiClient.register({ username, email, password });\n\t\t\t\n\t\t\tauthStore.update(state => ({\n\t\t\t\t...state,\n\t\t\t\tuser: authResponse.user,\n\t\t\t\ttoken: authResponse.token,\n\t\t\t\tisLoading: false,\n\t\t\t\terror: null\n\t\t\t}));\n\n\t\t\t// Store token in localStorage\n\t\t\tif (browser) {\n\t\t\t\tlocalStorage.setItem('auth_token', authResponse.token);\n\t\t\t}\n\n\t\t\t// Connect WebSocket\n\t\t\tawait wsClient.connect(authResponse.token);\n\t\t} catch (error) {\n\t\t\tconst errorMessage = error instanceof ApiError ? error.message : 'Registration failed';\n\t\t\t\n\t\t\tauthStore.update(state => ({\n\t\t\t\t...state,\n\t\t\t\tuser: null,\n\t\t\t\ttoken: null,\n\t\t\t\tisLoading: false,\n\t\t\t\terror: errorMessage\n\t\t\t}));\n\n\t\t\tthrow error;\n\t\t}\n\t},\n\n\t// Logout user\n\tasync logout(): Promise<void> {\n\t\tauthStore.update(state => ({ ...state, isLoading: true }));\n\n\t\ttry {\n\t\t\t// Disconnect WebSocket\n\t\t\twsClient.disconnect();\n\t\t\t\n\t\t\t// Call API logout\n\t\t\tawait apiClient.logout();\n\t\t} catch (error) {\n\t\t\t// Ignore logout API errors\n\t\t} finally {\n\t\t\t// Clear local state regardless of API call result\n\t\t\tif (browser) {\n\t\t\t\tlocalStorage.removeItem('auth_token');\n\t\t\t}\n\t\t\tauthStore.update(state => ({\n\t\t\t\t...state,\n\t\t\t\tuser: null,\n\t\t\t\ttoken: null,\n\t\t\t\tisLoading: false,\n\t\t\t\terror: null\n\t\t\t}));\n\t\t}\n\t},\n\n\t// Refresh token\n\tasync refreshToken(): Promise<void> {\n\t\ttry {\n\t\t\tconst authResponse: AuthResponse = await apiClient.refreshToken();\n\t\t\t\n\t\t\tauthStore.update(state => ({\n\t\t\t\t...state,\n\t\t\t\tuser: authResponse.user,\n\t\t\t\ttoken: authResponse.token,\n\t\t\t\terror: null\n\t\t\t}));\n\t\t} catch (error) {\n\t\t\t// If refresh fails, logout user\n\t\t\tawait this.logout();\n\t\t\tthrow error;\n\t\t}\n\t},\n\n\t// Update user data\n\tupdateUser(user: User): void {\n\t\tauthStore.update(state => ({\n\t\t\t...state,\n\t\t\tuser\n\t\t}));\n\t},\n\n\t// Clear error\n\tclearError(): void {\n\t\tauthStore.update(state => ({\n\t\t\t...state,\n\t\t\terror: null\n\t\t}));\n\t}\n};\n\n// Auto-initialize when store is created\nif (browser) {\n\tauthActions.initialize();\n}","usedDeprecatedRules":[]},{"filePath":"/Users/bennerrr/Feathur/client/web/src/lib/stores/chat.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Reaction' is defined but never used. Allowed unused vars must match /^_/u.","line":2,"column":24,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":32},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":28,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":28,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[823,1005],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":35,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":35,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1050,1201],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":46,"column":4,"nodeType":"MemberExpression","messageId":"unexpected","endLine":46,"endColumn":15,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1483,1761],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":58,"column":4,"nodeType":"MemberExpression","messageId":"unexpected","endLine":58,"endColumn":15,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1949,2026],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":62,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":62,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2047,2111],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":67,"column":4,"nodeType":"MemberExpression","messageId":"unexpected","endLine":67,"endColumn":15,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2289,2363],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":111,"column":49,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":111,"endColumn":52,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3476,3479],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3476,3479],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":124,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":124,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3722,3725],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3722,3725],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":180,"column":4,"nodeType":"MemberExpression","messageId":"unexpected","endLine":180,"endColumn":15,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4813,4945],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":189,"column":4,"nodeType":"MemberExpression","messageId":"unexpected","endLine":189,"endColumn":15,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[5064,5141],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":207,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":207,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[5572,5641],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":216,"column":4,"nodeType":"MemberExpression","messageId":"unexpected","endLine":216,"endColumn":17,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[5798,5861],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":226,"column":4,"nodeType":"MemberExpression","messageId":"unexpected","endLine":226,"endColumn":17,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[6059,6107],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":236,"column":4,"nodeType":"MemberExpression","messageId":"unexpected","endLine":236,"endColumn":17,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[6290,6340],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":245,"column":4,"nodeType":"MemberExpression","messageId":"unexpected","endLine":245,"endColumn":15,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[6532,6783],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":255,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":255,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[6935,7013],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":271,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":271,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[7468,7538],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":276,"column":4,"nodeType":"MemberExpression","messageId":"unexpected","endLine":276,"endColumn":15,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[7636,7734],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":288,"column":4,"nodeType":"MemberExpression","messageId":"unexpected","endLine":288,"endColumn":15,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[8072,8153],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":290,"column":4,"nodeType":"MemberExpression","messageId":"unexpected","endLine":290,"endColumn":17,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[8177,8241],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":298,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":298,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[8434,8508],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":299,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":299,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[8511,8602],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'state' is defined but never used. Allowed unused args must match /^_/u.","line":301,"column":20,"nodeType":null,"messageId":"unusedVar","endLine":301,"endColumn":25},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":329,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":329,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[9357,9596],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":343,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":343,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[9749,9933],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":26,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { writable, derived, get } from 'svelte/store';\nimport type { Message, Reaction, ChatState } from '$lib/types';\nimport { apiClient } from '$lib/api/client';\n\n// Initial chat state\nconst initialChatState: ChatState = {\n\tmessages: [],\n\ttypingUsers: [],\n\tisLoadingMessages: false,\n\thasMoreMessages: true,\n\treplyingTo: null,\n\tselectedMessage: null,\n\tcurrentChannelId: undefined\n};\n\n// Create chat store\nexport const chatStore = writable<ChatState>(initialChatState);\n\n// Derived stores\nexport const messages = derived(chatStore, ($chat) => $chat.messages);\nexport const typingUsers = derived(chatStore, ($chat) => $chat.typingUsers);\nexport const replyingTo = derived(chatStore, ($chat) => $chat.replyingTo);\n\n// Chat actions\nexport const chatActions = {\n\t// Add message to store\n\taddMessage(message: Message): void {\n\t\tconsole.log('🔵 [CHAT STORE] Adding message to store:', {\n\t\t\tmessageId: message.id,\n\t\t\tmessageChannelId: message.channelId,\n\t\t\tcontent: message.content.substring(0, 50) + '...'\n\t\t});\n\t\t\n\t\tconst currentState = get(chatStore);\n\t\tconsole.log('🔵 [CHAT STORE] Current state:', {\n\t\t\tcurrentChannelId: currentState.currentChannelId,\n\t\t\tmessageCount: currentState.messages.length\n\t\t});\n\t\t\n\t\t// Convert channel IDs to numbers for comparison\n\t\tconst messageChannelId = Number(message.channelId);\n\t\tconst currentChannelId = Number(currentState.currentChannelId);\n\t\t\n\t\t// Only add message if it's for the current channel\n\t\tif (currentChannelId !== messageChannelId) {\n\t\t\tconsole.log('🔴 [CHAT STORE] Message is for different channel, ignoring:', {\n\t\t\t\tmessageChannelId: messageChannelId,\n\t\t\t\tcurrentChannelId: currentChannelId,\n\t\t\t\tmessageChannelIdType: typeof message.channelId,\n\t\t\t\tcurrentChannelIdType: typeof currentState.currentChannelId\n\t\t\t});\n\t\t\treturn;\n\t\t}\n\t\t\n\t\t// Check if message already exists (to prevent duplicates)\n\t\tconst existingMessage = currentState.messages.find(m => m.id === message.id);\n\t\tif (existingMessage) {\n\t\t\tconsole.log('⚠️ [CHAT STORE] Message already exists, skipping:', message.id);\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tconsole.log('✅ [CHAT STORE] Adding message to current channel');\n\t\tchatStore.update(state => {\n\t\t\tconst newMessages = [...state.messages, message].sort((a, b) => \n\t\t\t\tnew Date(a.createdAt).getTime() - new Date(b.createdAt).getTime()\n\t\t\t);\n\t\t\tconsole.log('✅ [CHAT STORE] Updated messages count:', newMessages.length);\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tmessages: newMessages\n\t\t\t};\n\t\t});\n\t},\n\n\t// Update existing message\n\tupdateMessage(messageId: number, updates: Partial<Message>): void {\n\t\tchatStore.update(state => ({\n\t\t\t...state,\n\t\t\tmessages: state.messages.map(msg => \n\t\t\t\tmsg.id === messageId ? { ...msg, ...updates } : msg\n\t\t\t)\n\t\t}));\n\t},\n\n\t// Delete message\n\tdeleteMessage(messageId: number): void {\n\t\tchatStore.update(state => ({\n\t\t\t...state,\n\t\t\tmessages: state.messages.filter(msg => msg.id !== messageId)\n\t\t}));\n\t},\n\n\t// Add reaction to message\n\taddReaction(messageId: number, emoji: string, userId: number): void {\n\t\tchatStore.update(state => ({\n\t\t\t...state,\n\t\t\tmessages: state.messages.map(msg => {\n\t\t\t\tif (msg.id === messageId) {\n\t\t\t\t\tconst reactions = msg.reactions || [];\n\t\t\t\t\tconst existingReaction = reactions.find(r => r.emoji === emoji);\n\t\t\t\t\t\n\t\t\t\t\tif (existingReaction) {\n\t\t\t\t\t\t// Add user to existing reaction\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t...msg,\n\t\t\t\t\t\t\treactions: reactions.map(r => \n\t\t\t\t\t\t\t\tr.emoji === emoji \n\t\t\t\t\t\t\t\t\t? { \n\t\t\t\t\t\t\t\t\t\t...r, \n\t\t\t\t\t\t\t\t\t\tcount: r.count + 1,\n\t\t\t\t\t\t\t\t\t\tusers: [...r.users, { id: userId } as any]\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t: r\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t};\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// Create new reaction\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t...msg,\n\t\t\t\t\t\t\treactions: [...reactions, {\n\t\t\t\t\t\t\t\tid: Date.now(),\n\t\t\t\t\t\t\t\temoji,\n\t\t\t\t\t\t\t\tcount: 1,\n\t\t\t\t\t\t\t\tusers: [{ id: userId } as any],\n\t\t\t\t\t\t\t\tmessageId\n\t\t\t\t\t\t\t}]\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn msg;\n\t\t\t})\n\t\t}));\n\t},\n\n\t// Remove reaction from message\n\tremoveReaction(messageId: number, emoji: string, userId: number): void {\n\t\tchatStore.update(state => ({\n\t\t\t...state,\n\t\t\tmessages: state.messages.map(msg => {\n\t\t\t\tif (msg.id === messageId && msg.reactions) {\n\t\t\t\t\treturn {\n\t\t\t\t\t\t...msg,\n\t\t\t\t\t\treactions: msg.reactions.map(r => {\n\t\t\t\t\t\t\tif (r.emoji === emoji) {\n\t\t\t\t\t\t\t\tconst newUsers = r.users.filter(u => u.id !== userId);\n\t\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\t\t...r,\n\t\t\t\t\t\t\t\t\tcount: newUsers.length,\n\t\t\t\t\t\t\t\t\tusers: newUsers\n\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn r;\n\t\t\t\t\t\t}).filter(r => r.count > 0)\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\treturn msg;\n\t\t\t})\n\t\t}));\n\t},\n\n\t// Set reply target\n\tsetReplyTo(message: Message | null): void {\n\t\tchatStore.update(state => ({\n\t\t\t...state,\n\t\t\treplyingTo: message\n\t\t}));\n\t},\n\n\t// Clear reply target\n\tclearReply(): void {\n\t\tchatStore.update(state => ({\n\t\t\t...state,\n\t\t\treplyingTo: null\n\t\t}));\n\t},\n\n\t// Send message\n\tasync sendMessage(channelId: number, content: string, replyToId?: number): Promise<void> {\n\t\ttry {\n\t\t\tconsole.log('📤 [CHAT STORE] Sending message:', {\n\t\t\t\tchannelId,\n\t\t\t\tcontent: content.substring(0, 50) + '...',\n\t\t\t\treplyToId\n\t\t\t});\n\t\t\t\n\t\t\t// Send message via API\n\t\t\tconst response = await apiClient.sendMessage(channelId, content, replyToId);\n\t\t\t\n\t\t\tconsole.log('✅ [CHAT STORE] Message sent successfully, response:', response);\n\t\t\t\n\t\t\t// Add the returned message to the store immediately\n\t\t\tif (response) {\n\t\t\t\tconst message: Message = {\n\t\t\t\t\tid: response.id,\n\t\t\t\t\tcontent: response.content,\n\t\t\t\t\tchannelId: response.channel_id,\n\t\t\t\t\tauthorId: response.user_id,\n\t\t\t\t\tauthor: {\n\t\t\t\t\t\tid: response.user_id,\n\t\t\t\t\t\tusername: response.username\n\t\t\t\t\t},\n\t\t\t\t\tcreatedAt: response.created_at,\n\t\t\t\t\tupdatedAt: response.created_at,\n\t\t\t\t\tisEdited: false\n\t\t\t\t};\n\t\t\t\t\n\t\t\t\tconsole.log('✅ [CHAT STORE] Adding sent message to store:', message);\n\t\t\t\tchatActions.addMessage(message);\n\t\t\t}\n\t\t\t\n\t\t\t// Clear reply after sending\n\t\t\tif (replyToId) {\n\t\t\t\tchatActions.clearReply();\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tconsole.error('❌ [CHAT STORE] Failed to send message:', error);\n\t\t\tthrow error;\n\t\t}\n\t},\n\n\t// Edit message\n\tasync editMessage(messageId: number, content: string): Promise<void> {\n\t\ttry {\n\t\t\tawait apiClient.editMessage(messageId, content);\n\t\t} catch (error) {\n\t\t\tconsole.error('Failed to edit message:', error);\n\t\t\tthrow error;\n\t\t}\n\t},\n\n\t// Delete message\n\tasync deleteMessageAsync(messageId: number): Promise<void> {\n\t\ttry {\n\t\t\tawait apiClient.deleteMessage(messageId);\n\t\t} catch (error) {\n\t\t\tconsole.error('Failed to delete message:', error);\n\t\t\tthrow error;\n\t\t}\n\t},\n\n\t// Load messages for channel\n\tasync loadMessages(channelId: number, limit = 50, before?: number): Promise<void> {\n\t\ttry {\n\t\t\tconst currentState = get(chatStore);\n\t\t\tconsole.log('🔄 [CHAT STORE] Loading messages for channel:', {\n\t\t\t\tchannelId,\n\t\t\t\tcurrentChannelId: currentState.currentChannelId,\n\t\t\t\texistingMessageCount: currentState.messages.length,\n\t\t\t\tisLoading: currentState.isLoadingMessages,\n\t\t\t\tbefore\n\t\t\t});\n\t\t\t\n\t\t\t// Don't reload if already loading for this channel\n\t\t\tif (currentState.isLoadingMessages && currentState.currentChannelId === channelId) {\n\t\t\t\tconsole.log('⏭️ [CHAT STORE] Already loading messages for channel, skipping');\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t\n\t\t\tchatStore.update(state => ({ \n\t\t\t\t...state, \n\t\t\t\tisLoadingMessages: true, \n\t\t\t\tcurrentChannelId: channelId \n\t\t\t}));\n\t\t\t\n\t\t\t// Use page 1 for initial load, or calculate page based on before parameter\n\t\t\tconst page = before ? Math.floor(before / limit) + 1 : 1;\n\t\t\tconst response = await apiClient.getMessages(channelId, page, limit);\n\t\t\t\n\t\t\t// Add safety checks for response structure\n\t\t\tif (!response || !response.messages) {\n\t\t\t\tconsole.error('❌ [CHAT STORE] Invalid response structure:', response);\n\t\t\t\tchatStore.update(state => ({ ...state, isLoadingMessages: false }));\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t\n\t\t\tconsole.log('✅ [CHAT STORE] Loaded', response.messages.length, 'messages for channel', channelId);\n\t\t\tchatStore.update(state => ({\n\t\t\t\t...state,\n\t\t\t\tmessages: before \n\t\t\t\t\t? [...response.messages.reverse(), ...state.messages]\n\t\t\t\t\t: response.messages.reverse(),\n\t\t\t\thasMoreMessages: response.messages.length === limit,\n\t\t\t\tisLoadingMessages: false,\n\t\t\t\tcurrentChannelId: channelId\n\t\t\t}));\n\t\t\t\n\t\t\tconst updatedState = get(chatStore);\n\t\t\tconsole.log('✅ [CHAT STORE] Final message count:', updatedState.messages.length);\n\t\t} catch (error) {\n\t\t\tconsole.error('❌ [CHAT STORE] Failed to load messages:', error);\n\t\t\tchatStore.update(state => ({ ...state, isLoadingMessages: false }));\n\t\t}\n\t},\n\n\t// Clear messages (when switching channels)\n\tclearMessages(): void {\n\t\tconst currentState = get(chatStore);\n\t\tconsole.log('🧹 [CHAT STORE] Clearing messages and resetting chat state');\n\t\tconsole.log('🧹 [CHAT STORE] Preserving currentChannelId:', currentState.currentChannelId);\n\t\t\n\t\tchatStore.update(state => ({\n\t\t\t...initialChatState,\n\t\t\tcurrentChannelId: currentState.currentChannelId // Preserve the current channel ID\n\t\t}));\n\t},\n\n\t// Add typing indicator\n\taddTypingUser(userId: number, channelId: number, username: string): void {\n\t\tchatStore.update(state => ({\n\t\t\t...state,\n\t\t\ttypingUsers: [\n\t\t\t\t...state.typingUsers.filter(t => t.userId !== userId),\n\t\t\t\t{ userId, channelId, username, isTyping: true }\n\t\t\t]\n\t\t}));\n\t},\n\n\t// Remove typing indicator\n\tremoveTypingUser(userId: number): void {\n\t\tchatStore.update(state => ({\n\t\t\t...state,\n\t\t\ttypingUsers: state.typingUsers.filter(t => t.userId !== userId)\n\t\t}));\n\t},\n\n\t// Set current channel ID\n\tsetCurrentChannel(channelId: number): void {\n\t\tconst currentState = get(chatStore);\n\t\tconsole.log('🎯 [CHAT STORE] Setting current channel ID:', {\n\t\t\toldChannelId: currentState.currentChannelId,\n\t\t\tnewChannelId: channelId,\n\t\t\toldChannelIdType: typeof currentState.currentChannelId,\n\t\t\tnewChannelIdType: typeof channelId\n\t\t});\n\t\t\n\t\tchatStore.update(state => ({\n\t\t\t...state,\n\t\t\tcurrentChannelId: channelId\n\t\t}));\n\t\t\n\t\t// Verify the update\n\t\tconst updatedState = get(chatStore);\n\t\tconsole.log('✅ [CHAT STORE] Channel ID updated successfully:', {\n\t\t\tcurrentChannelId: updatedState.currentChannelId,\n\t\t\tcurrentChannelIdType: typeof updatedState.currentChannelId\n\t\t});\n\t}\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/bennerrr/Feathur/client/web/src/lib/stores/voice.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'VoiceConnection' is defined but never used. Allowed unused vars must match /^_/u.","line":3,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":42},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'VoiceParticipant' is defined but never used. Allowed unused vars must match /^_/u.","line":3,"column":44,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":60},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'rtcConfig' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":38,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":38,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'data' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":168,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":168,"endColumn":14}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { writable, derived, get } from 'svelte/store';\nimport { browser } from '$app/environment';\nimport type { VoiceStore, VoiceConnection, VoiceParticipant } from '$lib/types';\n\n// Initial voice store state\nconst initialVoiceState: VoiceStore = {\n\tcurrentConnection: null,\n\tisConnecting: false,\n\terror: null,\n\tdevices: {\n\t\taudioInput: [],\n\t\taudioOutput: []\n\t},\n\tsettings: {\n\t\tinputDeviceId: null,\n\t\toutputDeviceId: null,\n\t\tinputVolume: 80,\n\t\toutputVolume: 80,\n\t\techoCancellation: true,\n\t\tnoiseSuppression: true,\n\t\tautoGainControl: true,\n\t\tvoiceActivityDetection: true,\n\t\tpushToTalk: false,\n\t\tpushToTalkKey: 'Space'\n\t}\n};\n\n// Create the voice store\nexport const voiceStore = writable<VoiceStore>(initialVoiceState);\n\n// Derived stores\nexport const currentVoiceConnection = derived(voiceStore, ($voice) => $voice.currentConnection);\nexport const isConnectedToVoice = derived(voiceStore, ($voice) => $voice.currentConnection?.isConnected ?? false);\nexport const voiceParticipants = derived(voiceStore, ($voice) => $voice.currentConnection?.participants ?? []);\nexport const voiceSettings = derived(voiceStore, ($voice) => $voice.settings);\n\n// WebRTC configuration\nconst rtcConfig: RTCConfiguration = {\n\ticeServers: [\n\t\t{ urls: 'stun:stun.l.google.com:19302' },\n\t\t{ urls: 'stun:stun1.l.google.com:19302' }\n\t],\n\ticeCandidatePoolSize: 10\n};\n\n// Voice client class for managing WebRTC connections\nclass VoiceClient {\n\tprivate ws: WebSocket | null = null;\n\tprivate localStream: MediaStream | null = null;\n\tprivate connections: Map<number, RTCPeerConnection> = new Map();\n\tprivate channelId: number | null = null;\n\tprivate userId: number | null = null;\n\n\tconstructor() {\n\t\tthis.setupEventListeners();\n\t}\n\n\tprivate setupEventListeners() {\n\t\tif (!browser) return;\n\t\tdocument.addEventListener('keydown', this.handleKeyDown.bind(this));\n\t\tdocument.addEventListener('keyup', this.handleKeyUp.bind(this));\n\t}\n\n\tprivate handleKeyDown(event: KeyboardEvent) {\n\t\tconst settings = get(voiceSettings);\n\t\tif (settings.pushToTalk && event.code === settings.pushToTalkKey && this.localStream) {\n\t\t\tthis.setMuted(false);\n\t\t}\n\t}\n\n\tprivate handleKeyUp(event: KeyboardEvent) {\n\t\tconst settings = get(voiceSettings);\n\t\tif (settings.pushToTalk && event.code === settings.pushToTalkKey && this.localStream) {\n\t\t\tthis.setMuted(true);\n\t\t}\n\t}\n\n\tasync joinVoiceChannel(channelId: number, userId: number, wsUrl: string): Promise<void> {\n\t\ttry {\n\t\t\tvoiceStore.update(state => ({ ...state, isConnecting: true, error: null }));\n\n\t\t\tthis.channelId = channelId;\n\t\t\tthis.userId = userId;\n\n\t\t\tconst settings = get(voiceSettings);\n\t\t\tthis.localStream = await navigator.mediaDevices.getUserMedia({\n\t\t\t\taudio: {\n\t\t\t\t\tdeviceId: settings.inputDeviceId ? { exact: settings.inputDeviceId } : undefined,\n\t\t\t\t\techoCancellation: settings.echoCancellation,\n\t\t\t\t\tnoiseSuppression: settings.noiseSuppression,\n\t\t\t\t\tautoGainControl: settings.autoGainControl,\n\t\t\t\t\tsampleRate: 48000\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tif (settings.pushToTalk) {\n\t\t\t\tthis.setMuted(true);\n\t\t\t}\n\n\t\t\tthis.ws = new WebSocket(wsUrl);\n\n\t\t\tthis.ws.onopen = () => {\n\t\t\t\tthis.sendSignaling({\n\t\t\t\t\ttype: 'join_voice',\n\t\t\t\t\tchannelId,\n\t\t\t\t\tuserId\n\t\t\t\t});\n\t\t\t};\n\n\t\t\tthis.ws.onmessage = this.handleWebSocketMessage.bind(this);\n\n\t\t\t// Update store with connection\n\t\t\tvoiceStore.update(state => ({\n\t\t\t\t...state,\n\t\t\t\tcurrentConnection: {\n\t\t\t\t\tid: channelId,\n\t\t\t\t\tisConnected: true,\n\t\t\t\t\tisMuted: settings.pushToTalk,\n\t\t\t\t\tisDeafened: false,\n\t\t\t\t\tparticipants: []\n\t\t\t\t},\n\t\t\t\tisConnecting: false\n\t\t\t}));\n\n\t\t} catch (error) {\n\t\t\tvoiceStore.update(state => ({\n\t\t\t\t...state,\n\t\t\t\tisConnecting: false,\n\t\t\t\terror: error instanceof Error ? error.message : 'Failed to join voice channel'\n\t\t\t}));\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\tsetMuted(muted: boolean) {\n\t\tif (this.localStream) {\n\t\t\tthis.localStream.getAudioTracks().forEach(track => {\n\t\t\t\ttrack.enabled = !muted;\n\t\t\t});\n\t\t}\n\n\t\tvoiceStore.update(state => ({\n\t\t\t...state,\n\t\t\tcurrentConnection: state.currentConnection ? {\n\t\t\t\t...state.currentConnection,\n\t\t\t\tisMuted: muted\n\t\t\t} : null\n\t\t}));\n\n\t\tif (this.ws && this.ws.readyState === WebSocket.OPEN) {\n\t\t\tthis.sendSignaling({\n\t\t\t\ttype: 'mute_state',\n\t\t\t\tmuted,\n\t\t\t\tchannelId: this.channelId,\n\t\t\t\tuserId: this.userId\n\t\t\t});\n\t\t}\n\t}\n\n\tprivate sendSignaling(message: unknown) {\n\t\tif (this.ws && this.ws.readyState === WebSocket.OPEN) {\n\t\t\tthis.ws.send(JSON.stringify(message));\n\t\t}\n\t}\n\n\tprivate async handleWebSocketMessage(event: MessageEvent) {\n\t\ttry {\n\t\t\tconst data = JSON.parse(event.data);\n\t\t\t// Handle signaling messages\n\t\t} catch (error) {\n\t\t\t// Handle parsing errors silently\n\t\t}\n\t}\n\n\tasync leaveVoiceChannel(): Promise<void> {\n\t\tif (this.localStream) {\n\t\t\tthis.localStream.getTracks().forEach(track => track.stop());\n\t\t\tthis.localStream = null;\n\t\t}\n\n\t\tif (this.ws) {\n\t\t\tthis.ws.close();\n\t\t\tthis.ws = null;\n\t\t}\n\n\t\tthis.connections.forEach(connection => {\n\t\t\tconnection.close();\n\t\t});\n\t\tthis.connections.clear();\n\n\t\tvoiceStore.update(state => ({\n\t\t\t...state,\n\t\t\tcurrentConnection: null,\n\t\t\tisConnecting: false,\n\t\t\terror: null\n\t\t}));\n\t}\n\n\tasync getDevices(): Promise<{ audioInput: MediaDeviceInfo[]; audioOutput: MediaDeviceInfo[] }> {\n\t\tif (!browser) {\n\t\t\treturn { audioInput: [], audioOutput: [] };\n\t\t}\n\n\t\ttry {\n\t\t\tconst devices = await navigator.mediaDevices.enumerateDevices();\n\t\t\tconst audioInput = devices.filter(device => device.kind === 'audioinput');\n\t\t\tconst audioOutput = devices.filter(device => device.kind === 'audiooutput');\n\n\t\t\tvoiceStore.update(state => ({\n\t\t\t\t...state,\n\t\t\t\tdevices: { audioInput, audioOutput }\n\t\t\t}));\n\n\t\t\treturn { audioInput, audioOutput };\n\t\t} catch (error) {\n\t\t\treturn { audioInput: [], audioOutput: [] };\n\t\t}\n\t}\n}\n\n// Create voice client instance\nconst voiceClient = new VoiceClient();\n\n// Voice actions\nexport const voiceActions = {\n\tasync joinVoiceChannel(channelId: number, userId: number, wsUrl: string): Promise<void> {\n\t\tif (!voiceClient) throw new Error('Voice client not available');\n\t\tawait voiceClient.joinVoiceChannel(channelId, userId, wsUrl);\n\t},\n\n\tasync leaveVoiceChannel(): Promise<void> {\n\t\tif (!voiceClient) return;\n\t\tawait voiceClient.leaveVoiceChannel();\n\t},\n\n\ttoggleMute(): void {\n\t\tif (!voiceClient) return;\n\t\tconst currentConnection = get(currentVoiceConnection);\n\t\tif (currentConnection) {\n\t\t\tvoiceClient.setMuted(!currentConnection.isMuted);\n\t\t}\n\t},\n\n\ttoggleDeafen(): void {\n\t\tvoiceStore.update(state => ({\n\t\t\t...state,\n\t\t\tcurrentConnection: state.currentConnection ? {\n\t\t\t\t...state.currentConnection,\n\t\t\t\tisDeafened: !state.currentConnection.isDeafened\n\t\t\t} : null\n\t\t}));\n\t},\n\n\tupdateSettings(settings: Partial<VoiceStore['settings']>): void {\n\t\tvoiceStore.update(state => ({\n\t\t\t...state,\n\t\t\tsettings: { ...state.settings, ...settings }\n\t\t}));\n\t},\n\n\tasync loadDevices(): Promise<void> {\n\t\tif (!voiceClient) return;\n\t\tawait voiceClient.getDevices();\n\t}\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/bennerrr/Feathur/client/web/src/lib/types/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/bennerrr/Feathur/client/web/src/lib/utils/index.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/bennerrr/Feathur/client/web/src/lib/utils/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/bennerrr/Feathur/client/web/src/lib/webrtc/voice.test.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":89,"column":58,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":89,"endColumn":61,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2218,2221],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2218,2221],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":90,"column":66,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":90,"endColumn":69,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2288,2291],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2288,2291],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":91,"column":56,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":91,"endColumn":59,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2348,2351],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2348,2351],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":98,"column":6,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":98,"endColumn":9,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2653,2656],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2653,2656],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":117,"column":60,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":117,"endColumn":63,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3125,3128],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3125,3128],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":191,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":191,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5258,5261],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5258,5261],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":209,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":209,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5778,5781],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5778,5781],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":244,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":244,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6781,6784],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6781,6784],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'peerConnection' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":257,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":257,"endColumn":24}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { describe, it, expect, vi, beforeEach, afterEach } from 'vitest';\nimport { voiceClient } from './voice';\n\n// Mock WebSocket with proper event handling\nconst createMockWebSocket = (readyState = 1) => {\n\tconst mockWebSocket = {\n\t\treadyState,\n\t\tsend: vi.fn(),\n\t\tclose: vi.fn(),\n\t\taddEventListener: vi.fn((event, handler) => {\n\t\t\t// Simulate immediate connection for tests\n\t\t\tif (event === 'open' && readyState === 1) {\n\t\t\t\tsetTimeout(() => handler(), 0);\n\t\t\t}\n\t\t}),\n\t\tremoveEventListener: vi.fn()\n\t};\n\treturn mockWebSocket;\n};\n\n// Mock MediaDevices\nconst mockMediaStream = {\n\tgetTracks: () => [\n\t\t{\n\t\t\tstop: vi.fn(),\n\t\t\tgetSettings: () => ({ deviceId: 'test-device' })\n\t\t}\n\t],\n\tgetAudioTracks: () => [\n\t\t{\n\t\t\tstop: vi.fn(),\n\t\t\tgetSettings: () => ({ deviceId: 'test-device' })\n\t\t}\n\t]\n};\n\n// Mock RTCPeerConnection\nconst mockRTCPeerConnection = {\n\tcreateOffer: vi.fn().mockResolvedValue({ type: 'offer', sdp: 'test-sdp' }),\n\tcreateAnswer: vi.fn().mockResolvedValue({ type: 'answer', sdp: 'test-sdp' }),\n\tsetLocalDescription: vi.fn().mockResolvedValue(undefined),\n\tsetRemoteDescription: vi.fn().mockResolvedValue(undefined),\n\taddIceCandidate: vi.fn().mockResolvedValue(undefined),\n\taddTrack: vi.fn(),\n\tclose: vi.fn(),\n\tonicecandidate: null,\n\tontrack: null,\n\tonconnectionstatechange: null,\n\tconnectionState: 'connected'\n};\n\n// Mock AudioContext and AudioWorklet\nconst mockAudioContext = {\n\tcreateMediaStreamSource: vi.fn().mockReturnValue({\n\t\tconnect: vi.fn(),\n\t\tdisconnect: vi.fn()\n\t}),\n\tcreateAnalyser: vi.fn().mockReturnValue({\n\t\tconnect: vi.fn(),\n\t\tdisconnect: vi.fn(),\n\t\tgetByteFrequencyData: vi.fn().mockImplementation((array) => {\n\t\t\t// Simulate voice activity\n\t\t\tfor (let i = 0; i < array.length; i++) {\n\t\t\t\tarray[i] = Math.random() * 255;\n\t\t\t}\n\t\t}),\n\t\tfrequencyBinCount: 256\n\t}),\n\taudioWorklet: {\n\t\taddModule: vi.fn().mockResolvedValue(undefined)\n\t},\n\tcreateScriptProcessor: vi.fn().mockReturnValue({\n\t\tconnect: vi.fn(),\n\t\tdisconnect: vi.fn(),\n\t\tonaudioprocess: null\n\t})\n};\n\n// Mock document\nconst mockAudioElement = {\n\tplay: vi.fn().mockResolvedValue(undefined),\n\tpause: vi.fn(),\n\tremove: vi.fn(),\n\tid: '',\n\tsrcObject: null\n};\n\n// Setup global mocks\nglobal.WebSocket = vi.fn(() => createMockWebSocket()) as any;\nglobal.RTCPeerConnection = vi.fn(() => mockRTCPeerConnection) as any;\nglobal.AudioContext = vi.fn(() => mockAudioContext) as any;\nglobal.navigator.mediaDevices = {\n\tgetUserMedia: vi.fn().mockResolvedValue(mockMediaStream),\n\tenumerateDevices: vi.fn().mockResolvedValue([\n\t\t{ deviceId: 'test-input', kind: 'audioinput', label: 'Test Microphone' },\n\t\t{ deviceId: 'test-output', kind: 'audiooutput', label: 'Test Speakers' }\n\t])\n} as any;\n\n// Mock document methods\nObject.defineProperty(document, 'getElementById', {\n\tvalue: vi.fn(() => mockAudioElement),\n\twritable: true\n});\n\nObject.defineProperty(document, 'createElement', {\n\tvalue: vi.fn(() => mockAudioElement),\n\twritable: true\n});\n\ndescribe('Voice Client', () => {\n\tbeforeEach(() => {\n\t\tvi.clearAllMocks();\n\t\t// Reset voice client state\n\t\tvoiceClient.disconnect();\n\t\t// Reset WebSocket mock\n\t\tglobal.WebSocket = vi.fn(() => createMockWebSocket()) as any;\n\t});\n\n\tafterEach(() => {\n\t\tvoiceClient.disconnect();\n\t});\n\n\tdescribe('Voice Settings', () => {\n\t\tit('should update voice settings correctly', () => {\n\t\t\tconst newSettings = {\n\t\t\t\tinputVolume: 0.8,\n\t\t\t\toutputVolume: 0.9,\n\t\t\t\tnoiseSuppression: true,\n\t\t\t\techoCancellation: true\n\t\t\t};\n\n\t\t\tvoiceClient.updateSettings(newSettings);\n\n\t\t\tconst settings = voiceClient.getSettings();\n\t\t\texpect(settings.inputVolume).toBe(0.8);\n\t\t\texpect(settings.outputVolume).toBe(0.9);\n\t\t\texpect(settings.noiseSuppression).toBe(true);\n\t\t\texpect(settings.echoCancellation).toBe(true);\n\t\t});\n\n\t\tit('should get audio devices correctly', async () => {\n\t\t\tconst devices = await voiceClient.getAudioDevices();\n\n\t\t\texpect(devices).toHaveLength(2);\n\t\t\texpect(devices[0].kind).toBe('audioinput');\n\t\t\texpect(devices[1].kind).toBe('audiooutput');\n\t\t});\n\t});\n\n\tdescribe('Voice State Management', () => {\n\t\tit('should handle mute/unmute correctly', () => {\n\t\t\tvoiceClient.setMuted(true);\n\t\t\texpect(voiceClient.getState().isMuted).toBe(true);\n\n\t\t\tvoiceClient.setMuted(false);\n\t\t\texpect(voiceClient.getState().isMuted).toBe(false);\n\t\t});\n\n\t\tit('should handle deafen/undeafen correctly', () => {\n\t\t\tvoiceClient.setDeafened(true);\n\t\t\texpect(voiceClient.getState().isDeafened).toBe(true);\n\n\t\t\tvoiceClient.setDeafened(false);\n\t\t\texpect(voiceClient.getState().isDeafened).toBe(false);\n\t\t});\n\n\t\tit('should track initial connection state correctly', () => {\n\t\t\texpect(voiceClient.getState().isConnected).toBe(false);\n\t\t\texpect(voiceClient.getState().currentChannelId).toBeNull();\n\t\t});\n\t});\n\n\tdescribe('Voice Activity Detection', () => {\n\t\tit('should setup voice activity detection correctly', async () => {\n\t\t\t// Mock high audio levels\n\t\t\tconst mockAnalyser = {\n\t\t\t\tconnect: vi.fn(),\n\t\t\t\tdisconnect: vi.fn(),\n\t\t\t\tgetByteFrequencyData: vi.fn().mockImplementation((array) => {\n\t\t\t\t\tfor (let i = 0; i < array.length; i++) {\n\t\t\t\t\t\tarray[i] = 200 + Math.random() * 55; // High levels\n\t\t\t\t\t}\n\t\t\t\t}),\n\t\t\t\tfrequencyBinCount: 256\n\t\t\t};\n\n\t\t\tmockAudioContext.createAnalyser.mockReturnValue(mockAnalyser);\n\n\t\t\t// Test voice activity detection setup\n\t\t\tconst stream = mockMediaStream as any;\n\t\t\tvoiceClient['setupVoiceActivityDetection'](stream);\n\n\t\t\t// Verify analyser was created\n\t\t\texpect(mockAudioContext.createAnalyser).toHaveBeenCalled();\n\t\t});\n\n\t\tit('should cleanup voice activity detection correctly', () => {\n\t\t\t// Setup voice activity detection first\n\t\t\tconst mockAnalyser = {\n\t\t\t\tconnect: vi.fn(),\n\t\t\t\tdisconnect: vi.fn(),\n\t\t\t\tgetByteFrequencyData: vi.fn(),\n\t\t\t\tfrequencyBinCount: 256\n\t\t\t};\n\n\t\t\tmockAudioContext.createAnalyser.mockReturnValue(mockAnalyser);\n\n\t\t\tconst stream = mockMediaStream as any;\n\t\t\tvoiceClient['setupVoiceActivityDetection'](stream);\n\n\t\t\t// Now cleanup\n\t\t\tvoiceClient['cleanupVoiceActivityDetection']();\n\n\t\t\t// Verify cleanup\n\t\t\texpect(voiceClient.getState().isSpeaking).toBe(false);\n\t\t});\n\t});\n\n\tdescribe('Error Handling', () => {\n\t\tit('should handle media device permission errors', async () => {\n\t\t\t// Mock getUserMedia to reject\n\t\t\tnavigator.mediaDevices.getUserMedia = vi.fn().mockRejectedValue(\n\t\t\t\tnew Error('Permission denied')\n\t\t\t);\n\n\t\t\tawait expect(voiceClient['startLocalStream']()).rejects.toThrow('Permission denied');\n\t\t});\n\n\t\tit('should handle WebSocket connection errors gracefully', async () => {\n\t\t\t// Mock WebSocket to throw error\n\t\t\tconst mockErrorWebSocket = {\n\t\t\t\treadyState: 3, // CLOSED\n\t\t\t\tsend: vi.fn(),\n\t\t\t\tclose: vi.fn(),\n\t\t\t\taddEventListener: vi.fn((event, handler) => {\n\t\t\t\t\tif (event === 'error') {\n\t\t\t\t\t\tsetTimeout(() => handler(new Error('Connection failed')), 0);\n\t\t\t\t\t}\n\t\t\t\t}),\n\t\t\t\tremoveEventListener: vi.fn()\n\t\t\t};\n\n\t\t\t(global.WebSocket as any) = vi.fn(() => mockErrorWebSocket);\n\n\t\t\t// The connect method should handle the error gracefully\n\t\t\tawait voiceClient.connect('test-token');\n\t\t\t\n\t\t\t// Verify that the error was handled (no exception thrown)\n\t\t\texpect(voiceClient.getState().isConnected).toBe(false);\n\t\t});\n\t});\n\n\tdescribe('Voice Client Utilities', () => {\n\t\tit('should create peer connections correctly', () => {\n\t\t\tconst peerId = 'test-peer-1';\n\t\t\tconst peerConnection = voiceClient['createPeerConnection'](peerId);\n\n\t\t\texpect(RTCPeerConnection).toHaveBeenCalled();\n\t\t\texpect(voiceClient['peers'].has(peerId)).toBe(true);\n\t\t});\n\n\t\tit('should remove peer connections correctly', () => {\n\t\t\tconst peerId = 'test-peer-1';\n\t\t\t\n\t\t\t// Create a peer first\n\t\t\tvoiceClient['createPeerConnection'](peerId);\n\t\t\texpect(voiceClient['peers'].has(peerId)).toBe(true);\n\n\t\t\t// Remove the peer\n\t\t\tvoiceClient['removePeerConnection'](peerId);\n\t\t\texpect(voiceClient['peers'].has(peerId)).toBe(false);\n\t\t});\n\n\t\tit('should handle audio autoplay correctly', () => {\n\t\t\t// Mock user interaction\n\t\t\tconst mockEvent = new Event('click');\n\t\t\tdocument.dispatchEvent(mockEvent);\n\n\t\t\t// Test audio autoplay handling\n\t\t\tvoiceClient.handleAudioAutoplay();\n\n\t\t\t// Verify no errors occurred\n\t\t\texpect(true).toBe(true); // Just checking it doesn't throw\n\t\t});\n\t});\n\n\tdescribe('Voice Message Handling', () => {\n\t\tit('should handle connected messages correctly', () => {\n\t\t\tconst message = {\n\t\t\t\ttype: 'connected',\n\t\t\t\tuser_id: 1,\n\t\t\t\tusername: 'testuser'\n\t\t\t};\n\n\t\t\tvoiceClient['handleConnected'](message);\n\n\t\t\tconst state = voiceClient.getState();\n\t\t\texpect(state.isRegistered).toBe(true);\n\t\t});\n\n\t\tit('should handle channel joined messages correctly', async () => {\n\t\t\tconst message = {\n\t\t\t\ttype: 'channel-joined',\n\t\t\t\tdata: {\n\t\t\t\t\tchannel_id: 1,\n\t\t\t\t\tserver_id: 1,\n\t\t\t\t\tclients: []\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tawait voiceClient['handleChannelJoined'](message);\n\n\t\t\tconst state = voiceClient.getState();\n\t\t\texpect(state.currentChannelId).toBe(1);\n\t\t\texpect(state.isConnected).toBe(true);\n\t\t});\n\n\t\tit('should handle user joined messages correctly', async () => {\n\t\t\tconst message = {\n\t\t\t\ttype: 'user-joined',\n\t\t\t\tuser_id: 2,\n\t\t\t\tusername: 'testuser2',\n\t\t\t\tchannel_id: 1\n\t\t\t};\n\n\t\t\tawait voiceClient['handleUserJoined'](message);\n\n\t\t\t// Verify that a peer connection was created\n\t\t\texpect(RTCPeerConnection).toHaveBeenCalled();\n\t\t});\n\t});\n}); ","usedDeprecatedRules":[]},{"filePath":"/Users/bennerrr/Feathur/client/web/src/lib/webrtc/voice.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":45,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":45,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1249,1252],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1249,1252],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":103,"column":6,"nodeType":"MemberExpression","messageId":"unexpected","endLine":103,"endColumn":19,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[2627,2678],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":131,"column":4,"nodeType":"MemberExpression","messageId":"unexpected","endLine":131,"endColumn":15,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3292,3341],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":136,"column":4,"nodeType":"MemberExpression","messageId":"unexpected","endLine":136,"endColumn":15,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3369,3417],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":137,"column":4,"nodeType":"MemberExpression","messageId":"unexpected","endLine":137,"endColumn":15,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3421,3464],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":141,"column":4,"nodeType":"MemberExpression","messageId":"unexpected","endLine":141,"endColumn":15,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3741,3794],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":146,"column":6,"nodeType":"MemberExpression","messageId":"unexpected","endLine":146,"endColumn":19,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[3962,4019],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":156,"column":6,"nodeType":"MemberExpression","messageId":"unexpected","endLine":156,"endColumn":17,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4253,4307],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":164,"column":6,"nodeType":"MemberExpression","messageId":"unexpected","endLine":164,"endColumn":19,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[4536,4583],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":171,"column":6,"nodeType":"MemberExpression","messageId":"unexpected","endLine":171,"endColumn":17,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4759,4830],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":185,"column":6,"nodeType":"MemberExpression","messageId":"unexpected","endLine":185,"endColumn":19,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[5292,5347],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":190,"column":4,"nodeType":"MemberExpression","messageId":"unexpected","endLine":190,"endColumn":17,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[5384,5443],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":216,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":216,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[5964,6060],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":221,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":221,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6154,6157],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6154,6157],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":222,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":222,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[6163,6211],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":266,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":266,"endColumn":17,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[7124,7182],"text":""},"desc":"Remove the console.warn()."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'message' is defined but never used. Allowed unused args must match /^_/u.","line":270,"column":26,"nodeType":null,"messageId":"unusedVar","endLine":270,"endColumn":33},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":270,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":270,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7225,7228],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7225,7228],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":271,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":271,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[7234,7275],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":276,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":276,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7439,7442],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7439,7442],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":277,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":277,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[7448,7505],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'server_id' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":278,"column":23,"nodeType":null,"messageId":"unusedVar","endLine":278,"endColumn":32},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":286,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":286,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[7683,7752],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":287,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":287,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[7755,7816],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":288,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":288,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[7819,7872],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":293,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":293,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[8031,8111],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":299,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":299,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[8292,8397],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":301,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":301,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[8450,8525],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":309,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":309,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[8694,8757],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":311,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":311,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[8787,8853],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":314,"column":6,"nodeType":"MemberExpression","messageId":"unexpected","endLine":314,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[8879,8959],"text":""},"desc":"Remove the console.warn()."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":320,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":320,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9020,9023],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9020,9023],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":322,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":322,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[9074,9137],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":329,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":329,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[9290,9380],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":331,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":331,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[9429,9485],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":339,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":339,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[9639,9683],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":341,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":341,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[9709,9755],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":344,"column":4,"nodeType":"MemberExpression","messageId":"unexpected","endLine":344,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[9775,9844],"text":""},"desc":"Remove the console.warn()."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":348,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":348,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9886,9889],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9886,9889],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":353,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":353,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10015,10018],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10015,10018],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":359,"column":4,"nodeType":"MemberExpression","messageId":"unexpected","endLine":359,"endColumn":15,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[10173,10246],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":364,"column":4,"nodeType":"MemberExpression","messageId":"unexpected","endLine":364,"endColumn":15,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[10308,10374],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":369,"column":4,"nodeType":"MemberExpression","messageId":"unexpected","endLine":369,"endColumn":15,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[10547,10589],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":376,"column":4,"nodeType":"MemberExpression","messageId":"unexpected","endLine":376,"endColumn":17,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[10711,10757],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":380,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":380,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10803,10806],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10803,10806],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":385,"column":4,"nodeType":"MemberExpression","messageId":"unexpected","endLine":385,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[10915,10973],"text":""},"desc":"Remove the console.warn()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":390,"column":4,"nodeType":"MemberExpression","messageId":"unexpected","endLine":390,"endColumn":15,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[11001,11071],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":393,"column":4,"nodeType":"MemberExpression","messageId":"unexpected","endLine":393,"endColumn":17,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[11172,11219],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":397,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":397,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11271,11274],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11271,11274],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":402,"column":4,"nodeType":"MemberExpression","messageId":"unexpected","endLine":402,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[11383,11448],"text":""},"desc":"Remove the console.warn()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":407,"column":4,"nodeType":"MemberExpression","messageId":"unexpected","endLine":407,"endColumn":15,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[11476,11552],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":410,"column":4,"nodeType":"MemberExpression","messageId":"unexpected","endLine":410,"endColumn":17,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[11642,11696],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":414,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":414,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11746,11749],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11746,11749],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'peerId' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":416,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":416,"endColumn":15},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":418,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":418,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[11885,11941],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":421,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":421,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11979,11982],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11979,11982],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'peerId' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":422,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":422,"endColumn":15},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":426,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":426,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[12113,12200],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":429,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":429,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12235,12238],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12235,12238],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":430,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":430,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[12244,12291],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":433,"column":4,"nodeType":"MemberExpression","messageId":"unexpected","endLine":433,"endColumn":15,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[12390,12444],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":436,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":436,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[12488,12535],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":438,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":438,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[12561,12615],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":441,"column":4,"nodeType":"MemberExpression","messageId":"unexpected","endLine":441,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[12635,12710],"text":""},"desc":"Remove the console.warn()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":446,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":446,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[12794,12875],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":447,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":447,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[12878,12931],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":450,"column":4,"nodeType":"MemberExpression","messageId":"unexpected","endLine":450,"endColumn":17,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[12997,13073],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":457,"column":4,"nodeType":"MemberExpression","messageId":"unexpected","endLine":457,"endColumn":15,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[13236,13291],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":476,"column":4,"nodeType":"MemberExpression","messageId":"unexpected","endLine":476,"endColumn":15,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[13672,13712],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":480,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":480,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[13754,13801],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":486,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":486,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[13907,13949],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":488,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":488,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[13985,14031],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":494,"column":4,"nodeType":"MemberExpression","messageId":"unexpected","endLine":494,"endColumn":15,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[14144,14179],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":498,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":498,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[14198,14260],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":510,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":510,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[14602,14654],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":512,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":512,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[14680,14742],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":518,"column":4,"nodeType":"MemberExpression","messageId":"unexpected","endLine":518,"endColumn":15,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[14828,14876],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":522,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":522,"endColumn":17,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[14929,14983],"text":""},"desc":"Remove the console.warn()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":536,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":536,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[15323,15365],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":540,"column":6,"nodeType":"MemberExpression","messageId":"unexpected","endLine":540,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[15422,15479],"text":""},"desc":"Remove the console.warn()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":559,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":559,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[15827,15874],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":570,"column":4,"nodeType":"MemberExpression","messageId":"unexpected","endLine":570,"endColumn":15,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[16218,16280],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":585,"column":4,"nodeType":"MemberExpression","messageId":"unexpected","endLine":585,"endColumn":15,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[16689,16735],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":586,"column":4,"nodeType":"MemberExpression","messageId":"unexpected","endLine":586,"endColumn":15,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[16739,16793],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":587,"column":4,"nodeType":"MemberExpression","messageId":"unexpected","endLine":587,"endColumn":15,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[16797,16851],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":597,"column":4,"nodeType":"MemberExpression","messageId":"unexpected","endLine":597,"endColumn":15,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[17089,17146],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":600,"column":4,"nodeType":"MemberExpression","messageId":"unexpected","endLine":600,"endColumn":17,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[17188,17242],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":606,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":606,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[17369,17372],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[17369,17372],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":607,"column":4,"nodeType":"MemberExpression","messageId":"unexpected","endLine":607,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[17399,17477],"text":""},"desc":"Remove the console.warn()."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":612,"column":64,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":612,"endColumn":67,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[17565,17568],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[17565,17568],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":618,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":618,"endColumn":17,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[17810,17907],"text":""},"desc":"Remove the console.warn()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":636,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":636,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[18554,18629],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":675,"column":6,"nodeType":"MemberExpression","messageId":"unexpected","endLine":675,"endColumn":17,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[19765,19858],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":682,"column":4,"nodeType":"MemberExpression","messageId":"unexpected","endLine":682,"endColumn":15,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[20036,20091],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":684,"column":4,"nodeType":"MemberExpression","messageId":"unexpected","endLine":684,"endColumn":17,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[20115,20181],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":707,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":707,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[20799,20850],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":709,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":709,"endColumn":17,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[20876,20943],"text":""},"desc":"Remove the console.warn()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":720,"column":4,"nodeType":"MemberExpression","messageId":"unexpected","endLine":720,"endColumn":15,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[21154,21235],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":721,"column":4,"nodeType":"MemberExpression","messageId":"unexpected","endLine":721,"endColumn":15,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[21239,21289],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":739,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":739,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[21769,21842],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":744,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":744,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[21915,21982],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":749,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":749,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[22049,22101],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":758,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":758,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[22281,22336],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":763,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":763,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[22408,22456],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":766,"column":6,"nodeType":"MemberExpression","messageId":"unexpected","endLine":766,"endColumn":19,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[22525,22596],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":768,"column":6,"nodeType":"MemberExpression","messageId":"unexpected","endLine":768,"endColumn":17,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[22655,22721],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":774,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":774,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[22800,22854],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":779,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":779,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[22921,22967],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":784,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":784,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[23049,23128],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":787,"column":4,"nodeType":"MemberExpression","messageId":"unexpected","endLine":787,"endColumn":15,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[23142,23197],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":789,"column":4,"nodeType":"MemberExpression","messageId":"unexpected","endLine":789,"endColumn":17,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[23221,23306],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":805,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":805,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[23678,23769],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":809,"column":4,"nodeType":"MemberExpression","messageId":"unexpected","endLine":809,"endColumn":15,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[23842,23928],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":811,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":811,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[23984,24053],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":813,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":813,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[24118,24182],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":816,"column":4,"nodeType":"MemberExpression","messageId":"unexpected","endLine":816,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[24204,24290],"text":""},"desc":"Remove the console.warn()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":821,"column":4,"nodeType":"MemberExpression","messageId":"unexpected","endLine":821,"endColumn":15,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[24357,24423],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":822,"column":4,"nodeType":"MemberExpression","messageId":"unexpected","endLine":822,"endColumn":15,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[24427,24503],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":823,"column":4,"nodeType":"MemberExpression","messageId":"unexpected","endLine":823,"endColumn":15,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[24507,24561],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":827,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":827,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[24659,24724],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":837,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":837,"endColumn":17,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[24959,25020],"text":""},"desc":"Remove the console.warn()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":844,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":844,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[25126,25204],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":851,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":851,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[25341,25409],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":857,"column":4,"nodeType":"MemberExpression","messageId":"unexpected","endLine":857,"endColumn":15,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[25502,25572],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":860,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":860,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[25628,25695],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":863,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":863,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[25866,25941],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":870,"column":4,"nodeType":"MemberExpression","messageId":"unexpected","endLine":870,"endColumn":15,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[26108,26185],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":875,"column":4,"nodeType":"MemberExpression","messageId":"unexpected","endLine":875,"endColumn":15,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[26278,26353],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":898,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":898,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[26846,26901],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":960,"column":4,"nodeType":"MemberExpression","messageId":"unexpected","endLine":960,"endColumn":15,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[28408,28648],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":973,"column":4,"nodeType":"MemberExpression","messageId":"unexpected","endLine":973,"endColumn":15,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[28845,28926],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":980,"column":4,"nodeType":"MemberExpression","messageId":"unexpected","endLine":980,"endColumn":15,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[29051,29242],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'settings' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":1002,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":1002,"endColumn":19},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1013,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1013,"endColumn":17,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[30039,30086],"text":""},"desc":"Remove the console.warn()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1023,"column":4,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1023,"endColumn":17,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[30396,30449],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1029,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1029,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[30496,30552],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1037,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1037,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[30744,30786],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1041,"column":6,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1041,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[30843,30900],"text":""},"desc":"Remove the console.warn()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1049,"column":4,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1049,"endColumn":15,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[31045,31093],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1053,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1053,"endColumn":17,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[31146,31200],"text":""},"desc":"Remove the console.warn()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1069,"column":6,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1069,"endColumn":17,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[31617,31664],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1072,"column":6,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1072,"endColumn":17,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[31782,31830],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1076,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1076,"endColumn":17,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[31884,31932],"text":""},"desc":"Remove the console.warn()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1099,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1099,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[32340,32392],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1109,"column":6,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1109,"endColumn":19,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[32760,32849],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1117,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1117,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[32950,32993],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1119,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1119,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[33029,33072],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1120,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1120,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[33075,33128],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1121,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1121,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[33131,33223],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1134,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1134,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[33511,33557],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1137,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1137,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[33586,33633],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1139,"column":4,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1139,"endColumn":15,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[33663,33729],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1141,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1141,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[33785,33946],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1152,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1152,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[33990,34040],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1154,"column":4,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1154,"endColumn":15,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[34085,34303],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1163,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1163,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[34372,34628],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1175,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1175,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[34710,34908],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1186,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1186,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[34952,35008],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1188,"column":4,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1188,"endColumn":15,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[35063,35120],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1189,"column":4,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1189,"endColumn":15,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[35124,35200],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1196,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1196,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[35398,35711],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1206,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1206,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[35728,35785],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":1215,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":1215,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[35956,36020],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":163,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { writable, type Writable } from 'svelte/store';\n\nexport interface VoiceState {\n\tisConnected: boolean;\n\tisRegistered: boolean;\n\tisMuted: boolean;\n\tisDeafened: boolean;\n\tisSpeaking: boolean;\n\tcurrentChannelId: number | null;\n\tpeers: Map<string, RTCPeerConnection>;\n\tlocalStream: MediaStream | null;\n\tremoteStreams: Map<string, MediaStream>;\n\tconnectionQuality: 'excellent' | 'good' | 'poor' | 'disconnected';\n}\n\nexport interface VoiceSettings {\n\tinputDevice: string;\n\toutputDevice: string;\n\tinputVolume: number;\n\toutputVolume: number;\n\tnoiseSuppression: boolean;\n\techoCancellation: boolean;\n\tautoGainControl: boolean;\n\tvoiceActivityDetection: boolean;\n\tpushToTalk: boolean;\n\tpushToTalkKey: string;\n}\n\nexport interface VoicePeer {\n\tuserId: number;\n\tusername: string;\n\tisMuted: boolean;\n\tisDeafened: boolean;\n\tisSpeaking: boolean;\n\tconnectionQuality: 'excellent' | 'good' | 'poor' | 'disconnected';\n}\n\nclass VoiceClient {\n\tprivate ws: WebSocket | null = null;\n\tprivate state: Writable<VoiceState>;\n\tprivate settings: Writable<VoiceSettings>;\n\tprivate peers: Map<string, RTCPeerConnection> = new Map();\n\tprivate localStream: MediaStream | null = null;\n\tprivate remoteStreams: Map<string, MediaStream> = new Map();\n\tprivate voiceActivityDetector: any = null;\n\tprivate speakingTimeout: number | null = null;\n\tprivate reconnectAttempts = 0;\n\tprivate maxReconnectAttempts = 5;\n\tprivate reconnectDelay = 1000;\n\n\tconstructor() {\n\t\tthis.state = writable<VoiceState>({\n\t\t\tisConnected: false,\n\t\t\tisRegistered: false,\n\t\t\tisMuted: false,\n\t\t\tisDeafened: false,\n\t\t\tisSpeaking: false,\n\t\t\tcurrentChannelId: null,\n\t\t\tpeers: new Map(),\n\t\t\tlocalStream: null,\n\t\t\tremoteStreams: new Map(),\n\t\t\tconnectionQuality: 'disconnected'\n\t\t});\n\n\t\tthis.settings = writable<VoiceSettings>({\n\t\t\tinputDevice: '',\n\t\t\toutputDevice: '',\n\t\t\tinputVolume: 100,\n\t\t\toutputVolume: 100,\n\t\t\tnoiseSuppression: true,\n\t\t\techoCancellation: true,\n\t\t\tautoGainControl: true,\n\t\t\tvoiceActivityDetection: true,\n\t\t\tpushToTalk: false,\n\t\t\tpushToTalkKey: 'Space'\n\t\t});\n\n\t\t// Load settings from localStorage\n\t\tthis.loadSettings();\n\n\t\t// Set up page unload handler for proper cleanup\n\t\tthis.setupPageUnloadHandler();\n\t}\n\n\tget stateStore() {\n\t\treturn this.state;\n\t}\n\n\tget settingsStore() {\n\t\treturn this.settings;\n\t}\n\n\tprivate loadSettings() {\n\t\tif (typeof window !== 'undefined') {\n\t\t\tconst saved = localStorage.getItem('voice-settings');\n\t\t\tif (saved) {\n\t\t\t\ttry {\n\t\t\t\t\tconst parsed = JSON.parse(saved);\n\t\t\t\t\tlet currentSettings: VoiceSettings;\n\t\t\t\t\tthis.settings.subscribe(s => currentSettings = s)();\n\t\t\t\t\tthis.settings.set({ ...currentSettings!, ...parsed });\n\t\t\t\t} catch (e) {\n\t\t\t\t\tconsole.error('Failed to load voice settings:', e);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate saveSettings() {\n\t\tif (typeof window !== 'undefined') {\n\t\t\tlet settings: VoiceSettings;\n\t\t\tthis.settings.subscribe(s => settings = s)();\n\t\t\tlocalStorage.setItem('voice-settings', JSON.stringify(settings));\n\t\t}\n\t}\n\n\tgetState(): VoiceState {\n\t\tlet state: VoiceState;\n\t\tthis.state.subscribe(s => state = s)();\n\t\treturn state!;\n\t}\n\n\tgetSettings(): VoiceSettings {\n\t\tlet settings: VoiceSettings;\n\t\tthis.settings.subscribe(s => settings = s)();\n\t\treturn settings!;\n\t}\n\n\tasync connect(token: string, serverUrl: string = ''): Promise<void> {\n\t\tif (this.ws?.readyState === WebSocket.OPEN) {\n\t\t\tconsole.log('Voice WebSocket already connected');\n\t\t\treturn;\n\t\t}\n\n\t\ttry {\n\t\t\tconsole.log('Connecting to voice WebSocket...');\n\t\t\tconsole.log('Token length:', token.length);\n\t\t\t\n\t\t\t// Use relative URL in browser to leverage Vite's proxy\n\t\t\tconst wsUrl = typeof window !== 'undefined' ? `/voice?token=${encodeURIComponent(token)}` : `${serverUrl.replace('https://', 'wss://').replace('http://', 'ws://')}/voice?token=${encodeURIComponent(token)}`;\n\t\t\tconsole.log('Connecting to voice WebSocket:', wsUrl);\n\t\t\t\n\t\t\t// Add connection timeout (reduced from 10s to 5s)\n\t\t\tconst connectionTimeout = setTimeout(() => {\n\t\t\t\tif (this.ws?.readyState === WebSocket.CONNECTING) {\n\t\t\t\t\tconsole.error('Voice WebSocket connection timeout (5s)');\n\t\t\t\t\tthis.ws.close();\n\t\t\t\t}\n\t\t\t}, 5000); // 5 second timeout\n\t\t\t\n\t\t\tthis.ws = new WebSocket(wsUrl);\n\t\t\t\n\t\t\t// Wait for connection to be established\n\t\t\tawait new Promise<void>((resolve, reject) => {\n\t\t\t\tthis.ws!.onopen = () => {\n\t\t\t\t\tconsole.log('Voice WebSocket connected successfully');\n\t\t\t\t\tclearTimeout(connectionTimeout);\n\t\t\t\t\tthis.state.update(s => ({ ...s, isConnected: true, connectionQuality: 'excellent' }));\n\t\t\t\t\tthis.reconnectAttempts = 0;\n\t\t\t\t\tresolve();\n\t\t\t\t};\n\n\t\t\t\tthis.ws!.onerror = (error) => {\n\t\t\t\t\tconsole.error('Voice WebSocket error:', error);\n\t\t\t\t\tclearTimeout(connectionTimeout);\n\t\t\t\t\tthis.state.update(s => ({ ...s, connectionQuality: 'poor' }));\n\t\t\t\t\treject(error);\n\t\t\t\t};\n\n\t\t\t\tthis.ws!.onclose = (event) => {\n\t\t\t\t\tconsole.log('Voice WebSocket disconnected:', event.code, event.reason);\n\t\t\t\t\tclearTimeout(connectionTimeout);\n\t\t\t\t\tthis.state.update(s => ({ ...s, isConnected: false, connectionQuality: 'disconnected' }));\n\t\t\t\t\tthis.handleDisconnect();\n\t\t\t\t\treject(new Error(`WebSocket closed: ${event.code} ${event.reason}`));\n\t\t\t\t};\n\t\t\t});\n\n\t\t\t// Set up message handler after connection is established\n\t\t\tthis.ws.onmessage = (event) => {\n\t\t\t\ttry {\n\t\t\t\t\tconst data = JSON.parse(event.data);\n\t\t\t\t\tthis.handleMessage(data);\n\t\t\t\t} catch (error) {\n\t\t\t\t\tconsole.error('Failed to parse voice message:', error);\n\t\t\t\t}\n\t\t\t};\n\n\t\t} catch (error) {\n\t\t\tconsole.error('Failed to connect to voice server:', error);\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\tprivate handleDisconnect() {\n\t\t// Clean up all peer connections\n\t\tthis.peers.forEach(peer => {\n\t\t\tpeer.close();\n\t\t});\n\t\tthis.peers.clear();\n\t\tthis.remoteStreams.clear();\n\n\t\t// Reset state\n\t\tthis.state.update(s => ({\n\t\t\t...s,\n\t\t\tisConnected: false,\n\t\t\tisRegistered: false,\n\t\t\tconnectionQuality: 'disconnected'\n\t\t}));\n\n\t\t// Attempt to reconnect\n\t\tif (this.reconnectAttempts < this.maxReconnectAttempts) {\n\t\t\tthis.reconnectAttempts++;\n\t\t\tsetTimeout(() => {\n\t\t\t\t// Reconnect logic would go here\n\t\t\t\tconsole.log(`Attempting to reconnect (${this.reconnectAttempts}/${this.maxReconnectAttempts})`);\n\t\t\t}, this.reconnectDelay * this.reconnectAttempts);\n\t\t}\n\t}\n\n\tprivate handleMessage(message: any) {\n\t\tconsole.log('Voice message received:', message);\n\n\t\tswitch (message.type) {\n\t\t\tcase 'connected':\n\t\t\t\tthis.handleConnected(message);\n\t\t\t\tbreak;\n\t\t\tcase 'channel-joined':\n\t\t\t\tthis.handleChannelJoined(message);\n\t\t\t\tbreak;\n\t\t\tcase 'user-joined':\n\t\t\t\tthis.handleUserJoined(message);\n\t\t\t\tbreak;\n\t\t\tcase 'user-left':\n\t\t\t\tthis.handleUserLeft(message);\n\t\t\t\tbreak;\n\t\t\tcase 'offer':\n\t\t\t\tthis.handleOffer(message);\n\t\t\t\tbreak;\n\t\t\tcase 'answer':\n\t\t\t\tthis.handleAnswer(message);\n\t\t\t\tbreak;\n\t\t\tcase 'ice-candidate':\n\t\t\t\tthis.handleIceCandidate(message);\n\t\t\t\tbreak;\n\t\t\tcase 'mute':\n\t\t\tcase 'unmute':\n\t\t\tcase 'deafen':\n\t\t\tcase 'undeafen':\n\t\t\t\tthis.handleVoiceStateChange(message);\n\t\t\t\tbreak;\n\t\t\tcase 'speaking':\n\t\t\t\tthis.handleSpeaking(message);\n\t\t\t\tbreak;\n\t\t\tcase 'ping':\n\t\t\t\t// Respond to ping with pong\n\t\t\t\tthis.sendMessage({\n\t\t\t\t\ttype: 'pong',\n\t\t\t\t\ttimestamp: new Date().toISOString()\n\t\t\t\t});\n\t\t\t\tbreak;\n\t\t\tcase 'pong':\n\t\t\t\t// Handle pong response\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tconsole.warn('Unknown voice message type:', message.type);\n\t\t}\n\t}\n\n\tprivate handleConnected(message: any) {\n\t\tconsole.log('Connected to voice server');\n\t\t// Mark as fully registered and ready to join channels\n\t\tthis.state.update(s => ({ ...s, isRegistered: true }));\n\t}\n\n\tprivate async handleChannelJoined(message: any) {\n\t\tconsole.log('Received channel-joined message:', message);\n\t\tconst { channel_id, server_id, channel_name, clients } = message.data;\n\t\t\n\t\tthis.state.update(s => ({\n\t\t\t...s,\n\t\t\tcurrentChannelId: channel_id,\n\t\t\tisConnected: true\n\t\t}));\n\n\t\tconsole.log(`Joined voice channel: ${channel_name} (${channel_id})`);\n\t\tconsole.log('Current state after joining:', this.getState());\n\t\tconsole.log('Existing clients in channel:', clients);\n\t\t\n\t\t// Initialize peer connections for existing clients and create offers\n\t\tfor (const client of clients) {\n\t\t\tif (client.user_id !== message.user_id) {\n\t\t\t\tconsole.log(`Setting up peer connection for existing client ${client.user_id}`);\n\t\t\t\tconst peer = this.createPeerConnection(client.user_id.toString());\n\t\t\t\t\n\t\t\t\t// If we have a local stream, create and send an offer\n\t\t\t\tif (this.localStream) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tconsole.log(`Creating offer for existing client ${client.user_id} with local stream:`, this.localStream);\n\t\t\t\t\t\tconst offer = await peer.createOffer();\n\t\t\t\t\t\tconsole.log(`Offer created for existing client ${client.user_id}:`, offer);\n\t\t\t\t\t\tawait peer.setLocalDescription(offer);\n\t\t\t\t\t\t\n\t\t\t\t\t\tthis.sendMessage({\n\t\t\t\t\t\t\ttype: 'offer',\n\t\t\t\t\t\t\ttarget_id: client.user_id,\n\t\t\t\t\t\t\tdata: offer\n\t\t\t\t\t\t});\n\t\t\t\t\t\tconsole.log(`Offer sent to existing client ${client.user_id}`);\n\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\tconsole.error('Error creating offer for existing client:', error);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tconsole.warn(`No local stream available for existing client ${client.user_id}`);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate async handleUserJoined(message: any) {\n\t\tconst peerId = message.user_id.toString();\n\t\tconsole.log(`User ${peerId} joined, creating peer connection`);\n\t\t\n\t\tconst peer = this.createPeerConnection(peerId);\n\t\t\n\t\t// If we have a local stream, create and send an offer\n\t\tif (this.localStream) {\n\t\t\ttry {\n\t\t\t\tconsole.log(`Creating offer for new user ${peerId} with local stream:`, this.localStream);\n\t\t\t\tconst offer = await peer.createOffer();\n\t\t\t\tconsole.log(`Offer created for user ${peerId}:`, offer);\n\t\t\t\tawait peer.setLocalDescription(offer);\n\t\t\t\t\n\t\t\t\tthis.sendMessage({\n\t\t\t\t\ttype: 'offer',\n\t\t\t\t\ttarget_id: message.user_id,\n\t\t\t\t\tdata: offer\n\t\t\t\t});\n\t\t\t\tconsole.log(`Offer sent to user ${peerId}`);\n\t\t\t} catch (error) {\n\t\t\t\tconsole.error('Error creating offer:', error);\n\t\t\t}\n\t\t} else {\n\t\t\tconsole.warn(`No local stream available when user ${peerId} joined`);\n\t\t}\n\t}\n\n\tprivate handleUserLeft(message: any) {\n\t\tconst peerId = message.user_id.toString();\n\t\tthis.removePeerConnection(peerId);\n\t}\n\n\tprivate async handleOffer(message: any) {\n\t\tconst peerId = message.user_id.toString();\n\t\tlet peer = this.peers.get(peerId);\n\t\t\n\t\t// Create peer connection if it doesn't exist\n\t\tif (!peer) {\n\t\t\tconsole.log('Creating peer connection for incoming offer from:', peerId);\n\t\t\tpeer = this.createPeerConnection(peerId);\n\t\t}\n\n\t\ttry {\n\t\t\tconsole.log('Setting remote description for offer from:', peerId);\n\t\t\tawait peer.setRemoteDescription(new RTCSessionDescription(message.data));\n\t\t\tconst answer = await peer.createAnswer();\n\t\t\tawait peer.setLocalDescription(answer);\n\t\t\t\n\t\t\tconsole.log('Sending answer to:', peerId);\n\t\t\tthis.sendMessage({\n\t\t\t\ttype: 'answer',\n\t\t\t\ttarget_id: message.user_id,\n\t\t\t\tdata: answer\n\t\t\t});\n\t\t} catch (error) {\n\t\t\tconsole.error('Error handling offer:', error);\n\t\t}\n\t}\n\n\tprivate async handleAnswer(message: any) {\n\t\tconst peerId = message.user_id.toString();\n\t\tconst peer = this.peers.get(peerId);\n\t\t\n\t\tif (!peer) {\n\t\t\tconsole.warn('Received answer for unknown peer:', peerId);\n\t\t\treturn;\n\t\t}\n\n\t\ttry {\n\t\t\tconsole.log(`Setting remote description (answer) for peer ${peerId}`);\n\t\t\tawait peer.setRemoteDescription(new RTCSessionDescription(message.data));\n\t\t} catch (error) {\n\t\t\tconsole.error('Error handling answer:', error);\n\t\t}\n\t}\n\n\tprivate async handleIceCandidate(message: any) {\n\t\tconst peerId = message.user_id.toString();\n\t\tconst peer = this.peers.get(peerId);\n\t\t\n\t\tif (!peer) {\n\t\t\tconsole.warn('Received ICE candidate for unknown peer:', peerId);\n\t\t\treturn;\n\t\t}\n\n\t\ttry {\n\t\t\tconsole.log(`Adding ICE candidate from peer ${peerId}:`, message.data.type);\n\t\t\tawait peer.addIceCandidate(new RTCIceCandidate(message.data));\n\t\t} catch (error) {\n\t\t\tconsole.error('Error handling ICE candidate:', error);\n\t\t}\n\t}\n\n\tprivate handleVoiceStateChange(message: any) {\n\t\t// Update peer state\n\t\tconst peerId = message.user_id.toString();\n\t\t// This would update the peer's mute/deafen state in the UI\n\t\tconsole.log(`Peer ${message.username} ${message.type}`);\n\t}\n\n\tprivate handleSpeaking(message: any) {\n\t\tconst peerId = message.user_id.toString();\n\t\tconst isSpeaking = message.data;\n\t\t\n\t\t// Update peer speaking state in the UI\n\t\tconsole.log(`Peer ${message.username} ${isSpeaking ? 'started' : 'stopped'} speaking`);\n\t}\n\n\tprivate sendMessage(message: any) {\n\t\tconsole.log('Sending voice message:', message);\n\t\tif (this.ws?.readyState === WebSocket.OPEN) {\n\t\t\tconst messageStr = JSON.stringify(message);\n\t\t\tconsole.log('Sending WebSocket message:', messageStr);\n\t\t\ttry {\n\t\t\t\tthis.ws.send(messageStr);\n\t\t\t\tconsole.log('Voice message sent successfully');\n\t\t\t} catch (error) {\n\t\t\t\tconsole.error('Failed to send voice message:', error);\n\t\t\t}\n\t\t} else {\n\t\t\tconsole.warn('Voice WebSocket not connected. State:', this.ws?.readyState);\n\t\t}\n\t}\n\n\tasync joinChannel(channelId: number, serverId: number): Promise<void> {\n\t\tconsole.log('Attempting to join voice channel:', channelId, 'server:', serverId);\n\t\tconsole.log('WebSocket state:', this.ws?.readyState);\n\t\t\n\t\tif (!this.ws || this.ws.readyState !== WebSocket.OPEN) {\n\t\t\tconsole.error('Voice WebSocket not connected. State:', this.ws?.readyState);\n\t\t\tthrow new Error('Voice WebSocket not connected');\n\t\t}\n\n\t\t// Wait for registration to complete\n\t\tconst state = this.getState();\n\t\tif (!state.isRegistered) {\n\t\t\tconsole.log('Waiting for registration to complete...');\n\t\t\tawait new Promise<void>((resolve) => {\n\t\t\t\tconst unsubscribe = this.state.subscribe((s) => {\n\t\t\t\t\tif (s.isRegistered) {\n\t\t\t\t\t\tunsubscribe();\n\t\t\t\t\t\tresolve();\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\t\n\t\t\t\t// Timeout after 5 seconds\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\tunsubscribe();\n\t\t\t\t\tresolve();\n\t\t\t\t}, 5000);\n\t\t\t});\n\t\t}\n\n\t\t// Start local stream first if not already started\n\t\tif (!this.localStream) {\n\t\t\tconsole.log('Starting local stream...');\n\t\t\tawait this.startLocalStream();\n\t\t}\n\n\t\tconsole.log('Sending join-channel message...');\n\t\tconst joinMessage = {\n\t\t\ttype: 'join-channel',\n\t\t\tchannel_id: channelId,\n\t\t\tserver_id: serverId\n\t\t};\n\t\tconsole.log('Join message:', joinMessage);\n\t\tthis.sendMessage(joinMessage);\n\t\tconsole.log('Join message sent successfully');\n\t}\n\n\tasync leaveChannel(): Promise<void> {\n\t\tconst state = this.getState();\n\t\tif (!state.currentChannelId) {\n\t\t\tconsole.log('No channel to leave');\n\t\t\treturn;\n\t\t}\n\n\t\tconsole.log('Leaving voice channel:', state.currentChannelId);\n\n\t\t// Stop voice activity detection first to prevent further speaking messages\n\t\tthis.cleanupVoiceActivityDetection();\n\n\t\t// Send leave message to server if WebSocket is still open\n\t\tif (this.ws?.readyState === WebSocket.OPEN) {\n\t\t\ttry {\n\t\t\t\tthis.sendMessage({\n\t\t\t\t\ttype: 'leave-channel',\n\t\t\t\t\tchannel_id: state.currentChannelId\n\t\t\t\t});\n\t\t\t\tconsole.log('Leave channel message sent to server');\n\t\t\t} catch (error) {\n\t\t\t\tconsole.error('Failed to send leave channel message:', error);\n\t\t\t}\n\t\t}\n\n\t\t// Clean up peer connections\n\t\tthis.peers.forEach((peer, peerId) => {\n\t\t\tconsole.log('Closing peer connection:', peerId);\n\t\t\ttry {\n\t\t\t\tpeer.close();\n\t\t\t} catch (error) {\n\t\t\t\tconsole.warn('Error closing peer connection:', error);\n\t\t\t}\n\t\t\t// Remove audio element for this peer\n\t\t\tconst audioElement = document.getElementById(`remote-audio-${peerId}`);\n\t\t\tif (audioElement) {\n\t\t\t\taudioElement.remove();\n\t\t\t}\n\t\t});\n\t\tthis.peers.clear();\n\t\tthis.remoteStreams.clear();\n\n\t\t// Stop local stream\n\t\tif (this.localStream) {\n\t\t\tthis.localStream.getTracks().forEach(track => {\n\t\t\t\tconsole.log('Stopping local audio track');\n\t\t\t\ttry {\n\t\t\t\t\ttrack.stop();\n\t\t\t\t} catch (error) {\n\t\t\t\t\tconsole.warn('Error stopping local audio track:', error);\n\t\t\t\t}\n\t\t\t});\n\t\t\tthis.localStream = null;\n\t\t}\n\n\t\t// Update state immediately - reset everything\n\t\tthis.state.update(s => ({\n\t\t\t...s,\n\t\t\tcurrentChannelId: null,\n\t\t\tpeers: new Map(),\n\t\t\tremoteStreams: new Map(),\n\t\t\tlocalStream: null,\n\t\t\tisSpeaking: false,\n\t\t\tisConnected: false,\n\t\t\tisRegistered: false,\n\t\t\tconnectionQuality: 'disconnected'\n\t\t}));\n\n\t\tconsole.log('Successfully left voice channel');\n\t}\n\n\tasync startLocalStream(): Promise<MediaStream | null> {\n\t\ttry {\n\t\t\t// Check if MediaDevices API is available\n\t\t\tif (!navigator.mediaDevices || !navigator.mediaDevices.getUserMedia) {\n\t\t\t\tthrow new Error('MediaDevices API not available. Please use HTTPS or grant microphone permissions.');\n\t\t\t}\n\n\t\t\tconst settings = this.getSettings();\n\t\t\tconsole.log('Starting local stream with settings:', settings);\n\t\t\t\n\t\t\tconst stream = await navigator.mediaDevices.getUserMedia({\n\t\t\t\taudio: {\n\t\t\t\t\tnoiseSuppression: settings.noiseSuppression,\n\t\t\t\t\techoCancellation: settings.echoCancellation,\n\t\t\t\t\tautoGainControl: settings.autoGainControl,\n\t\t\t\t\t// Add additional audio constraints for better quality\n\t\t\t\t\tsampleRate: 48000,\n\t\t\t\t\tchannelCount: 1,\n\t\t\t\t\tvolume: settings.inputVolume / 100\n\t\t\t\t},\n\t\t\t\tvideo: false\n\t\t\t});\n\n\t\t\tconsole.log('Local stream obtained:', stream);\n\t\t\tconsole.log('Audio tracks:', stream.getAudioTracks());\n\t\t\tconsole.log('Video tracks:', stream.getVideoTracks());\n\n\t\t\tthis.localStream = stream;\n\t\t\tthis.state.update(s => ({ ...s, localStream: stream }));\n\n\t\t\t// Start voice activity detection if enabled\n\t\t\tif (settings.voiceActivityDetection) {\n\t\t\t\tthis.setupVoiceActivityDetection(stream);\n\t\t\t}\n\n\t\t\tconsole.log('✅ Local audio stream started successfully');\n\t\t\treturn stream;\n\t\t} catch (error) {\n\t\t\tconsole.error('Failed to start local stream:', error);\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\tprivate setupVoiceActivityDetection(stream: MediaStream) {\n\t\tif (!window.AudioContext && !(window as any).webkitAudioContext) {\n\t\t\tconsole.warn('AudioContext not supported, voice activity detection disabled');\n\t\t\treturn;\n\t\t}\n\n\t\ttry {\n\t\t\tconst audioContext = new (window.AudioContext || (window as any).webkitAudioContext)();\n\t\t\tconst analyser = audioContext.createAnalyser();\n\t\t\tconst microphone = audioContext.createMediaStreamSource(stream);\n\t\t\t\n\t\t\t// Check if ScriptProcessor is supported\n\t\t\tif (!audioContext.createScriptProcessor) {\n\t\t\t\tconsole.warn('ScriptProcessor not supported, using basic analyser for voice activity detection');\n\t\t\t\t// Fallback to basic analyser\n\t\t\t\tanalyser.smoothingTimeConstant = 0.8;\n\t\t\t\tanalyser.fftSize = 1024;\n\t\t\t\t\n\t\t\t\tmicrophone.connect(analyser);\n\t\t\t\t\n\t\t\t\tconst dataArray = new Uint8Array(analyser.frequencyBinCount);\n\t\t\t\tlet lastSpeakingState = false;\n\t\t\t\t\n\t\t\t\tconst checkAudioLevel = () => {\n\t\t\t\t\tanalyser.getByteFrequencyData(dataArray);\n\t\t\t\t\tconst average = dataArray.reduce((a, b) => a + b) / dataArray.length;\n\t\t\t\t\tconst threshold = 50; // Increased threshold to reduce sensitivity\n\t\t\t\t\tconst isSpeaking = average > threshold;\n\t\t\t\t\t\n\t\t\t\t\t// Only log when state changes to reduce console spam\n\t\t\t\t\tif (isSpeaking !== lastSpeakingState) {\n\t\t\t\t\t\tconsole.log('Voice activity changed:', { average, threshold, isSpeaking });\n\t\t\t\t\t\tlastSpeakingState = isSpeaking;\n\t\t\t\t\t\tthis.setSpeaking(isSpeaking);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t// Continue checking\n\t\t\t\t\trequestAnimationFrame(checkAudioLevel);\n\t\t\t\t};\n\t\t\t\t\n\t\t\t\tcheckAudioLevel();\n\t\t\t\t\n\t\t\t\tthis.voiceActivityDetector = { audioContext, analyser, microphone, checkAudioLevel };\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t\n\t\t\tconst scriptProcessor = audioContext.createScriptProcessor(2048, 1, 1);\n\n\t\t\tanalyser.smoothingTimeConstant = 0.8;\n\t\t\tanalyser.fftSize = 1024;\n\n\t\t\tmicrophone.connect(analyser);\n\t\t\tanalyser.connect(scriptProcessor);\n\t\t\tscriptProcessor.connect(audioContext.destination);\n\n\t\t\tconst dataArray = new Uint8Array(analyser.frequencyBinCount);\n\t\t\tlet lastSpeakingState = false;\n\n\t\t\tscriptProcessor.onaudioprocess = () => {\n\t\t\t\tanalyser.getByteFrequencyData(dataArray);\n\t\t\t\t\n\t\t\t\t// Calculate average volume\n\t\t\t\tconst average = dataArray.reduce((a, b) => a + b) / dataArray.length;\n\t\t\t\t\n\t\t\t\t// Threshold for voice activity (increased to reduce sensitivity)\n\t\t\t\tconst threshold = 50;\n\t\t\t\tconst isSpeaking = average > threshold;\n\n\t\t\t\t// Only log when state changes to reduce console spam\n\t\t\t\tif (isSpeaking !== lastSpeakingState) {\n\t\t\t\t\tconsole.log('Voice activity changed (ScriptProcessor):', { average, threshold, isSpeaking });\n\t\t\t\t\tlastSpeakingState = isSpeaking;\n\t\t\t\t\tthis.setSpeaking(isSpeaking);\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tthis.voiceActivityDetector = { audioContext, analyser, microphone, scriptProcessor };\n\t\t\tconsole.log('Voice activity detection setup complete');\n\t\t} catch (error) {\n\t\t\tconsole.error('Failed to setup voice activity detection:', error);\n\t\t}\n\t}\n\n\tprivate cleanupVoiceActivityDetection() {\n\t\t// Clear speaking timeout\n\t\tif (this.speakingTimeout) {\n\t\t\tclearTimeout(this.speakingTimeout);\n\t\t\tthis.speakingTimeout = null;\n\t\t}\n\n\t\t// Clean up voice activity detector\n\t\tif (this.voiceActivityDetector) {\n\t\t\ttry {\n\t\t\t\tif (this.voiceActivityDetector.scriptProcessor) {\n\t\t\t\t\tthis.voiceActivityDetector.scriptProcessor.disconnect();\n\t\t\t\t}\n\t\t\t\tif (this.voiceActivityDetector.microphone) {\n\t\t\t\t\tthis.voiceActivityDetector.microphone.disconnect();\n\t\t\t\t}\n\t\t\t\tif (this.voiceActivityDetector.audioContext) {\n\t\t\t\t\tthis.voiceActivityDetector.audioContext.close();\n\t\t\t\t}\n\t\t\t\tconsole.log('Voice activity detection cleaned up');\n\t\t\t} catch (error) {\n\t\t\t\tconsole.warn('Error cleaning up voice activity detection:', error);\n\t\t\t}\n\t\t\tthis.voiceActivityDetector = null;\n\t\t}\n\n\t\t// Reset speaking state\n\t\tthis.state.update(s => ({ ...s, isSpeaking: false }));\n\t}\n\n\tprivate playRemoteAudio(stream: MediaStream, peerId: string) {\n\t\ttry {\n\t\t\tconsole.log(`Setting up audio playback for peer ${peerId} with stream:`, stream);\n\t\t\tconsole.log(`Stream tracks:`, stream.getTracks());\n\t\t\t\n\t\t\t// Create audio element for this peer\n\t\t\tconst audio = document.createElement('audio');\n\t\t\taudio.id = `remote-audio-${peerId}`;\n\t\t\taudio.autoplay = true;\n\t\t\taudio.playsInline = true;\n\t\t\taudio.controls = false; // Hide controls\n\t\t\t\n\t\t\t// Set the stream as the audio source\n\t\t\taudio.srcObject = stream;\n\t\t\t\n\t\t\t// Add to DOM (hidden)\n\t\t\taudio.style.display = 'none';\n\t\t\tdocument.body.appendChild(audio);\n\t\t\t\n\t\t\t// Handle audio play errors\n\t\t\taudio.onerror = (error) => {\n\t\t\t\tconsole.error('Error playing remote audio for peer', peerId, ':', error);\n\t\t\t};\n\t\t\t\n\t\t\t// Handle audio play success\n\t\t\taudio.onplay = () => {\n\t\t\t\tconsole.log('Successfully playing remote audio for peer:', peerId);\n\t\t\t};\n\t\t\t\n\t\t\t// Handle audio ended\n\t\t\taudio.onended = () => {\n\t\t\t\tconsole.log('Remote audio ended for peer:', peerId);\n\t\t\t\t// Remove audio element\n\t\t\t\tif (audio.parentNode) {\n\t\t\t\t\taudio.parentNode.removeChild(audio);\n\t\t\t\t}\n\t\t\t};\n\t\t\t\n\t\t\t// Handle audio load start\n\t\t\taudio.onloadstart = () => {\n\t\t\t\tconsole.log('Audio loading started for peer:', peerId);\n\t\t\t};\n\t\t\t\n\t\t\t// Handle audio can play\n\t\t\taudio.oncanplay = () => {\n\t\t\t\tconsole.log('Audio can play for peer:', peerId);\n\t\t\t\t// Try to play the audio\n\t\t\t\taudio.play().catch(error => {\n\t\t\t\t\tconsole.error('Failed to autoplay audio for peer', peerId, ':', error);\n\t\t\t\t\t// This might be due to browser autoplay policy\n\t\t\t\t\tconsole.log('Audio autoplay blocked. User interaction required.');\n\t\t\t\t});\n\t\t\t};\n\t\t\t\n\t\t\t// Handle audio playing\n\t\t\taudio.onplaying = () => {\n\t\t\t\tconsole.log('Audio is now playing for peer:', peerId);\n\t\t\t};\n\t\t\t\n\t\t\t// Handle audio pause\n\t\t\taudio.onpause = () => {\n\t\t\t\tconsole.log('Audio paused for peer:', peerId);\n\t\t\t};\n\t\t\t\n\t\t\t// Handle audio volume change\n\t\t\taudio.onvolumechange = () => {\n\t\t\t\tconsole.log('Audio volume changed for peer:', peerId, 'volume:', audio.volume);\n\t\t\t};\n\t\t\t\n\t\t\tconsole.log('Created audio element for peer:', peerId);\n\t\t} catch (error) {\n\t\t\tconsole.error('Error setting up remote audio playback for peer', peerId, ':', error);\n\t\t}\n\t}\n\n\tprivate createPeerConnection(peerId: string): RTCPeerConnection {\n\t\tconst peer = new RTCPeerConnection({\n\t\t\ticeServers: [\n\t\t\t\t{ urls: 'stun:stun.l.google.com:19302' },\n\t\t\t\t{ urls: 'stun:stun1.l.google.com:19302' }\n\t\t\t],\n\t\t\t// Add important WebRTC configuration\n\t\t\tbundlePolicy: 'max-bundle',\n\t\t\trtcpMuxPolicy: 'require',\n\t\t\tsdpSemantics: 'unified-plan'\n\t\t});\n\n\t\tconsole.log(`Creating peer connection for ${peerId} with local stream:`, this.localStream);\n\n\t\t// Add local stream tracks if available\n\t\tif (this.localStream) {\n\t\t\tconsole.log(`Adding ${this.localStream.getTracks().length} tracks to peer ${peerId}`);\n\t\t\tthis.localStream.getTracks().forEach(track => {\n\t\t\t\tconsole.log(`Adding track to peer ${peerId}:`, track.kind, track.id);\n\t\t\t\tconst sender = peer.addTrack(track, this.localStream!);\n\t\t\t\tconsole.log(`Track sender created for peer ${peerId}:`, sender);\n\t\t\t});\n\t\t} else {\n\t\t\tconsole.warn(`No local stream available when creating peer connection for ${peerId}`);\n\t\t}\n\n\t\t// Handle incoming tracks\n\t\tpeer.ontrack = (event) => {\n\t\t\tconsole.log(`Received remote stream from peer ${peerId}:`, event);\n\t\t\tconsole.log(`Track kind: ${event.track.kind}, track id: ${event.track.id}`);\n\t\t\tconsole.log(`Streams count: ${event.streams.length}`);\n\t\t\t\n\t\t\tif (event.streams && event.streams.length > 0) {\n\t\t\t\tconst stream = event.streams[0];\n\t\t\t\tconsole.log(`Setting remote stream for peer ${peerId}:`, stream);\n\t\t\t\tthis.remoteStreams.set(peerId, stream);\n\t\t\t\tthis.state.update(s => ({\n\t\t\t\t\t...s,\n\t\t\t\t\tremoteStreams: new Map(this.remoteStreams)\n\t\t\t\t}));\n\t\t\t\t\n\t\t\t\t// Play the remote audio\n\t\t\t\tthis.playRemoteAudio(stream, peerId);\n\t\t\t} else {\n\t\t\t\tconsole.warn(`No streams in track event for peer ${peerId}`);\n\t\t\t}\n\t\t};\n\n\t\t// Handle ICE candidates\n\t\tpeer.onicecandidate = (event) => {\n\t\t\tif (event.candidate) {\n\t\t\t\tconsole.log(`Sending ICE candidate to peer ${peerId}:`, event.candidate.type);\n\t\t\t\tthis.sendMessage({\n\t\t\t\t\ttype: 'ice-candidate',\n\t\t\t\t\ttarget_id: parseInt(peerId),\n\t\t\t\t\tdata: event.candidate\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tconsole.log(`ICE candidate gathering completed for peer ${peerId}`);\n\t\t\t}\n\t\t};\n\n\t\t// Handle connection state changes\n\t\tpeer.onconnectionstatechange = () => {\n\t\t\tconsole.log(`Peer ${peerId} connection state:`, peer.connectionState);\n\t\t\t\n\t\t\tif (peer.connectionState === 'connected') {\n\t\t\t\tconsole.log(`✅ WebRTC connection established with peer ${peerId}`);\n\t\t\t\tthis.state.update(s => ({ ...s, connectionQuality: 'excellent' }));\n\t\t\t} else if (peer.connectionState === 'failed' || peer.connectionState === 'disconnected') {\n\t\t\t\tconsole.log(`❌ WebRTC connection failed/disconnected with peer ${peerId}`);\n\t\t\t\tthis.state.update(s => ({ ...s, connectionQuality: 'poor' }));\n\t\t\t}\n\t\t};\n\n\t\t// Handle ICE connection state changes\n\t\tpeer.oniceconnectionstatechange = () => {\n\t\t\tconsole.log(`Peer ${peerId} ICE connection state:`, peer.iceConnectionState);\n\t\t};\n\n\t\t// Handle ICE gathering state changes\n\t\tpeer.onicegatheringstatechange = () => {\n\t\t\tconsole.log(`Peer ${peerId} ICE gathering state:`, peer.iceGatheringState);\n\t\t};\n\n\t\tthis.peers.set(peerId, peer);\n\t\tthis.state.update(s => ({\n\t\t\t...s,\n\t\t\tpeers: new Map(this.peers)\n\t\t}));\n\n\t\treturn peer;\n\t}\n\n\tprivate removePeerConnection(peerId: string) {\n\t\tconst peer = this.peers.get(peerId);\n\t\tif (peer) {\n\t\t\tpeer.close();\n\t\t\tthis.peers.delete(peerId);\n\t\t\tthis.remoteStreams.delete(peerId);\n\t\t\t\n\t\t\t// Remove audio element for this peer\n\t\t\tconst audioElement = document.getElementById(`remote-audio-${peerId}`);\n\t\t\tif (audioElement) {\n\t\t\t\taudioElement.remove();\n\t\t\t\tconsole.log('Removed audio element for peer:', peerId);\n\t\t\t}\n\t\t\t\n\t\t\tthis.state.update(s => ({\n\t\t\t\t...s,\n\t\t\t\tpeers: new Map(this.peers),\n\t\t\t\tremoteStreams: new Map(this.remoteStreams)\n\t\t\t}));\n\t\t}\n\t}\n\n\tsetMuted(muted: boolean): void {\n\t\tif (this.localStream) {\n\t\t\tthis.localStream.getAudioTracks().forEach(track => {\n\t\t\t\ttrack.enabled = !muted;\n\t\t\t});\n\t\t}\n\n\t\tthis.state.update(s => ({ ...s, isMuted: muted }));\n\n\t\t// Get current state to include channel information\n\t\tconst state = this.getState();\n\n\t\tthis.sendMessage({\n\t\t\ttype: muted ? 'mute' : 'unmute',\n\t\t\tchannel_id: state.currentChannelId || 0\n\t\t});\n\t}\n\n\tsetDeafened(deafened: boolean): void {\n\t\tthis.state.update(s => ({ ...s, isDeafened: deafened }));\n\n\t\t// Mute/unmute all remote audio elements\n\t\tthis.peers.forEach((peer, peerId) => {\n\t\t\tconst audioElement = document.getElementById(`remote-audio-${peerId}`) as HTMLAudioElement;\n\t\t\tif (audioElement) {\n\t\t\t\taudioElement.muted = deafened;\n\t\t\t}\n\t\t});\n\n\t\t// Get current state to include channel information\n\t\tconst state = this.getState();\n\n\t\tthis.sendMessage({\n\t\t\ttype: deafened ? 'deafen' : 'undeafen',\n\t\t\tchannel_id: state.currentChannelId || 0\n\t\t});\n\t}\n\n\tprivate setSpeaking(speaking: boolean): void {\n\t\tthis.state.update(s => ({ ...s, isSpeaking: speaking }));\n\n\t\t// Clear existing timeout\n\t\tif (this.speakingTimeout) {\n\t\t\tclearTimeout(this.speakingTimeout);\n\t\t}\n\n\t\t// Get current state to include channel information\n\t\tconst state = this.getState();\n\t\t\n\t\t// Only log when state changes to reduce console spam\n\t\tif (speaking !== state.isSpeaking) {\n\t\t\tconsole.log('setSpeaking called:', { \n\t\t\t\tspeaking, \n\t\t\t\tstate: { \n\t\t\t\t\tisConnected: state.isConnected, \n\t\t\t\t\tisRegistered: state.isRegistered,\n\t\t\t\t\tcurrentChannelId: state.currentChannelId, \n\t\t\t\t\twsState: this.ws?.readyState \n\t\t\t\t} \n\t\t\t});\n\t\t}\n\t\t\n\t\t// Only send speaking messages if we're registered, in a channel, and WebSocket is open\n\t\tif (state.isRegistered && state.currentChannelId && this.ws?.readyState === WebSocket.OPEN) {\n\t\t\tconsole.log('Sending speaking message with channel_id:', state.currentChannelId);\n\t\t\tthis.sendMessage({\n\t\t\t\ttype: 'speaking',\n\t\t\t\tchannel_id: state.currentChannelId,\n\t\t\t\tdata: speaking\n\t\t\t});\n\t\t} else {\n\t\t\tconsole.log('Not sending speaking message - conditions not met:', {\n\t\t\t\tisRegistered: state.isRegistered,\n\t\t\t\tcurrentChannelId: state.currentChannelId,\n\t\t\t\twsState: this.ws?.readyState\n\t\t\t});\n\t\t}\n\n\t\t// Auto-stop speaking after 300ms of silence (reduced from 500ms)\n\t\tif (speaking) {\n\t\t\tthis.speakingTimeout = window.setTimeout(() => {\n\t\t\t\tthis.setSpeaking(false);\n\t\t\t}, 300);\n\t\t}\n\t}\n\n\tupdateSettings(newSettings: Partial<VoiceSettings>): void {\n\t\tthis.settings.update(s => ({ ...s, ...newSettings }));\n\t\tthis.saveSettings();\n\n\t\t// Apply settings to current stream\n\t\tif (this.localStream) {\n\t\t\tthis.localStream.getAudioTracks().forEach(track => {\n\t\t\t\tconst settings = track.getSettings();\n\t\t\t\t// Apply new settings if possible\n\t\t\t\t// Note: Some settings require recreating the stream\n\t\t\t});\n\t\t}\n\t}\n\n\tasync getAudioDevices(): Promise<MediaDeviceInfo[]> {\n\t\ttry {\n\t\t\t// Check if MediaDevices API is available\n\t\t\tif (!navigator.mediaDevices || !navigator.mediaDevices.enumerateDevices) {\n\t\t\t\tconsole.warn('MediaDevices API not available');\n\t\t\t\treturn [];\n\t\t\t}\n\n\t\t\t// Request permission first\n\t\t\tawait navigator.mediaDevices.getUserMedia({ audio: true });\n\t\t\t\n\t\t\tconst devices = await navigator.mediaDevices.enumerateDevices();\n\t\t\treturn devices.filter(device => device.kind === 'audioinput' || device.kind === 'audiooutput');\n\t\t} catch (error) {\n\t\t\tconsole.error('Failed to get audio devices:', error);\n\t\t\treturn [];\n\t\t}\n\t}\n\n\tdisconnect(): void {\n\t\tconsole.log('Disconnecting voice client completely...');\n\t\t\n\t\t// Stop voice activity detection first\n\t\tthis.cleanupVoiceActivityDetection();\n\t\t\n\t\t// Stop local stream\n\t\tif (this.localStream) {\n\t\t\tthis.localStream.getTracks().forEach(track => {\n\t\t\t\tconsole.log('Stopping local audio track');\n\t\t\t\ttry {\n\t\t\t\t\ttrack.stop();\n\t\t\t\t} catch (error) {\n\t\t\t\t\tconsole.warn('Error stopping local audio track:', error);\n\t\t\t\t}\n\t\t\t});\n\t\t\tthis.localStream = null;\n\t\t}\n\n\t\t// Clean up all peer connections and audio elements\n\t\tthis.peers.forEach((peer, peerId) => {\n\t\t\tconsole.log('Closing peer connection:', peerId);\n\t\t\ttry {\n\t\t\t\tpeer.close();\n\t\t\t} catch (error) {\n\t\t\t\tconsole.warn('Error closing peer connection:', error);\n\t\t\t}\n\t\t\t// Remove audio element for this peer\n\t\t\tconst audioElement = document.getElementById(`remote-audio-${peerId}`);\n\t\t\tif (audioElement) {\n\t\t\t\taudioElement.remove();\n\t\t\t}\n\t\t});\n\t\tthis.peers.clear();\n\t\tthis.remoteStreams.clear();\n\n\t\t// Close WebSocket connection properly\n\t\tif (this.ws) {\n\t\t\ttry {\n\t\t\t\t// Send a close message if the connection is still open\n\t\t\t\tif (this.ws.readyState === WebSocket.OPEN) {\n\t\t\t\t\tconsole.log('Closing WebSocket connection...');\n\t\t\t\t\tthis.ws.close(1000, 'Client disconnecting');\n\t\t\t\t} else if (this.ws.readyState === WebSocket.CONNECTING) {\n\t\t\t\t\tconsole.log('Aborting WebSocket connection...');\n\t\t\t\t\tthis.ws.close();\n\t\t\t\t}\n\t\t\t} catch (error) {\n\t\t\t\tconsole.warn('Error closing WebSocket:', error);\n\t\t\t}\n\t\t\tthis.ws = null;\n\t\t}\n\n\t\t// Reset all state\n\t\tthis.state.update(s => ({\n\t\t\t...s,\n\t\t\tisConnected: false,\n\t\t\tisRegistered: false,\n\t\t\tisMuted: false,\n\t\t\tisDeafened: false,\n\t\t\tisSpeaking: false,\n\t\t\tcurrentChannelId: null,\n\t\t\tpeers: new Map(),\n\t\t\tlocalStream: null,\n\t\t\tremoteStreams: new Map(),\n\t\t\tconnectionQuality: 'disconnected'\n\t\t}));\n\n\t\t// Reset reconnection attempts\n\t\tthis.reconnectAttempts = 0;\n\n\t\tconsole.log('Voice client disconnected completely');\n\t}\n\n\t// Method to handle audio autoplay issues\n\thandleAudioAutoplay(): void {\n\t\t// Try to play all existing remote audio streams\n\t\tthis.remoteStreams.forEach((stream, peerId) => {\n\t\t\tconst audioElement = document.getElementById(`remote-audio-${peerId}`) as HTMLAudioElement;\n\t\t\tif (audioElement && audioElement.paused) {\n\t\t\t\taudioElement.play().catch(error => {\n\t\t\t\t\tconsole.error('Failed to play audio for peer', peerId, 'after user interaction:', error);\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t}\n\n\t// Method to manually test speaking functionality\n\ttestSpeaking(): void {\n\t\tconsole.log('=== Voice Speaking Test ===');\n\t\tconst state = this.getState();\n\t\tconsole.log('Current voice state:', state);\n\t\tconsole.log('WebSocket state:', this.ws?.readyState);\n\t\tconsole.log('Voice activity detector:', this.voiceActivityDetector ? 'Active' : 'Inactive');\n\t\t\n\t\t// Test sending a speaking message\n\t\tthis.setSpeaking(true);\n\t\t\n\t\t// Test stopping speaking after 1 second\n\t\tsetTimeout(() => {\n\t\t\tthis.setSpeaking(false);\n\t\t}, 1000);\n\t}\n\n\t// Method to test WebRTC connections and audio transmission\n\tasync testWebRTCConnection(): Promise<void> {\n\t\tconsole.log('=== WebRTC Connection Test ===');\n\t\t\n\t\t// Test local stream\n\t\tconsole.log('Local stream:', this.localStream);\n\t\tif (this.localStream) {\n\t\t\tconsole.log('Local stream tracks:', this.localStream.getTracks());\n\t\t\tthis.localStream.getTracks().forEach(track => {\n\t\t\t\tconsole.log('Track:', {\n\t\t\t\t\tkind: track.kind,\n\t\t\t\t\tid: track.id,\n\t\t\t\t\tenabled: track.enabled,\n\t\t\t\t\tmuted: track.muted,\n\t\t\t\t\treadyState: track.readyState\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\t\t\n\t\t// Test peer connections\n\t\tconsole.log('Peer connections:', this.peers.size);\n\t\tthis.peers.forEach((peer, peerId) => {\n\t\t\tconsole.log(`Peer ${peerId}:`, {\n\t\t\t\tconnectionState: peer.connectionState,\n\t\t\t\ticeConnectionState: peer.iceConnectionState,\n\t\t\t\ticeGatheringState: peer.iceGatheringState,\n\t\t\t\tsignalingState: peer.signalingState\n\t\t\t});\n\t\t\t\n\t\t\t// Test senders\n\t\t\tpeer.getSenders().forEach(sender => {\n\t\t\t\tconsole.log(`Sender for peer ${peerId}:`, {\n\t\t\t\t\ttrack: sender.track ? {\n\t\t\t\t\t\tkind: sender.track.kind,\n\t\t\t\t\t\tid: sender.track.id,\n\t\t\t\t\t\tenabled: sender.track.enabled\n\t\t\t\t\t} : null,\n\t\t\t\t\tdtmfSender: sender.dtmfSender ? 'Available' : 'Not available'\n\t\t\t\t});\n\t\t\t});\n\t\t\t\n\t\t\t// Test receivers\n\t\t\tpeer.getReceivers().forEach(receiver => {\n\t\t\t\tconsole.log(`Receiver for peer ${peerId}:`, {\n\t\t\t\t\ttrack: receiver.track ? {\n\t\t\t\t\t\tkind: receiver.track.kind,\n\t\t\t\t\t\tid: receiver.track.id,\n\t\t\t\t\t\tenabled: receiver.track.enabled\n\t\t\t\t\t} : null\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t\t\n\t\t// Test remote streams\n\t\tconsole.log('Remote streams:', this.remoteStreams.size);\n\t\tthis.remoteStreams.forEach((stream, peerId) => {\n\t\t\tconsole.log(`Remote stream for peer ${peerId}:`, stream);\n\t\t\tconsole.log(`Remote stream tracks for peer ${peerId}:`, stream.getTracks());\n\t\t});\n\t\t\n\t\t// Test audio elements\n\t\tthis.peers.forEach((peer, peerId) => {\n\t\t\tconst audioElement = document.getElementById(`remote-audio-${peerId}`) as HTMLAudioElement;\n\t\t\tif (audioElement) {\n\t\t\t\tconsole.log(`Audio element for peer ${peerId}:`, {\n\t\t\t\t\tpaused: audioElement.paused,\n\t\t\t\t\tended: audioElement.ended,\n\t\t\t\t\tvolume: audioElement.volume,\n\t\t\t\t\tmuted: audioElement.muted,\n\t\t\t\t\tcurrentTime: audioElement.currentTime,\n\t\t\t\t\tduration: audioElement.duration,\n\t\t\t\t\treadyState: audioElement.readyState\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tconsole.log(`No audio element found for peer ${peerId}`);\n\t\t\t}\n\t\t});\n\t}\n\n\t// Method to handle page unload events\n\tsetupPageUnloadHandler(): void {\n\t\tif (typeof window !== 'undefined') {\n\t\t\tconst handleBeforeUnload = () => {\n\t\t\t\tconsole.log('Page unloading, cleaning up voice connections...');\n\t\t\t\tthis.disconnect();\n\t\t\t};\n\n\t\t\twindow.addEventListener('beforeunload', handleBeforeUnload);\n\t\t\twindow.addEventListener('pagehide', handleBeforeUnload);\n\t\t}\n\t}\n}\n\n\t// Export singleton instance\nexport const voiceClient = new VoiceClient(); ","usedDeprecatedRules":[]},{"filePath":"/Users/bennerrr/Feathur/client/web/src/routes/+layout.svelte","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":17,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":17,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[487,540],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":20,"column":4,"nodeType":"MemberExpression","messageId":"unexpected","endLine":20,"endColumn":15,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[580,642],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":22,"column":4,"nodeType":"MemberExpression","messageId":"unexpected","endLine":22,"endColumn":15,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[681,730],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'unsubscribe' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":25,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":25,"endColumn":21},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":26,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":26,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[837,1022],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":34,"column":6,"nodeType":"MemberExpression","messageId":"unexpected","endLine":34,"endColumn":17,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1080,1162],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":41,"column":6,"nodeType":"MemberExpression","messageId":"unexpected","endLine":41,"endColumn":17,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1305,1365],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":49,"column":6,"nodeType":"MemberExpression","messageId":"unexpected","endLine":49,"endColumn":17,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1522,1608],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":59,"column":8,"nodeType":"MemberExpression","messageId":"unexpected","endLine":59,"endColumn":19,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1982,2036],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":62,"column":8,"nodeType":"MemberExpression","messageId":"unexpected","endLine":62,"endColumn":19,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2112,2164],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":69,"column":6,"nodeType":"MemberExpression","messageId":"unexpected","endLine":69,"endColumn":17,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2285,2376],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":79,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":79,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2679,2742],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":88,"column":4,"nodeType":"MemberExpression","messageId":"unexpected","endLine":88,"endColumn":15,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2875,2925],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":90,"column":4,"nodeType":"MemberExpression","messageId":"unexpected","endLine":90,"endColumn":17,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[2949,3007],"text":""},"desc":"Remove the console.error()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"<script lang=\"ts\">\n\timport { onMount } from 'svelte';\n\timport { goto } from '$app/navigation';\n\timport { page } from '$app/stores';\n\timport { browser } from '$app/environment';\n\timport { authStore, authActions } from '$lib/stores/auth';\n\timport { apiClient } from '$lib/api/client';\n\timport ErrorBoundary from '$lib/components/ui/ErrorBoundary.svelte';\n\n\tlet initialized = false;\n\tlet lastNavigationTime = 0;\n\tlet isNavigating = false;\n\n\tonMount(async () => {\n\t\tif (!browser) return;\n\n\t\tconsole.log('🔧 Layout: Starting initialization...');\n\t\ttry {\n\t\t\t// Initialize auth store\n\t\t\tconsole.log('🔧 Layout: Calling authActions.initialize()...');\n\t\t\tawait authActions.initialize();\n\t\t\tconsole.log('🔧 Layout: Auth store initialized');\n\t\t\t\n\t\t\t// Set up auth state subscription\n\t\t\tconst unsubscribe = authStore.subscribe(async (auth) => {\n\t\t\t\tconsole.log('🔧 Layout: Auth state changed:', { \n\t\t\t\t\tisInitialized: auth.isInitialized, \n\t\t\t\t\thasUser: !!auth.user, \n\t\t\t\t\thasToken: !!auth.token,\n\t\t\t\t\tpath: $page.url.pathname \n\t\t\t\t});\n\t\t\t\t\n\t\t\t\tif (!auth.isInitialized || isNavigating) {\n\t\t\t\t\tconsole.log('🔧 Layout: Auth not initialized or already navigating, skipping...');\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Prevent excessive navigation calls\n\t\t\t\tconst now = Date.now();\n\t\t\t\tif (now - lastNavigationTime < 1000) {\n\t\t\t\t\tconsole.log('🔧 Layout: Navigation throttled, skipping...');\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tconst currentPath = $page.url.pathname;\n\t\t\t\t\n\t\t\t\t// Handle authentication state changes\n\t\t\t\tif (auth.user && auth.token) {\n\t\t\t\t\tconsole.log('🔧 Layout: User is authenticated, setting token and checking redirects');\n\t\t\t\t\t// User is authenticated\n\t\t\t\t\tapiClient.setToken(auth.token);\n\t\t\t\t\t\n\t\t\t\t\t// Redirect from auth pages to appropriate destination\n\t\t\t\t\tif (currentPath === '/' || currentPath === '/login' || currentPath === '/register') {\n\t\t\t\t\t\tisNavigating = true;\n\t\t\t\t\t\tlastNavigationTime = now;\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (auth.user.role === 'admin' || auth.user.role === 'super_admin') {\n\t\t\t\t\t\t\tconsole.log('🔧 Layout: Redirecting admin to /admin');\n\t\t\t\t\t\t\tawait goto('/admin', { replaceState: true });\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconsole.log('🔧 Layout: Redirecting user to /chat');\n\t\t\t\t\t\t\tawait goto('/chat', { replaceState: true });\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tisNavigating = false;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tconsole.log('🔧 Layout: User is not authenticated, clearing token and checking redirects');\n\t\t\t\t\t// User is not authenticated\n\t\t\t\t\tapiClient.clearToken();\n\t\t\t\t\t\n\t\t\t\t\t// Redirect from protected pages to login\n\t\t\t\t\tconst protectedRoutes = ['/chat', '/admin', '/dashboard'];\n\t\t\t\t\tif (protectedRoutes.includes(currentPath)) {\n\t\t\t\t\t\tisNavigating = true;\n\t\t\t\t\t\tlastNavigationTime = now;\n\t\t\t\t\t\t\n\t\t\t\t\t\tconsole.log('🔧 Layout: Redirecting from protected page to /');\n\t\t\t\t\t\tawait goto('/', { replaceState: true });\n\t\t\t\t\t\t\n\t\t\t\t\t\tisNavigating = false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t\t\n\t\t\tinitialized = true;\n\t\t\tconsole.log('🔧 Layout: Initialization complete');\n\t\t} catch (error) {\n\t\t\tconsole.error('🔧 Layout: Initialization failed:', error);\n\t\t}\n\t});\n</script>\n\n<!-- Global CSS Variables -->\n<style>\n\t:global(:root) {\n\t\t/* Modern Color Palette - High Contrast Theme */\n\t\t--color-bg: #000000;\n\t\t--color-surface: #111111;\n\t\t--color-primary: #222222;\n\t\t--color-accent: #3b82f6;\n\t\t--color-accent-hover: #2563eb;\n\t\t--color-text: #ffffff;\n\t\t--color-text-muted: #cccccc;\n\t\t--color-border: #333333;\n\t\t--color-glass: rgba(17, 17, 17, 0.95);\n\t\t--color-glass-border: rgba(51, 51, 51, 0.6);\n\t\t--color-success: #10b981;\n\t\t--color-error: #ef4444;\n\t\t--color-warning: #f59e0b;\n\t\t--color-info: #06b6d4;\n\t\t\n\t\t/* Enhanced Shadows */\n\t\t--shadow-sm: 0 1px 2px 0 rgba(0, 0, 0, 0.1);\n\t\t--shadow-md: 0 4px 6px -1px rgba(0, 0, 0, 0.15);\n\t\t--shadow-lg: 0 10px 15px -3px rgba(0, 0, 0, 0.2);\n\t\t--shadow-xl: 0 20px 25px -5px rgba(0, 0, 0, 0.25);\n\t\t\n\t\t/* Modern Typography */\n\t\t--font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen', 'Ubuntu', 'Cantarell', sans-serif;\n\t\t--font-size-xs: 0.75rem;\n\t\t--font-size-sm: 0.875rem;\n\t\t--font-size-base: 1rem;\n\t\t--font-size-lg: 1.125rem;\n\t\t--font-size-xl: 1.25rem;\n\t\t--font-size-2xl: 1.5rem;\n\t\t--font-size-3xl: 1.875rem;\n\t\t\n\t\t/* Line Heights */\n\t\t--line-height-tight: 1.25;\n\t\t--line-height-normal: 1.5;\n\t\t--line-height-relaxed: 1.75;\n\t\t\n\t\t/* Border Radius */\n\t\t--radius-sm: 0.375rem;\n\t\t--radius-md: 0.5rem;\n\t\t--radius-lg: 0.75rem;\n\t\t--radius-xl: 1rem;\n\t}\n\n\t:global(*) {\n\t\tbox-sizing: border-box;\n\t}\n\n\t:global(body) {\n\t\tmargin: 0;\n\t\tpadding: 0;\n\t\tfont-family: var(--font-family);\n\t\tfont-size: var(--font-size-base);\n\t\tline-height: var(--line-height-normal);\n\t\tbackground: var(--color-bg);\n\t\tcolor: var(--color-text);\n\t\toverflow-x: hidden;\n\t\t-webkit-font-smoothing: antialiased;\n\t\t-moz-osx-font-smoothing: grayscale;\n\t}\n\n\t:global(.glass-card) {\n\t\tbackground: var(--color-glass);\n\t\tbackdrop-filter: blur(16px);\n\t\tborder: 1px solid var(--color-glass-border);\n\t\tborder-radius: var(--radius-xl);\n\t\tpadding: 2rem;\n\t\tbox-shadow: var(--shadow-lg);\n\t\ttransition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);\n\t}\n\n\t:global(.btn) {\n\t\tdisplay: inline-flex;\n\t\talign-items: center;\n\t\tjustify-content: center;\n\t\tgap: 0.5rem;\n\t\tpadding: 0.75rem 1.5rem;\n\t\tborder-radius: var(--radius-md);\n\t\tfont-weight: 500;\n\t\tfont-size: var(--font-size-sm);\n\t\ttransition: all 0.2s cubic-bezier(0.4, 0, 0.2, 1);\n\t\ttext-decoration: none;\n\t\tborder: none;\n\t\tcursor: pointer;\n\t\tfont-family: var(--font-family);\n\t}\n\n\t:global(.btn-primary) {\n\t\tbackground: var(--color-accent);\n\t\tcolor: white;\n\t}\n\n\t:global(.btn-primary:hover) {\n\t\tbackground: var(--color-accent-hover);\n\t\ttransform: translateY(-1px);\n\t\tbox-shadow: var(--shadow-md);\n\t}\n\n\t:global(.loading-spinner) {\n\t\twidth: 20px;\n\t\theight: 20px;\n\t\tborder: 2px solid transparent;\n\t\tborder-top: 2px solid currentColor;\n\t\tborder-radius: 50%;\n\t\tanimation: spin 1s linear infinite;\n\t}\n\n\t@keyframes spin {\n\t\tto {\n\t\t\ttransform: rotate(360deg);\n\t\t}\n\t}\n\n\t:global(.error-message) {\n\t\tbackground: rgba(239, 68, 68, 0.1);\n\t\tcolor: var(--color-error);\n\t\tpadding: 1rem;\n\t\tborder-radius: var(--radius-md);\n\t\tborder: 1px solid rgba(239, 68, 68, 0.2);\n\t\tmargin-bottom: 1rem;\n\t\tfont-size: var(--font-size-sm);\n\t}\n\n\t:global(.success-message) {\n\t\tbackground: rgba(16, 185, 129, 0.1);\n\t\tcolor: var(--color-success);\n\t\tpadding: 1rem;\n\t\tborder-radius: var(--radius-md);\n\t\tborder: 1px solid rgba(16, 185, 129, 0.2);\n\t\tmargin-bottom: 1rem;\n\t\tfont-size: var(--font-size-sm);\n\t}\n\n\t.app-container {\n\t\tmin-height: 100vh;\n\t\tbackground: var(--color-bg);\n\t}\n\n\t.loading-screen {\n\t\tdisplay: flex;\n\t\tflex-direction: column;\n\t\talign-items: center;\n\t\tjustify-content: center;\n\t\tmin-height: 100vh;\n\t\tgap: 1rem;\n\t\tcolor: var(--color-text-muted);\n\t}\n\n        .loading-screen p {\n                margin: 0;\n                font-size: var(--font-size-sm);\n                font-weight: 500;\n        }\n\n        .skip-link {\n                position: absolute;\n                top: -40px;\n                left: 0;\n                background: var(--color-accent);\n                color: white;\n                padding: 0.5rem 1rem;\n                z-index: 1000;\n        }\n        .skip-link:focus {\n                top: 0;\n        }\n</style>\n\n<!-- Main Layout -->\n<ErrorBoundary>\n        <div class=\"app-container\">\n                <a href=\"#main-content\" class=\"skip-link\">Skip to content</a>\n                {#if !initialized}\n                        <div class=\"loading-screen\">\n                                <div class=\"loading-spinner\"></div>\n                                <p>Initializing...</p>\n\t\t\t</div>\n\t\t{:else}\n\t\t\t<slot />\n\t\t{/if}\n\t</div>\n</ErrorBoundary> ","usedDeprecatedRules":[]},{"filePath":"/Users/bennerrr/Feathur/client/web/src/routes/+page.svelte","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'unsubscribe' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":63,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":63,"endColumn":21},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":68,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":68,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1365,1420],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":85,"column":4,"nodeType":"MemberExpression","messageId":"unexpected","endLine":85,"endColumn":17,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[1848,1899],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":144,"column":4,"nodeType":"MemberExpression","messageId":"unexpected","endLine":144,"endColumn":17,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[3128,3163],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":186,"column":4,"nodeType":"MemberExpression","messageId":"unexpected","endLine":186,"endColumn":17,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[4143,4184],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"svelte/valid-compile","severity":1,"message":"Unused CSS selector \"input[type=\"email\"]\"\nhttps://svelte.dev/e/css_unused_selector(css_unused_selector)","line":495,"column":22,"nodeType":null,"endLine":495,"endColumn":41}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"<script lang=\"ts\">\n\timport { onMount } from 'svelte';\n\timport { goto } from '$app/navigation';\n\timport { browser } from '$app/environment';\n\timport { apiClient } from '$lib/api/client';\n\timport { authActions, authStore } from '$lib/stores/auth';\n\n\tlet isFirstTime = false;\n\tlet currentStep = 1;\n\tlet totalSteps = 5;\n\tlet loading = true;\n\tlet authChecking = true;\n\n\t// Configuration data\n\tlet config = {\n\t\tnetwork: {\n\t\t\thostname: 'localhost',\n\t\t\tport: '8081',\n\t\t\tssl: false,\n\t\t\texternalDomain: '',\n\t\t\tmdns: true\n\t\t},\n\t\tauth: {\n\t\t\tmode: 'public', // 'public', 'open_registration', 'admin_only'\n\t\t\tregistrationPassword: ''\n\t\t},\n\t\tadmin: {\n\t\t\tusername: '',\n\t\t\tpassword: '',\n\t\t\tconfirmPassword: ''\n\t\t},\n\t\tuser: {\n\t\t\tusername: '',\n\t\t\tpassword: '',\n\t\t\tconfirmPassword: ''\n\t\t}\n\t};\n\n\t// Login data\n\tlet loginData = {\n\t\tusername: '',\n\t\tpassword: ''\n\t};\n\n\tlet error = '';\n\tlet success = '';\n\t\n\t// Subscribe to auth store for errors\n\t$: authStore.subscribe(($auth) => {\n\t\tif ($auth.error && $auth.error !== error) {\n\t\t\terror = $auth.error;\n\t\t}\n\t});\n\n\tonMount(async () => {\n\t\tif (!browser) return;\n\t\t\n\t\ttry {\n\t\t\t// Initialize auth store\n\t\t\tawait authActions.initialize();\n\t\t\t\n\t\t\t// Subscribe to auth store changes\n\t\t\tconst unsubscribe = authStore.subscribe(($auth) => {\n\t\t\t\tif ($auth.isInitialized) {\n\t\t\t\t\tauthChecking = false;\n\t\t\t\t\t\n\t\t\t\t\tif ($auth.user && $auth.token) {\n\t\t\t\t\t\tconsole.log('User already authenticated:', $auth.user);\n\t\t\t\t\t\t// Redirect to appropriate page based on user role\n\t\t\t\t\t\tif ($auth.user.role === 'admin' || $auth.user.role === 'super_admin') {\n\t\t\t\t\t\t\tgoto('/admin');\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tgoto('/chat');\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t// Check if this is first time setup\n\t\t\tconst response = await fetch('/api/setup/status');\n\t\t\tconst data = await response.json();\n\t\t\tisFirstTime = data.isFirstTime;\n\t\t} catch (err) {\n\t\t\tconsole.error('Error checking setup status:', err);\n\t\t\tisFirstTime = true; // Default to setup mode if error\n\t\t} finally {\n\t\t\tloading = false;\n\t\t}\n\t});\n\n\tfunction nextStep() {\n\t\tif (currentStep < totalSteps) {\n\t\t\tcurrentStep++;\n\t\t}\n\t}\n\n\tfunction prevStep() {\n\t\tif (currentStep > 1) {\n\t\t\tcurrentStep--;\n\t\t}\n\t}\n\n\tasync function handleSetup() {\n\t\ttry {\n\t\t\tconst response = await fetch('/api/setup/configure', {\n\t\t\t\tmethod: 'POST',\n\t\t\t\theaders: {\n\t\t\t\t\t'Content-Type': 'application/json'\n\t\t\t\t},\n\t\t\t\tbody: JSON.stringify(config)\n\t\t\t});\n\n\t\t\tif (response.ok) {\n\t\t\t\tsuccess = 'Configuration completed successfully!';\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\twindow.location.reload();\n\t\t\t\t}, 2000);\n\t\t\t} else {\n\t\t\t\tconst data = await response.json();\n\t\t\t\terror = data.error || 'Configuration failed';\n\t\t\t}\n\t\t} catch (err) {\n\t\t\terror = 'Failed to save configuration';\n\t\t}\n\t}\n\n\tasync function handleLogin() {\n\t\ttry {\n\t\t\terror = '';\n\t\t\tawait authActions.login(loginData.username, loginData.password);\n\t\t\t\n\t\t\t// Get current auth state to determine redirect\n\t\t\tauthStore.subscribe(($auth) => {\n\t\t\t\tif ($auth.user && $auth.token) {\n\t\t\t\t\tif ($auth.user.role === 'admin' || $auth.user.role === 'super_admin') {\n\t\t\t\t\t\tgoto('/admin');\n\t\t\t\t\t} else {\n\t\t\t\t\t\tgoto('/chat');\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t})();\n\t\t} catch (err) {\n\t\t\tconsole.error('Login error:', err);\n\t\t\terror = err instanceof Error ? err.message : 'Login failed';\n\t\t}\n\t}\n\n\tasync function handleGuestLogin() {\n\t\ttry {\n\t\t\terror = '';\n\t\t\t// For guest login, we'll use the API client directly since it's not in the auth store\n\t\t\tconst response = await fetch('/api/auth/guest', {\n\t\t\t\tmethod: 'POST',\n\t\t\t\theaders: {\n\t\t\t\t\t'Content-Type': 'application/json'\n\t\t\t\t},\n\t\t\t\tbody: JSON.stringify({})\n\t\t\t});\n\n\t\t\tif (response.ok) {\n\t\t\t\tconst data = await response.json();\n\t\t\t\t// Set token in auth store manually\n\t\t\t\tauthStore.update(state => ({\n\t\t\t\t\t...state,\n\t\t\t\t\tuser: data.user,\n\t\t\t\t\ttoken: data.token,\n\t\t\t\t\tisLoading: false,\n\t\t\t\t\terror: null\n\t\t\t\t}));\n\t\t\t\t\n\t\t\t\t// Store token in localStorage\n\t\t\t\tif (browser) {\n\t\t\t\t\tlocalStorage.setItem('auth_token', data.token);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Set token in API client\n\t\t\t\tapiClient.setToken(data.token);\n\t\t\t\t\n\t\t\t\tgoto('/chat');\n\t\t\t} else {\n\t\t\t\tconst data = await response.json();\n\t\t\t\terror = data.error || 'Guest login failed';\n\t\t\t}\n\t\t} catch (err) {\n\t\t\tconsole.error('Guest login error:', err);\n\t\t\terror = 'Guest login failed';\n\t\t}\n\t}\n\n\tfunction validateStep() {\n\t\tswitch (currentStep) {\n\t\t\tcase 1: // Network\n\t\t\t\treturn config.network.hostname && config.network.port;\n\t\t\tcase 2: // Auth\n\t\t\t\treturn config.auth.mode && \n\t\t\t\t\t(config.auth.mode !== 'open_registration' || config.auth.registrationPassword);\n\t\t\tcase 3: // Admin\n\t\t\t\treturn config.admin.username && config.admin.password && \n\t\t\t\t\tconfig.admin.password === config.admin.confirmPassword &&\n\t\t\t\t\tconfig.admin.password.length >= 9;\n\t\t\tcase 4: // User (optional)\n\t\t\t\treturn true; // Optional step\n\t\t\tdefault:\n\t\t\t\treturn true;\n\t\t}\n\t}\n</script>\n\n{#if loading || authChecking}\n\t<div class=\"glass-card\">\n\t\t<div style=\"text-align: center; padding: 2rem;\">\n\t\t\t<div style=\"font-size: 1.2rem; margin-bottom: 1rem;\">\n\t\t\t\t{#if authChecking}\n\t\t\t\t\tChecking authentication...\n\t\t\t\t{:else}\n\t\t\t\t\tLoading...\n\t\t\t\t{/if}\n\t\t\t</div>\n\t\t\t<div style=\"width: 40px; height: 40px; border: 3px solid var(--color-glass-border); border-top: 3px solid var(--color-accent); border-radius: 50%; animation: spin 1s linear infinite; margin: 0 auto;\"></div>\n\t\t</div>\n\t</div>\n{:else if isFirstTime}\n\t<!-- Configuration Wizard -->\n\t<div class=\"glass-card\">\n\t\t<div style=\"text-align: center; margin-bottom: 2rem;\">\n\t\t\t<h2 style=\"color: var(--color-accent); margin-bottom: 0.5rem;\">Welcome to Feathur</h2>\n\t\t\t<p style=\"color: var(--color-text); opacity: 0.8;\">Let's configure your self-hosted chat server</p>\n\t\t\t\n\t\t\t<!-- Progress bar -->\n\t\t\t<div style=\"background: var(--color-glass-border); height: 4px; border-radius: 2px; margin: 1rem 0;\">\n\t\t\t\t<div style=\"background: var(--color-accent); height: 100%; border-radius: 2px; width: {(currentStep / totalSteps) * 100}%; transition: width 0.3s;\"></div>\n\t\t\t</div>\n\t\t\t<div style=\"font-size: 0.9rem; color: var(--color-text); opacity: 0.7;\">Step {currentStep} of {totalSteps}</div>\n\t\t</div>\n\n\t\t{#if error}\n\t\t\t<div class=\"error-message\">{error}</div>\n\t\t{/if}\n\n\t\t{#if success}\n\t\t\t<div class=\"success-message\">{success}</div>\n\t\t{/if}\n\n\t\t<!-- Step 1: Network Configuration -->\n\t\t{#if currentStep === 1}\n\t\t\t<div class=\"step-content\">\n\t\t\t\t<h3 style=\"color: var(--color-accent); margin-bottom: 1.5rem; text-align: center;\">Network Settings</h3>\n\t\t\t\t<div class=\"form-grid\">\n\t\t\t\t\t<div class=\"form-group\">\n\t\t\t\t\t\t<label for=\"hostname\">Hostname</label>\n\t\t\t\t\t\t<input id=\"hostname\" type=\"text\" bind:value={config.network.hostname} placeholder=\"localhost\" />\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"form-group\">\n\t\t\t\t\t\t<label for=\"port\">Port</label>\n\t\t\t\t\t\t<input id=\"port\" type=\"number\" bind:value={config.network.port} placeholder=\"8081\" />\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"form-group checkbox-group\">\n\t\t\t\t\t\t<label class=\"checkbox-label\">\n\t\t\t\t\t\t\t<input type=\"checkbox\" bind:checked={config.network.ssl} />\n\t\t\t\t\t\t\t<span>Enable SSL/HTTPS</span>\n\t\t\t\t\t\t</label>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"form-group\">\n\t\t\t\t\t\t<label for=\"externalDomain\">External Domain (optional)</label>\n\t\t\t\t\t\t<input id=\"externalDomain\" type=\"text\" bind:value={config.network.externalDomain} placeholder=\"yourdomain.com\" />\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"form-group checkbox-group\">\n\t\t\t\t\t\t<label class=\"checkbox-label\">\n\t\t\t\t\t\t\t<input type=\"checkbox\" bind:checked={config.network.mdns} />\n\t\t\t\t\t\t\t<span>Enable mDNS (feathur.local)</span>\n\t\t\t\t\t\t</label>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t{/if}\n\n\t\t<!-- Step 2: Authentication Mode -->\n\t\t{#if currentStep === 2}\n\t\t\t<div class=\"step-content\">\n\t\t\t\t<h3 style=\"color: var(--color-accent); margin-bottom: 1.5rem; text-align: center;\">Authentication Mode</h3>\n\t\t\t\t<div class=\"form-grid\">\n\t\t\t\t\t<div class=\"form-group radio-group\">\n\t\t\t\t\t\t<label class=\"radio-label\">\n\t\t\t\t\t\t\t<input type=\"radio\" bind:group={config.auth.mode} value=\"public\" />\n\t\t\t\t\t\t\t<span>Public - Anyone can register without password</span>\n\t\t\t\t\t\t</label>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"form-group radio-group\">\n\t\t\t\t\t\t<label class=\"radio-label\">\n\t\t\t\t\t\t\t<input type=\"radio\" bind:group={config.auth.mode} value=\"open_registration\" />\n\t\t\t\t\t\t\t<span>Open Registration - Anyone with password can register</span>\n\t\t\t\t\t\t</label>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"form-group radio-group\">\n\t\t\t\t\t\t<label class=\"radio-label\">\n\t\t\t\t\t\t\t<input type=\"radio\" bind:group={config.auth.mode} value=\"admin_only\" />\n\t\t\t\t\t\t\t<span>Admin Only - Only pre-created accounts can join</span>\n\t\t\t\t\t\t</label>\n\t\t\t\t\t</div>\n\t\t\t\t\t\n\t\t\t\t\t{#if config.auth.mode === 'open_registration'}\n\t\t\t\t\t\t<div class=\"form-group\">\n\t\t\t\t\t\t\t<label for=\"regPassword\">Registration Password</label>\n\t\t\t\t\t\t\t<input id=\"regPassword\" type=\"password\" bind:value={config.auth.registrationPassword} placeholder=\"Enter registration password\" />\n\t\t\t\t\t\t</div>\n\t\t\t\t\t{/if}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t{/if}\n\n\t\t<!-- Step 3: Admin Account -->\n\t\t{#if currentStep === 3}\n\t\t\t<div class=\"step-content\">\n\t\t\t\t<h3 style=\"color: var(--color-accent); margin-bottom: 1.5rem; text-align: center;\">Super Admin Account</h3>\n\t\t\t\t<div class=\"form-grid\">\n\t\t\t\t\t<div class=\"form-group\">\n\t\t\t\t\t\t<label for=\"adminUsername\">Username</label>\n\t\t\t\t\t\t<input id=\"adminUsername\" type=\"text\" bind:value={config.admin.username} placeholder=\"admin\" />\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"form-group\">\n\t\t\t\t\t\t<label for=\"adminPassword\">Password</label>\n\t\t\t\t\t\t<input id=\"adminPassword\" type=\"password\" bind:value={config.admin.password} placeholder=\"Min 9 chars, number, special char\" />\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"form-group\">\n\t\t\t\t\t\t<label for=\"adminConfirmPassword\">Confirm Password</label>\n\t\t\t\t\t\t<input id=\"adminConfirmPassword\" type=\"password\" bind:value={config.admin.confirmPassword} placeholder=\"Confirm password\" />\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"form-group info-text\">\n\t\t\t\t\t\tPassword must be at least 9 characters with a number and special character\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t{/if}\n\n\t\t<!-- Step 4: Normal User (Optional) -->\n\t\t{#if currentStep === 4}\n\t\t\t<div class=\"step-content\">\n\t\t\t\t<h3 style=\"color: var(--color-accent); margin-bottom: 1.5rem; text-align: center;\">Create Normal User (Optional)</h3>\n\t\t\t\t<div class=\"form-grid\">\n\t\t\t\t\t<div class=\"form-group\">\n\t\t\t\t\t\t<label for=\"userUsername\">Username</label>\n\t\t\t\t\t\t<input id=\"userUsername\" type=\"text\" bind:value={config.user.username} placeholder=\"user\" />\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"form-group\">\n\t\t\t\t\t\t<label for=\"userPassword\">Password</label>\n\t\t\t\t\t\t<input id=\"userPassword\" type=\"password\" bind:value={config.user.password} placeholder=\"Min 9 chars, number, special char\" />\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"form-group\">\n\t\t\t\t\t\t<label for=\"userConfirmPassword\">Confirm Password</label>\n\t\t\t\t\t\t<input id=\"userConfirmPassword\" type=\"password\" bind:value={config.user.confirmPassword} placeholder=\"Confirm password\" />\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"form-group info-text\">\n\t\t\t\t\t\tYou can skip this step and create users later\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t{/if}\n\n\t\t<!-- Step 5: Finish -->\n\t\t{#if currentStep === 5}\n\t\t\t<div>\n\t\t\t\t<h3 style=\"color: var(--color-accent); margin-bottom: 1rem;\">Configuration Summary</h3>\n\t\t\t\t<div style=\"text-align: left; margin-bottom: 2rem;\">\n\t\t\t\t\t<div style=\"margin-bottom: 1rem;\">\n\t\t\t\t\t\t<strong>Network:</strong> {config.network.hostname}:{config.network.port}\n\t\t\t\t\t\t{#if config.network.ssl} (SSL enabled){/if}\n\t\t\t\t\t</div>\n\t\t\t\t\t<div style=\"margin-bottom: 1rem;\">\n\t\t\t\t\t\t<strong>Authentication:</strong> {config.auth.mode}\n\t\t\t\t\t\t{#if config.auth.mode === 'open_registration'} (Password: {config.auth.registrationPassword}){/if}\n\t\t\t\t\t</div>\n\t\t\t\t\t<div style=\"margin-bottom: 1rem;\">\n\t\t\t\t\t\t<strong>Admin:</strong> {config.admin.username}\n\t\t\t\t\t</div>\n\t\t\t\t\t{#if config.user.username}\n\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t<strong>User:</strong> {config.user.username}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t{/if}\n\t\t\t\t</div>\n\t\t\t\t<button on:click={handleSetup} class=\"primary-button\">Complete Setup</button>\n\t\t\t</div>\n\t\t{/if}\n\n\t\t<!-- Navigation -->\n\t\t{#if currentStep < 5}\n\t\t\t<div style=\"display: flex; justify-content: space-between; margin-top: 2rem;\">\n\t\t\t\t<button on:click={prevStep} disabled={currentStep === 1} class=\"secondary-button\">Previous</button>\n\t\t\t\t<button on:click={nextStep} disabled={!validateStep()} class=\"primary-button\">Next</button>\n\t\t\t</div>\n\t\t{/if}\n\t</div>\n{:else}\n\t<!-- Login/Registration -->\n\t<div class=\"glass-card\">\n\t\t<h2 style=\"color: var(--color-accent); margin-bottom: 1.5rem; text-align: center;\">Welcome Back</h2>\n\t\t\n\t\t{#if error}\n\t\t\t<div class=\"error\">{error}</div>\n\t\t{/if}\n\n\t\t<form on:submit|preventDefault={handleLogin}>\n\t\t\t<div style=\"display: flex; flex-direction: column; gap: 1rem;\">\n\t\t\t\t<div>\n\t\t\t\t\t<label for=\"username\">Username</label>\n\t\t\t\t\t<input id=\"username\" type=\"text\" bind:value={loginData.username} placeholder=\"Enter username\" required />\n\t\t\t\t</div>\n\t\t\t\t<div>\n\t\t\t\t\t<label for=\"password\">Password</label>\n\t\t\t\t\t<input id=\"password\" type=\"password\" bind:value={loginData.password} placeholder=\"Enter password\" required />\n\t\t\t\t</div>\n\t\t\t\t<button type=\"submit\" class=\"primary-button\">Login</button>\n\t\t\t</div>\n\t\t</form>\n\n\t\t<div style=\"margin-top: 1.5rem; text-align: center;\">\n\t\t\t<a href=\"/register\" style=\"color: var(--color-accent);\">Need an account? Register here</a>\n\t\t</div>\n\t\t\n\t\t<div style=\"margin-top: 1rem; text-align: center;\">\n\t\t\t<button type=\"button\" class=\"secondary-button\" on:click={handleGuestLogin}>\n\t\t\t\t👤 Continue as Guest\n\t\t\t</button>\n\t\t</div>\n\t</div>\n{/if}\n\n<style>\n\tform {\n\t\t\tdisplay: flex;\n\tflex-direction: column;\n\tgap: 1rem;\n}\n\n.step-content {\n\tdisplay: flex;\n\tflex-direction: column;\n\talign-items: center;\n\twidth: 100%;\n}\n\n.form-grid {\n\tdisplay: grid;\n\tgrid-template-columns: repeat(auto-fit, minmax(280px, 1fr));\n\tgap: 1.5rem;\n\twidth: 100%;\n\tmax-width: 800px;\n\tmargin: 0 auto;\n}\n\n.form-group {\n\tdisplay: flex;\n\tflex-direction: column;\n\tgap: 0.5rem;\n}\n\n.checkbox-group, .radio-group {\n\tflex-direction: row;\n\talign-items: center;\n\tgap: 0.75rem;\n}\n\n.checkbox-label, .radio-label {\n\tdisplay: flex;\n\talign-items: center;\n\tgap: 0.75rem;\n\tcursor: pointer;\n\tfont-size: 0.95rem;\n\tline-height: 1.4;\n}\n\n.checkbox-label input[type=\"checkbox\"], .radio-label input[type=\"radio\"] {\n\twidth: auto;\n\tmargin: 0;\n\tflex-shrink: 0;\n}\n\n.info-text {\n\tfont-size: 0.9rem;\n\tcolor: var(--color-text);\n\topacity: 0.7;\n\ttext-align: center;\n\tgrid-column: 1 / -1;\n\tmargin-top: 0.5rem;\n\t}\n\t\n\tlabel {\n\t\tcolor: var(--color-accent);\n\t\tfont-weight: 500;\n\t\tmargin-bottom: 0.25rem;\n\t\tdisplay: block;\n\t}\n\t\n\tinput[type=\"text\"], input[type=\"email\"], input[type=\"password\"], input[type=\"number\"] {\n\t\tbackground: var(--color-glass);\n\t\tcolor: var(--color-text);\n\t\tborder: 1px solid var(--color-glass-border);\n\t\tborder-radius: var(--border-radius);\n\t\tpadding: 0.875rem 1rem;\n\t\tfont-size: 0.95rem;\n\t\toutline: none;\n\t\ttransition: all 0.3s ease;\n\t\twidth: 100%;\n\t\tbox-sizing: border-box;\n\t\tbackdrop-filter: blur(8px);\n\t\tbox-shadow: var(--shadow-sm);\n\t\tmax-width: 100%;\n\t}\n\t\n\tinput:focus {\n\t\tborder: 2px solid var(--color-accent);\n\t\tbox-shadow: var(--shadow-md), 0 0 0 3px rgba(99, 102, 241, 0.1);\n\t\ttransform: translateY(-1px);\n\t}\n\t\n\tinput[type=\"checkbox\"], input[type=\"radio\"] {\n\t\tmargin-right: 0.5rem;\n\t}\n\t\n\t.primary-button {\n\t\tbackground: linear-gradient(135deg, var(--color-accent), var(--color-accent-light));\n\t\tcolor: #fff;\n\t\tborder: none;\n\t\tborder-radius: var(--border-radius);\n\t\tpadding: 1rem 1.5rem;\n\t\tfont-size: 1.1rem;\n\t\tfont-weight: 600;\n\t\tcursor: pointer;\n\t\ttransition: all 0.3s ease;\n\t\tbox-shadow: var(--shadow-md);\n\t\tposition: relative;\n\t\toverflow: hidden;\n\t}\n\t\n\t.primary-button::before {\n\t\tcontent: '';\n\t\tposition: absolute;\n\t\ttop: 0;\n\t\tleft: -100%;\n\t\twidth: 100%;\n\t\theight: 100%;\n\t\tbackground: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);\n\t\ttransition: left 0.5s;\n\t}\n\t\n\t.primary-button:hover:not(:disabled) {\n\t\tbackground: linear-gradient(135deg, var(--color-accent-hover), var(--color-accent));\n\t\ttransform: translateY(-2px);\n\t\tbox-shadow: var(--shadow-lg);\n\t}\n\t\n\t.primary-button:hover::before {\n\t\tleft: 100%;\n\t}\n\t\n\t.primary-button:disabled {\n\t\topacity: 0.5;\n\t\tcursor: not-allowed;\n\t}\n\t\n\t.secondary-button {\n\t\tbackground: transparent;\n\t\tcolor: var(--color-accent);\n\t\tborder: 2px solid var(--color-accent);\n\t\tborder-radius: var(--border-radius);\n\t\tpadding: 1rem 1.5rem;\n\t\tfont-size: 1rem;\n\t\tfont-weight: 500;\n\t\tcursor: pointer;\n\t\ttransition: all 0.3s ease;\n\t\tposition: relative;\n\t\toverflow: hidden;\n\t}\n\t\n\t.secondary-button::before {\n\t\tcontent: '';\n\t\tposition: absolute;\n\t\ttop: 0;\n\t\tleft: 0;\n\t\twidth: 0;\n\t\theight: 100%;\n\t\tbackground: var(--color-accent);\n\t\ttransition: width 0.3s ease;\n\t\tz-index: -1;\n\t}\n\t\n\t.secondary-button:hover:not(:disabled) {\n\t\tcolor: #fff;\n\t\ttransform: translateY(-2px);\n\t\tbox-shadow: var(--shadow-md);\n\t}\n\t\n\t.secondary-button:hover::before {\n\t\twidth: 100%;\n\t}\n\t\n\t.secondary-button:disabled {\n\t\topacity: 0.5;\n\t\tcursor: not-allowed;\n\t}\n\t\n\t.error-message {\n\t\tcolor: var(--color-error);\n\t\tbackground: rgba(239, 68, 68, 0.08);\n\t\tborder: 1px solid rgba(239, 68, 68, 0.2);\n\t\tborder-radius: var(--border-radius);\n\t\tpadding: 1rem 1.25rem;\n\t\tmargin-bottom: 1.5rem;\n\t\ttext-align: center;\n\t\tbackdrop-filter: blur(8px);\n\t\tbox-shadow: var(--shadow-sm);\n\t\tposition: relative;\n\t\toverflow: hidden;\n\t}\n\n\t.error-message::before {\n\t\tcontent: '';\n\t\tposition: absolute;\n\t\ttop: 0;\n\t\tleft: 0;\n\t\twidth: 4px;\n\t\theight: 100%;\n\t\tbackground: var(--color-error);\n\t}\n\t\n\t.success-message {\n\t\tcolor: var(--color-success);\n\t\tbackground: rgba(16, 185, 129, 0.08);\n\t\tborder: 1px solid rgba(16, 185, 129, 0.2);\n\t\tborder-radius: var(--border-radius);\n\t\tpadding: 1rem 1.25rem;\n\t\tmargin-bottom: 1.5rem;\n\t\ttext-align: center;\n\t\tbackdrop-filter: blur(8px);\n\t\tbox-shadow: var(--shadow-sm);\n\t\tposition: relative;\n\t\toverflow: hidden;\n\t}\n\n\t.success-message::before {\n\t\tcontent: '';\n\t\tposition: absolute;\n\t\ttop: 0;\n\t\tleft: 0;\n\t\twidth: 4px;\n\t\theight: 100%;\n\t\tbackground: var(--color-success);\n\t}\n\t\n\t@keyframes spin {\n\t\t0% { transform: rotate(0deg); }\n\t\t100% { transform: rotate(360deg); }\n\t}\n</style> ","usedDeprecatedRules":[]},{"filePath":"/Users/bennerrr/Feathur/client/web/src/routes/admin-test/+page.svelte","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":7,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":7,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[174,177],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[174,177],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":8,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":8,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[198,201],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[198,201],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":15,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":15,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[340,369],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":22,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":22,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[495,522],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":26,"column":6,"nodeType":"MemberExpression","messageId":"unexpected","endLine":26,"endColumn":17,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[638,667],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":28,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":28,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[691,694],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[691,694],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":29,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":29,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[702,731],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":50,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":50,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1213,1216],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1213,1216],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"<script lang=\"ts\">\n\timport { onMount } from 'svelte';\n\timport { browser } from '$app/environment';\n\timport { apiClient } from '$lib/api/client';\n\n\tlet token = '';\n\tlet user: any = null;\n\tlet users: any[] = [];\n\tlet error = '';\n\n\tonMount(async () => {\n\t\tif (!browser) return;\n\t\t\n\t\ttoken = localStorage.getItem('auth_token') || 'No token';\n\t\tconsole.log('Token:', token);\n\t\t\n\t\tif (token !== 'No token') {\n\t\t\tapiClient.setToken(token);\n\t\t\t\n\t\t\ttry {\n\t\t\t\tuser = await apiClient.getCurrentUser();\n\t\t\t\tconsole.log('User:', user);\n\t\t\t\t\n\t\t\t\tif (user.role === 'admin' || user.role === 'super_admin') {\n\t\t\t\t\tusers = await apiClient.getUsers();\n\t\t\t\t\tconsole.log('Users:', users);\n\t\t\t\t}\n\t\t\t} catch (err: any) {\n\t\t\t\tconsole.error('Error:', err);\n\t\t\t\terror = err.message;\n\t\t\t}\n\t\t}\n\t});\n\n\tasync function loginAsAdmin() {\n\t\ttry {\n\t\t\tconst response = await fetch('http://localhost:8081/api/auth/login', {\n\t\t\t\tmethod: 'POST',\n\t\t\t\theaders: { 'Content-Type': 'application/json' },\n\t\t\t\tbody: JSON.stringify({\n\t\t\t\t\tusername: 'admin',\n\t\t\t\t\tpassword: 'password123!'\n\t\t\t\t})\n\t\t\t});\n\t\t\tconst data = await response.json();\n\t\t\tif (data.token) {\n\t\t\t\tlocalStorage.setItem('token', data.token);\n\t\t\t\twindow.location.reload();\n\t\t\t}\n\t\t} catch (err: any) {\n\t\t\terror = err.message;\n\t\t}\n\t}\n</script>\n\n<svelte:head>\n\t<title>Admin Test</title>\n</svelte:head>\n\n<div class=\"test-page\">\n\t<h1>Admin Test Page</h1>\n\t\n\t<div class=\"test-section\">\n\t\t<h2>Token Status</h2>\n\t\t<p>Token: {token ? 'Present' : 'Missing'}</p>\n\t\t{#if token === 'No token'}\n\t\t\t<button on:click={loginAsAdmin}>Login as Admin</button>\n\t\t{/if}\n\t</div>\n\n\t<div class=\"test-section\">\n\t\t<h2>Current User</h2>\n\t\t{#if user}\n\t\t\t<pre>{JSON.stringify(user, null, 2)}</pre>\n\t\t{:else}\n\t\t\t<p>No user loaded</p>\n\t\t{/if}\n\t</div>\n\n\t<div class=\"test-section\">\n\t\t<h2>Users (Admin Only)</h2>\n\t\t{#if users.length > 0}\n\t\t\t<pre>{JSON.stringify(users, null, 2)}</pre>\n\t\t{:else}\n\t\t\t<p>No users loaded</p>\n\t\t{/if}\n\t</div>\n\n\t{#if error}\n\t\t<div class=\"error\">\n\t\t\t<h2>Error</h2>\n\t\t\t<p>{error}</p>\n\t\t</div>\n\t{/if}\n</div>\n\n<style>\n\t.test-page {\n\t\tmax-width: 800px;\n\t\tmargin: 0 auto;\n\t\tpadding: 2rem;\n\t\tbackground: var(--color-bg);\n\t\tcolor: var(--color-text);\n\t\tmin-height: 100vh;\n\t}\n\n\t.test-section {\n\t\tmargin-bottom: 2rem;\n\t\tpadding: 1rem;\n\t\tborder: 1px solid var(--color-border);\n\t\tborder-radius: 8px;\n\t\tbackground: var(--color-surface);\n\t}\n\n\t.test-section h2 {\n\t\tcolor: var(--color-text);\n\t\tmargin-bottom: 1rem;\n\t}\n\n\tpre {\n\t\tbackground: var(--color-primary);\n\t\tcolor: var(--color-text);\n\t\tpadding: 1rem;\n\t\tborder-radius: 4px;\n\t\toverflow-x: auto;\n\t\tfont-size: 0.875rem;\n\t}\n\n\t.error {\n\t\tbackground: rgba(239, 68, 68, 0.1);\n\t\tborder: 1px solid var(--color-error);\n\t\tcolor: var(--color-error);\n\t\tpadding: 1rem;\n\t\tborder-radius: 8px;\n\t}\n\n\tbutton {\n\t\tbackground: var(--color-accent);\n\t\tcolor: white;\n\t\tborder: none;\n\t\tpadding: 0.75rem 1.5rem;\n\t\tborder-radius: 8px;\n\t\tcursor: pointer;\n\t\tfont-weight: 500;\n\t}\n\n\tbutton:hover {\n\t\tbackground: var(--color-accent-hover);\n\t}\n</style> ","usedDeprecatedRules":[]},{"filePath":"/Users/bennerrr/Feathur/client/web/src/routes/admin/+page.svelte","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":12,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":12,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[399,402],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[399,402],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":13,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":13,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[430,433],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[430,433],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":14,"column":15,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":14,"endColumn":18,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[456,459],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[456,459],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":15,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":15,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[484,487],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[484,487],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'userLatency' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":16,"column":6,"nodeType":null,"messageId":"unusedVar","endLine":16,"endColumn":17},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":16,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":16,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[514,517],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[514,517],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":49,"column":4,"nodeType":"MemberExpression","messageId":"unexpected","endLine":49,"endColumn":15,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1463,1513],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":56,"column":4,"nodeType":"MemberExpression","messageId":"unexpected","endLine":56,"endColumn":15,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1661,1726],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":65,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":65,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1905,1978],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":76,"column":30,"nodeType":"MemberExpression","messageId":"unexpected","endLine":76,"endColumn":43},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":77,"column":37,"nodeType":"MemberExpression","messageId":"unexpected","endLine":77,"endColumn":50},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":78,"column":32,"nodeType":"MemberExpression","messageId":"unexpected","endLine":78,"endColumn":45},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":79,"column":36,"nodeType":"MemberExpression","messageId":"unexpected","endLine":79,"endColumn":49},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":80,"column":34,"nodeType":"MemberExpression","messageId":"unexpected","endLine":80,"endColumn":47},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":81,"column":36,"nodeType":"MemberExpression","messageId":"unexpected","endLine":81,"endColumn":49},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":82,"column":32,"nodeType":"MemberExpression","messageId":"unexpected","endLine":82,"endColumn":45},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":86,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":86,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2789,2792],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2789,2792],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":87,"column":4,"nodeType":"MemberExpression","messageId":"unexpected","endLine":87,"endColumn":17,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[2799,2838],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":128,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":128,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3727,3730],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3727,3730],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":129,"column":4,"nodeType":"MemberExpression","messageId":"unexpected","endLine":129,"endColumn":17,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[3737,3784],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":152,"column":4,"nodeType":"MemberExpression","messageId":"unexpected","endLine":152,"endColumn":17,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[4271,4320],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":163,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":163,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[4585,4634],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":174,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":174,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4868,4871],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4868,4871],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":175,"column":4,"nodeType":"MemberExpression","messageId":"unexpected","endLine":175,"endColumn":17,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[4878,4923],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":193,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":193,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5333,5336],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5333,5336],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":194,"column":4,"nodeType":"MemberExpression","messageId":"unexpected","endLine":194,"endColumn":17,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[5343,5388],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":203,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":203,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5604,5607],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5604,5607],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":204,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":204,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[5615,5660],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":213,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":213,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5830,5833],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5830,5833],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":214,"column":4,"nodeType":"MemberExpression","messageId":"unexpected","endLine":214,"endColumn":17,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[5840,5890],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":218,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":218,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5936,5939],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5936,5939],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":251,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":251,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6798,6801],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6798,6801],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":252,"column":4,"nodeType":"MemberExpression","messageId":"unexpected","endLine":252,"endColumn":17,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[6808,6860],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"svelte/valid-compile","severity":1,"message":"Visible, non-interactive elements with a click event must be accompanied by a keyboard event handler. Consider whether an interactive element such as `<button type=\"button\">` or `<a>` might be more appropriate\nhttps://svelte.dev/e/a11y_click_events_have_key_events(a11y_click_events_have_key_events)","line":566,"column":3,"nodeType":null,"endLine":600,"endColumn":9},{"ruleId":"svelte/valid-compile","severity":1,"message":"`<div>` with a click handler must have an ARIA role\nhttps://svelte.dev/e/a11y_no_static_element_interactions(a11y_no_static_element_interactions)","line":566,"column":3,"nodeType":null,"endLine":600,"endColumn":9},{"ruleId":"svelte/valid-compile","severity":1,"message":"Visible, non-interactive elements with a click event must be accompanied by a keyboard event handler. Consider whether an interactive element such as `<button type=\"button\">` or `<a>` might be more appropriate\nhttps://svelte.dev/e/a11y_click_events_have_key_events(a11y_click_events_have_key_events)","line":567,"column":4,"nodeType":null,"endLine":599,"endColumn":10},{"ruleId":"svelte/valid-compile","severity":1,"message":"`<div>` with a click handler must have an ARIA role\nhttps://svelte.dev/e/a11y_no_static_element_interactions(a11y_no_static_element_interactions)","line":567,"column":4,"nodeType":null,"endLine":599,"endColumn":10},{"ruleId":"svelte/valid-compile","severity":1,"message":"Visible, non-interactive elements with a click event must be accompanied by a keyboard event handler. Consider whether an interactive element such as `<button type=\"button\">` or `<a>` might be more appropriate\nhttps://svelte.dev/e/a11y_click_events_have_key_events(a11y_click_events_have_key_events)","line":605,"column":3,"nodeType":null,"endLine":631,"endColumn":9},{"ruleId":"svelte/valid-compile","severity":1,"message":"`<div>` with a click handler must have an ARIA role\nhttps://svelte.dev/e/a11y_no_static_element_interactions(a11y_no_static_element_interactions)","line":605,"column":3,"nodeType":null,"endLine":631,"endColumn":9},{"ruleId":"svelte/valid-compile","severity":1,"message":"Visible, non-interactive elements with a click event must be accompanied by a keyboard event handler. Consider whether an interactive element such as `<button type=\"button\">` or `<a>` might be more appropriate\nhttps://svelte.dev/e/a11y_click_events_have_key_events(a11y_click_events_have_key_events)","line":606,"column":4,"nodeType":null,"endLine":630,"endColumn":10},{"ruleId":"svelte/valid-compile","severity":1,"message":"`<div>` with a click handler must have an ARIA role\nhttps://svelte.dev/e/a11y_no_static_element_interactions(a11y_no_static_element_interactions)","line":606,"column":4,"nodeType":null,"endLine":630,"endColumn":10},{"ruleId":"svelte/valid-compile","severity":1,"message":"Visible, non-interactive elements with a click event must be accompanied by a keyboard event handler. Consider whether an interactive element such as `<button type=\"button\">` or `<a>` might be more appropriate\nhttps://svelte.dev/e/a11y_click_events_have_key_events(a11y_click_events_have_key_events)","line":636,"column":3,"nodeType":null,"endLine":664,"endColumn":9},{"ruleId":"svelte/valid-compile","severity":1,"message":"`<div>` with a click handler must have an ARIA role\nhttps://svelte.dev/e/a11y_no_static_element_interactions(a11y_no_static_element_interactions)","line":636,"column":3,"nodeType":null,"endLine":664,"endColumn":9},{"ruleId":"svelte/valid-compile","severity":1,"message":"Visible, non-interactive elements with a click event must be accompanied by a keyboard event handler. Consider whether an interactive element such as `<button type=\"button\">` or `<a>` might be more appropriate\nhttps://svelte.dev/e/a11y_click_events_have_key_events(a11y_click_events_have_key_events)","line":637,"column":4,"nodeType":null,"endLine":663,"endColumn":10},{"ruleId":"svelte/valid-compile","severity":1,"message":"`<div>` with a click handler must have an ARIA role\nhttps://svelte.dev/e/a11y_no_static_element_interactions(a11y_no_static_element_interactions)","line":637,"column":4,"nodeType":null,"endLine":663,"endColumn":10},{"ruleId":"svelte/valid-compile","severity":1,"message":"Visible, non-interactive elements with a click event must be accompanied by a keyboard event handler. Consider whether an interactive element such as `<button type=\"button\">` or `<a>` might be more appropriate\nhttps://svelte.dev/e/a11y_click_events_have_key_events(a11y_click_events_have_key_events)","line":669,"column":3,"nodeType":null,"endLine":691,"endColumn":9},{"ruleId":"svelte/valid-compile","severity":1,"message":"`<div>` with a click handler must have an ARIA role\nhttps://svelte.dev/e/a11y_no_static_element_interactions(a11y_no_static_element_interactions)","line":669,"column":3,"nodeType":null,"endLine":691,"endColumn":9},{"ruleId":"svelte/valid-compile","severity":1,"message":"Visible, non-interactive elements with a click event must be accompanied by a keyboard event handler. Consider whether an interactive element such as `<button type=\"button\">` or `<a>` might be more appropriate\nhttps://svelte.dev/e/a11y_click_events_have_key_events(a11y_click_events_have_key_events)","line":670,"column":4,"nodeType":null,"endLine":690,"endColumn":10},{"ruleId":"svelte/valid-compile","severity":1,"message":"`<div>` with a click handler must have an ARIA role\nhttps://svelte.dev/e/a11y_no_static_element_interactions(a11y_no_static_element_interactions)","line":670,"column":4,"nodeType":null,"endLine":690,"endColumn":10},{"ruleId":"svelte/valid-compile","severity":1,"message":"Visible, non-interactive elements with a click event must be accompanied by a keyboard event handler. Consider whether an interactive element such as `<button type=\"button\">` or `<a>` might be more appropriate\nhttps://svelte.dev/e/a11y_click_events_have_key_events(a11y_click_events_have_key_events)","line":696,"column":3,"nodeType":null,"endLine":718,"endColumn":9},{"ruleId":"svelte/valid-compile","severity":1,"message":"`<div>` with a click handler must have an ARIA role\nhttps://svelte.dev/e/a11y_no_static_element_interactions(a11y_no_static_element_interactions)","line":696,"column":3,"nodeType":null,"endLine":718,"endColumn":9},{"ruleId":"svelte/valid-compile","severity":1,"message":"Visible, non-interactive elements with a click event must be accompanied by a keyboard event handler. Consider whether an interactive element such as `<button type=\"button\">` or `<a>` might be more appropriate\nhttps://svelte.dev/e/a11y_click_events_have_key_events(a11y_click_events_have_key_events)","line":697,"column":4,"nodeType":null,"endLine":717,"endColumn":10},{"ruleId":"svelte/valid-compile","severity":1,"message":"`<div>` with a click handler must have an ARIA role\nhttps://svelte.dev/e/a11y_no_static_element_interactions(a11y_no_static_element_interactions)","line":697,"column":4,"nodeType":null,"endLine":717,"endColumn":10}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":53,"fixableErrorCount":0,"fixableWarningCount":0,"source":"<script lang=\"ts\">\n\timport { onMount } from 'svelte';\n\timport { browser } from '$app/environment';\n\timport { apiClient } from '$lib/api/client';\n\timport { goto } from '$app/navigation';\n\timport { authStore } from '$lib/stores/auth';\n\timport type { User } from '$lib/types';\n\timport type { Server } from '$lib/types';\n\n\tlet currentUser: User | null = null;\n\tlet users: User[] = [];\n\tlet onlineUsers: any[] = [];\n\tlet systemHealth: any = null;\n\tlet metrics: any = null;\n\tlet auditLogs: any[] = [];\n\tlet userLatency: any[] = [];\n\tlet servers: Server[] = [];\n\t\n\tlet activeTab = 'users';\n\tlet isLoading = false;\n\tlet error = '';\n\t\n\t// User management\n\tlet showCreateUserModal = false;\n\tlet showEditUserModal = false;\n\tlet selectedUser: User | null = null;\n\tlet newUser = { username: '', email: '', password: '', role: 'user' };\n\tlet editUser = { username: '', email: '', password: '' };\n\t\n\t// Moderation\n\tlet showModerationModal = false;\n\tlet moderationAction = '';\n\tlet moderationReason = '';\n\tlet moderationDuration = 0;\n\t\n\t// Server management\n\tlet showCreateServerModal = false;\n\tlet newServer = { name: '', description: '' };\n\tlet selectedServer: Server | null = null;\n\tlet editServerData: { name: string; description: string } = { name: '', description: '' };\n\tlet showEditServerModal = false;\n\t\n\tonMount(async () => {\n\t\tif (!browser) return;\n\t\t\n\t\t// Check if user is authenticated via auth store\n\t\tconst auth = $authStore;\n\t\tif (!auth.user || !auth.token) {\n\t\t\tconsole.log('Admin page - No authenticated user');\n\t\t\tgoto('/');\n\t\t\treturn;\n\t\t}\n\t\t\n\t\t// Check if user has admin privileges\n\t\tif (auth.user.role !== 'admin' && auth.user.role !== 'super_admin') {\n\t\t\tconsole.log('Admin page - Access denied, role:', auth.user.role);\n\t\t\terror = 'Access denied. Admin privileges required.';\n\t\t\treturn;\n\t\t}\n\t\t\n\t\t// Set current user from auth store\n\t\tcurrentUser = auth.user;\n\t\tapiClient.setToken(auth.token);\n\t\t\n\t\tconsole.log('Admin page - Loading data for user:', currentUser.username);\n\t\tawait loadData();\n\t});\n\t\n\tasync function loadData() {\n\t\tisLoading = true;\n\t\terror = '';\n\t\t\n\t\ttry {\n\t\t\t// Load data with individual error handling\n\t\t\tconst promises = [\n\t\t\t\tloadUsers().catch(err => console.error('Failed to load users:', err)),\n\t\t\t\tloadSystemHealth().catch(err => console.error('Failed to load health:', err)),\n\t\t\t\tloadMetrics().catch(err => console.error('Failed to load metrics:', err)),\n\t\t\t\tloadOnlineUsers().catch(err => console.error('Failed to load online users:', err)),\n\t\t\t\tloadAuditLogs().catch(err => console.error('Failed to load audit logs:', err)),\n\t\t\t\tloadUserLatency().catch(err => console.error('Failed to load user latency:', err)),\n\t\t\t\tloadServers().catch(err => console.error('Failed to load servers:', err))\n\t\t\t];\n\t\t\t\n\t\t\tawait Promise.allSettled(promises);\n\t\t} catch (err: any) {\n\t\t\tconsole.error('Load data error:', err);\n\t\t\terror = err.message || 'Failed to load data';\n\t\t} finally {\n\t\t\tisLoading = false;\n\t\t}\n\t}\n\t\n\tasync function loadUsers() {\n\t\tusers = await apiClient.getUsers();\n\t}\n\t\n\tasync function loadSystemHealth() {\n\t\tsystemHealth = await apiClient.getAdminHealth();\n\t}\n\t\n\tasync function loadMetrics() {\n\t\tmetrics = await apiClient.getMetrics();\n\t}\n\t\n\tasync function loadOnlineUsers() {\n\t\tonlineUsers = await apiClient.getOnlineUsers();\n\t}\n\t\n\tasync function loadAuditLogs() {\n\t\tauditLogs = await apiClient.getAuditLogs();\n\t}\n\t\n\tasync function loadUserLatency() {\n\t\tuserLatency = await apiClient.getUserLatency();\n\t}\n\n\tasync function loadServers() {\n\t\tservers = await apiClient.getServers();\n\t}\n\n\tasync function createServer() {\n\t\ttry {\n\t\t\tawait apiClient.createServer(newServer);\n\t\t\tshowCreateServerModal = false;\n\t\t\tnewServer = { name: '', description: '' };\n\t\t\tawait loadServers();\n\t\t} catch (err: any) {\n\t\t\tconsole.error('Failed to create server:', err);\n\t\t}\n\t}\n\n\tfunction editServer(server: Server) {\n\t\tselectedServer = server;\n\t\teditServerData = { \n\t\t\tname: server.name, \n\t\t\tdescription: server.description || '' \n\t\t};\n\t\tshowEditServerModal = true;\n\t}\n\n\tasync function updateServer() {\n\t\tif (!selectedServer) return;\n\t\t\n\t\ttry {\n\t\t\tawait apiClient.updateServer(selectedServer.id, editServerData);\n\t\t\tshowEditServerModal = false;\n\t\t\tselectedServer = null;\n\t\t\tawait loadServers();\n\t\t} catch (err: unknown) {\n\t\t\tconst error = err as Error;\n\t\t\tconsole.error('Failed to update server:', error);\n\t\t}\n\t}\n\n\tasync function deleteServer(serverId: number) {\n\t\tif (confirm('Are you sure you want to delete this server?')) {\n\t\t\ttry {\n\t\t\t\tawait apiClient.deleteServer(serverId);\n\t\t\t\tawait loadServers();\n\t\t\t} catch (err: unknown) {\n\t\t\t\tconst error = err as Error;\n\t\t\t\tconsole.error('Failed to delete server:', error);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tasync function createUser() {\n\t\ttry {\n\t\t\tawait apiClient.createUser(newUser);\n\t\t\tshowCreateUserModal = false;\n\t\t\tnewUser = { username: '', email: '', password: '', role: 'user' };\n\t\t\tawait loadUsers();\n\t\t} catch (err: any) {\n\t\t\tconsole.error('Failed to create user:', err);\n\t\t}\n\t}\n\t\n\tfunction openEditUserModal(user: User) {\n\t\tselectedUser = user;\n\t\teditUser = { username: user.username, email: user.email || '', password: '' };\n\t\tshowEditUserModal = true;\n\t}\n\t\n\tasync function updateUser() {\n\t\tif (!selectedUser) return;\n\t\t\n\t\ttry {\n\t\t\tawait apiClient.updateUser(selectedUser.id, editUser);\n\t\t\tshowEditUserModal = false;\n\t\t\tselectedUser = null;\n\t\t\tawait loadUsers();\n\t\t} catch (err: any) {\n\t\t\tconsole.error('Failed to update user:', err);\n\t\t}\n\t}\n\t\n\tasync function deleteUser(user: User) {\n\t\tif (confirm(`Are you sure you want to delete user ${user.username}?`)) {\n\t\t\ttry {\n\t\t\t\tawait apiClient.deleteUser(user.id);\n\t\t\t\tawait loadUsers();\n\t\t\t} catch (err: any) {\n\t\t\t\tconsole.error('Failed to delete user:', err);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tasync function updateUserRole(user: User, role: string) {\n\t\ttry {\n\t\t\tawait apiClient.updateUserRole(user.id, role);\n\t\t\tawait loadUsers();\n\t\t} catch (err: any) {\n\t\t\tconsole.error('Failed to update user role:', err);\n\t\t}\n\t}\n\t\n\tfunction openModerationModal(user: any, action: string) {\n\t\tselectedUser = user;\n\t\tmoderationAction = action;\n\t\tmoderationReason = '';\n\t\tmoderationDuration = 0;\n\t\tshowModerationModal = true;\n\t}\n\t\n\tasync function performModeration() {\n\t\tif (!selectedUser) return;\n\t\t\n\t\ttry {\n\t\t\tswitch (moderationAction) {\n\t\t\t\tcase 'kick':\n\t\t\t\t\tawait apiClient.kickUser(selectedUser.id, moderationReason);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'ban':\n\t\t\t\t\tawait apiClient.banUser(selectedUser.id, moderationReason, moderationDuration);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'mute':\n\t\t\t\t\tawait apiClient.muteUser(selectedUser.id, moderationReason, moderationDuration);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'unban':\n\t\t\t\t\tawait apiClient.unbanUser(selectedUser.id);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'unmute':\n\t\t\t\t\tawait apiClient.unmuteUser(selectedUser.id);\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\t\n\t\t\tshowModerationModal = false;\n\t\t\tselectedUser = null;\n\t\t\tawait loadOnlineUsers();\n\t\t} catch (err: any) {\n\t\t\tconsole.error('Failed to perform moderation:', err);\n\t\t}\n\t}\n\t\n\tfunction getRoleBadgeColor(role: string) {\n\t\tswitch (role) {\n\t\t\tcase 'super_admin': return 'badge-red';\n\t\t\tcase 'admin': return 'badge-blue';\n\t\t\tdefault: return 'badge-gray';\n\t\t}\n\t}\n\t\n\tfunction getStatusBadgeColor(isOnline: boolean) {\n\t\treturn isOnline ? 'badge-green' : 'badge-gray';\n\t}\n</script>\n\n<svelte:head>\n\t<title>Admin Dashboard - Fethur</title>\n</svelte:head>\n\n<div class=\"admin-page\">\n\t<div class=\"admin-header\">\n\t\t<h1>Admin Dashboard</h1>\n\t\t<p>Welcome, {$authStore.user?.username || currentUser?.username || 'User'} ({$authStore.user?.role || currentUser?.role})</p>\n\t</div>\n\n\t{#if error}\n\t\t<div class=\"error-message\">\n\t\t\t<div class=\"error-content\">\n\t\t\t\t<p>{error}</p>\n\t\t\t\t<button class=\"retry-button\" on:click={loadData}>\n\t\t\t\t\t🔄 Retry\n\t\t\t\t</button>\n\t\t\t</div>\n\t\t</div>\n\t{/if}\n\n\t<div class=\"admin-tabs\">\n\t\t<button \n\t\t\tclass=\"tab-button {activeTab === 'users' ? 'active' : ''}\"\n\t\t\ton:click={() => activeTab = 'users'}\n\t\t>\n\t\t\tUser Management\n\t\t</button>\n\t\t<button \n\t\t\tclass=\"tab-button {activeTab === 'moderation' ? 'active' : ''}\"\n\t\t\ton:click={() => activeTab = 'moderation'}\n\t\t>\n\t\t\tModeration\n\t\t</button>\n\t\t<button \n\t\t\tclass=\"tab-button {activeTab === 'health' ? 'active' : ''}\"\n\t\t\ton:click={() => activeTab = 'health'}\n\t\t>\n\t\t\tSystem Health\n\t\t</button>\n\t\t<button \n\t\t\tclass=\"tab-button {activeTab === 'metrics' ? 'active' : ''}\" \n\t\t\ton:click={() => activeTab = 'metrics'}\n\t\t>\n\t\t\tMetrics\n\t\t</button>\n\t\t<button \n\t\t\tclass=\"tab-button {activeTab === 'logs' ? 'active' : ''}\"\n\t\t\ton:click={() => activeTab = 'logs'}\n\t\t>\n\t\t\tAudit Logs\n\t\t</button>\n\t\t<button \n\t\t\tclass=\"tab-button {activeTab === 'servers' ? 'active' : ''}\"\n\t\t\ton:click={() => activeTab = 'servers'}\n\t\t>\n\t\t\tServers\n\t\t</button>\n\t</div>\n\n\t{#if isLoading}\n\t\t<div class=\"loading\">\n\t\t\tLoading...\n\t\t</div>\n\t{:else}\n\t\t{#if activeTab === 'users'}\n\t\t\t<div class=\"users-section\">\n\t\t\t\t<div class=\"section-header\">\n\t\t\t\t\t<h2>User Management</h2>\n\t\t\t\t\t<button class=\"btn-primary\" on:click={() => showCreateUserModal = true}>\n\t\t\t\t\t\tCreate User\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\n\t\t\t\t<div class=\"users-table\">\n\t\t\t\t\t<table>\n\t\t\t\t\t\t<thead>\n\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t<th>ID</th>\n\t\t\t\t\t\t\t\t<th>Username</th>\n\t\t\t\t\t\t\t\t<th>Email</th>\n\t\t\t\t\t\t\t\t<th>Role</th>\n\t\t\t\t\t\t\t\t<th>Status</th>\n\t\t\t\t\t\t\t\t<th>Messages</th>\n\t\t\t\t\t\t\t\t<th>Servers</th>\n\t\t\t\t\t\t\t\t<th>Created</th>\n\t\t\t\t\t\t\t\t<th>Actions</th>\n\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t</thead>\n\t\t\t\t\t\t<tbody>\n\t\t\t\t\t\t\t{#each users as user}\n\t\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t\t<td>{user.id}</td>\n\t\t\t\t\t\t\t\t\t<td>{user.username}</td>\n\t\t\t\t\t\t\t\t\t<td>{user.email}</td>\n\t\t\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t\t\t<span class=\"badge {getRoleBadgeColor(user.role || 'user')}\">\n\t\t\t\t\t\t\t\t\t\t\t{user.role || 'user'}\n\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t\t\t<span class=\"badge {getStatusBadgeColor(user.isOnline)}\">\n\t\t\t\t\t\t\t\t\t\t\t{user.isOnline ? 'Online' : 'Offline'}\n\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t\t<td>{user.messageCount || 0}</td>\n\t\t\t\t\t\t\t\t\t<td>{user.serverCount || 0}</td>\n\t\t\t\t\t\t\t\t\t<td>{user.createdAt.toLocaleDateString()}</td>\n\t\t\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t\t\t<div class=\"action-buttons\">\n\t\t\t\t\t\t\t\t\t\t\t<button class=\"btn-small\" on:click={() => openEditUserModal(user)}>\n\t\t\t\t\t\t\t\t\t\t\t\tEdit\n\t\t\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t\t\t\t<button class=\"btn-small btn-danger\" on:click={() => deleteUser(user)}>\n\t\t\t\t\t\t\t\t\t\t\t\tDelete\n\t\t\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t\t\t\t<select on:change={(e) => updateUserRole(user, (e.target as HTMLSelectElement).value)} value={user.role || 'user'}>\n\t\t\t\t\t\t\t\t\t\t\t\t<option value=\"user\">User</option>\n\t\t\t\t\t\t\t\t\t\t\t\t<option value=\"admin\">Admin</option>\n\t\t\t\t\t\t\t\t\t\t\t\t<option value=\"super_admin\">Super Admin</option>\n\t\t\t\t\t\t\t\t\t\t\t</select>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t{/each}\n\t\t\t\t\t\t</tbody>\n\t\t\t\t\t</table>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t{:else if activeTab === 'moderation'}\n\t\t\t<div class=\"moderation-section\">\n\t\t\t\t<div class=\"section-header\">\n\t\t\t\t\t<h2>Moderation Tools</h2>\n\t\t\t\t</div>\n\n\t\t\t\t<div class=\"online-users\">\n\t\t\t\t\t<h3>Online Users</h3>\n\t\t\t\t\t<div class=\"users-grid\">\n\t\t\t\t\t\t{#each onlineUsers as user}\n\t\t\t\t\t\t\t<div class=\"user-card\">\n\t\t\t\t\t\t\t\t<div class=\"user-info\">\n\t\t\t\t\t\t\t\t\t<h4>{user.username}</h4>\n\t\t\t\t\t\t\t\t\t<p>IP: {user.ip}</p>\n\t\t\t\t\t\t\t\t\t<p>Connected: {new Date(user.connected_at).toLocaleString()}</p>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t<div class=\"moderation-actions\">\n\t\t\t\t\t\t\t\t\t<button class=\"btn-small\" on:click={() => openModerationModal(user, 'kick')}>\n\t\t\t\t\t\t\t\t\t\tKick\n\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t\t<button class=\"btn-small btn-warning\" on:click={() => openModerationModal(user, 'ban')}>\n\t\t\t\t\t\t\t\t\t\tBan\n\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t\t<button class=\"btn-small btn-warning\" on:click={() => openModerationModal(user, 'mute')}>\n\t\t\t\t\t\t\t\t\t\tMute\n\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t{/each}\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t{:else if activeTab === 'health'}\n\t\t\t<div class=\"health-section\">\n\t\t\t\t<div class=\"section-header\">\n\t\t\t\t\t<h2>System Health</h2>\n\t\t\t\t\t<button class=\"btn-secondary\" on:click={loadSystemHealth}>\n\t\t\t\t\t\tRefresh\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\n\t\t\t\t{#if systemHealth}\n\t\t\t\t\t<div class=\"health-grid\">\n\t\t\t\t\t\t<div class=\"health-card\">\n\t\t\t\t\t\t\t<h3>Database</h3>\n\t\t\t\t\t\t\t<p class=\"status {systemHealth.database?.status === 'healthy' ? 'healthy' : 'unhealthy'}\">\n\t\t\t\t\t\t\t\t{systemHealth.database?.status || 'Unknown'}\n\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t<p>Connection: {systemHealth.database?.connection || 'Unknown'}</p>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<div class=\"health-card\">\n\t\t\t\t\t\t\t<h3>WebSocket</h3>\n\t\t\t\t\t\t\t<p class=\"status {systemHealth.websocket?.status === 'healthy' ? 'healthy' : 'unhealthy'}\">\n\t\t\t\t\t\t\t\t{systemHealth.websocket?.status || 'Unknown'}\n\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t<p>Connections: {systemHealth.websocket?.connections || 0}</p>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<div class=\"health-card\">\n\t\t\t\t\t\t\t<h3>API</h3>\n\t\t\t\t\t\t\t<p class=\"status {systemHealth.api?.status === 'healthy' ? 'healthy' : 'unhealthy'}\">\n\t\t\t\t\t\t\t\t{systemHealth.api?.status || 'Unknown'}\n\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t<p>Uptime: {systemHealth.api?.uptime || 'Unknown'}</p>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t{/if}\n\t\t\t</div>\n\t\t{:else if activeTab === 'metrics'}\n\t\t\t<div class=\"metrics-section\">\n\t\t\t\t<div class=\"section-header\">\n\t\t\t\t\t<h2>System Metrics</h2>\n\t\t\t\t\t<button class=\"btn-secondary\" on:click={loadMetrics}>\n\t\t\t\t\t\tRefresh\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\n\t\t\t\t{#if metrics}\n\t\t\t\t\t<div class=\"metrics-grid\">\n\t\t\t\t\t\t<div class=\"metric-card\">\n\t\t\t\t\t\t\t<h3>User Activity (24h)</h3>\n\t\t\t\t\t\t\t<p>Active Users: {metrics.user_activity?.active_users_24h}</p>\n\t\t\t\t\t\t\t<p>New Users: {metrics.user_activity?.new_users_today}</p>\n\t\t\t\t\t\t\t<p>Messages: {metrics.user_activity?.messages_today}</p>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<div class=\"metric-card\">\n\t\t\t\t\t\t\t<h3>Role Distribution</h3>\n\t\t\t\t\t\t\t{#each Object.entries(metrics.role_distribution || {}) as [role, count]}\n\t\t\t\t\t\t\t\t<p>{role}: {count}</p>\n\t\t\t\t\t\t\t{/each}\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<div class=\"metric-card\">\n\t\t\t\t\t\t\t<h3>Online Users</h3>\n\t\t\t\t\t\t\t<p>Currently Online: {metrics.online_users}</p>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t{/if}\n\t\t\t</div>\n\t\t{:else if activeTab === 'logs'}\n\t\t\t<div class=\"logs-section\">\n\t\t\t\t<div class=\"section-header\">\n\t\t\t\t\t<h2>Audit Logs</h2>\n\t\t\t\t\t<button class=\"btn-secondary\" on:click={loadAuditLogs}>\n\t\t\t\t\t\tRefresh\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\n\t\t\t\t<div class=\"logs-table\">\n\t\t\t\t\t<table>\n\t\t\t\t\t\t<thead>\n\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t<th>Time</th>\n\t\t\t\t\t\t\t\t<th>Admin</th>\n\t\t\t\t\t\t\t\t<th>Action</th>\n\t\t\t\t\t\t\t\t<th>Details</th>\n\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t</thead>\n\t\t\t\t\t\t<tbody>\n\t\t\t\t\t\t\t{#each auditLogs as log}\n\t\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t\t<td>{new Date(log.created_at).toLocaleString()}</td>\n\t\t\t\t\t\t\t\t\t<td>{log.admin_username}</td>\n\t\t\t\t\t\t\t\t\t<td>{log.action}</td>\n\t\t\t\t\t\t\t\t\t<td>{log.details}</td>\n\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t{/each}\n\t\t\t\t\t\t</tbody>\n\t\t\t\t\t</table>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t{:else if activeTab === 'servers'}\n\t\t\t<div class=\"servers-section\">\n\t\t\t\t<div class=\"section-header\">\n\t\t\t\t\t<h2>Server Management</h2>\n\t\t\t\t\t<button class=\"btn-primary\" on:click={() => showCreateServerModal = true}>\n\t\t\t\t\t\tCreate Server\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\n\t\t\t\t<div class=\"servers-grid\">\n\t\t\t\t\t{#each servers as server}\n\t\t\t\t\t\t<div class=\"server-card\">\n\t\t\t\t\t\t\t<h3>{server.name}</h3>\n\t\t\t\t\t\t\t<p>{server.description || 'No description'}</p>\n\t\t\t\t\t\t\t<div class=\"server-stats\">\n\t\t\t\t\t\t\t\t<span>Channels: {server.channels?.length || 0}</span>\n\t\t\t\t\t\t\t\t<span>Members: {server.members?.length || 0}</span>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div class=\"server-actions\">\n\t\t\t\t\t\t\t\t<button class=\"btn-secondary\" on:click={() => editServer(server)}>\n\t\t\t\t\t\t\t\t\tEdit\n\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t<button class=\"btn-danger\" on:click={() => deleteServer(server.id)}>\n\t\t\t\t\t\t\t\t\tDelete\n\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t{/each}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t{/if}\n\t{/if}\n\n\t<!-- Create User Modal -->\n\t{#if showCreateUserModal}\n\t\t<div class=\"modal-overlay\" on:click={() => showCreateUserModal = false}>\n\t\t\t<div class=\"modal\" on:click|stopPropagation>\n\t\t\t\t<h2>Create User</h2>\n\t\t\t\t<form on:submit|preventDefault={createUser}>\n\t\t\t\t\t<div class=\"form-group\">\n\t\t\t\t\t\t<label for=\"username\">Username</label>\n\t\t\t\t\t\t<input type=\"text\" id=\"username\" bind:value={newUser.username} required />\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"form-group\">\n\t\t\t\t\t\t<label for=\"email\">Email</label>\n\t\t\t\t\t\t<input type=\"email\" id=\"email\" bind:value={newUser.email} />\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"form-group\">\n\t\t\t\t\t\t<label for=\"password\">Password</label>\n\t\t\t\t\t\t<input type=\"password\" id=\"password\" bind:value={newUser.password} required />\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"form-group\">\n\t\t\t\t\t\t<label for=\"role\">Role</label>\n\t\t\t\t\t\t<select id=\"role\" bind:value={newUser.role}>\n\t\t\t\t\t\t\t<option value=\"user\">User</option>\n\t\t\t\t\t\t\t<option value=\"admin\">Admin</option>\n\t\t\t\t\t\t\t<option value=\"super_admin\">Super Admin</option>\n\t\t\t\t\t\t</select>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"modal-actions\">\n\t\t\t\t\t\t<button type=\"button\" class=\"btn-secondary\" on:click={() => showCreateUserModal = false}>\n\t\t\t\t\t\t\tCancel\n\t\t\t\t\t\t</button>\n\t\t\t\t\t\t<button type=\"submit\" class=\"btn-primary\">\n\t\t\t\t\t\t\tCreate User\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</div>\n\t\t\t\t</form>\n\t\t\t</div>\n\t\t</div>\n\t{/if}\n\n\t<!-- Edit User Modal -->\n\t{#if showEditUserModal}\n\t\t<div class=\"modal-overlay\" on:click={() => showEditUserModal = false}>\n\t\t\t<div class=\"modal\" on:click|stopPropagation>\n\t\t\t\t<h2>Edit User</h2>\n\t\t\t\t<form on:submit|preventDefault={updateUser}>\n\t\t\t\t\t<div class=\"form-group\">\n\t\t\t\t\t\t<label for=\"edit-username\">Username</label>\n\t\t\t\t\t\t<input type=\"text\" id=\"edit-username\" bind:value={editUser.username} required />\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"form-group\">\n\t\t\t\t\t\t<label for=\"edit-email\">Email</label>\n\t\t\t\t\t\t<input type=\"email\" id=\"edit-email\" bind:value={editUser.email} />\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"form-group\">\n\t\t\t\t\t\t<label for=\"edit-password\">Password (leave blank to keep current)</label>\n\t\t\t\t\t\t<input type=\"password\" id=\"edit-password\" bind:value={editUser.password} />\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"modal-actions\">\n\t\t\t\t\t\t<button type=\"button\" class=\"btn-secondary\" on:click={() => showEditUserModal = false}>\n\t\t\t\t\t\t\tCancel\n\t\t\t\t\t\t</button>\n\t\t\t\t\t\t<button type=\"submit\" class=\"btn-primary\">\n\t\t\t\t\t\t\tUpdate User\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</div>\n\t\t\t\t</form>\n\t\t\t</div>\n\t\t</div>\n\t{/if}\n\n\t<!-- Moderation Modal -->\n\t{#if showModerationModal}\n\t\t<div class=\"modal-overlay\" on:click={() => showModerationModal = false}>\n\t\t\t<div class=\"modal\" on:click|stopPropagation>\n\t\t\t\t<h2>{moderationAction.charAt(0).toUpperCase() + moderationAction.slice(1)} User</h2>\n\t\t\t\t<p>User: {selectedUser?.username}</p>\n\t\t\t\t\n\t\t\t\t{#if moderationAction !== 'unban' && moderationAction !== 'unmute'}\n\t\t\t\t\t<div class=\"form-group\">\n\t\t\t\t\t\t<label for=\"reason\">Reason</label>\n\t\t\t\t\t\t<input type=\"text\" id=\"reason\" bind:value={moderationReason} />\n\t\t\t\t\t</div>\n\t\t\t\t\t\n\t\t\t\t\t{#if moderationAction === 'ban' || moderationAction === 'mute'}\n\t\t\t\t\t\t<div class=\"form-group\">\n\t\t\t\t\t\t\t<label for=\"duration\">Duration ({moderationAction === 'ban' ? 'hours' : 'minutes'}) (0 for permanent)</label>\n\t\t\t\t\t\t\t<input type=\"number\" id=\"duration\" bind:value={moderationDuration} min=\"0\" />\n\t\t\t\t\t\t</div>\n\t\t\t\t\t{/if}\n\t\t\t\t{/if}\n\t\t\t\t\n\t\t\t\t<div class=\"modal-actions\">\n\t\t\t\t\t<button type=\"button\" class=\"btn-secondary\" on:click={() => showModerationModal = false}>\n\t\t\t\t\t\tCancel\n\t\t\t\t\t</button>\n\t\t\t\t\t<button type=\"button\" class=\"btn-primary\" on:click={performModeration}>\n\t\t\t\t\t\t{moderationAction.charAt(0).toUpperCase() + moderationAction.slice(1)}\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t{/if}\n\n\t<!-- Create Server Modal -->\n\t{#if showCreateServerModal}\n\t\t<div class=\"modal-overlay\" on:click={() => showCreateServerModal = false}>\n\t\t\t<div class=\"modal\" on:click|stopPropagation>\n\t\t\t\t<h2>Create Server</h2>\n\t\t\t\t<form on:submit|preventDefault={createServer}>\n\t\t\t\t\t<div class=\"form-group\">\n\t\t\t\t\t\t<label for=\"server-name\">Server Name</label>\n\t\t\t\t\t\t<input type=\"text\" id=\"server-name\" bind:value={newServer.name} required />\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"form-group\">\n\t\t\t\t\t\t<label for=\"server-description\">Description</label>\n\t\t\t\t\t\t<textarea id=\"server-description\" bind:value={newServer.description} rows=\"3\"></textarea>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"modal-actions\">\n\t\t\t\t\t\t<button type=\"button\" class=\"btn-secondary\" on:click={() => showCreateServerModal = false}>\n\t\t\t\t\t\t\tCancel\n\t\t\t\t\t\t</button>\n\t\t\t\t\t\t<button type=\"submit\" class=\"btn-primary\">\n\t\t\t\t\t\t\tCreate Server\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</div>\n\t\t\t\t</form>\n\t\t\t</div>\n\t\t</div>\n\t{/if}\n\n\t<!-- Edit Server Modal -->\n\t{#if showEditServerModal}\n\t\t<div class=\"modal-overlay\" on:click={() => showEditServerModal = false}>\n\t\t\t<div class=\"modal\" on:click|stopPropagation>\n\t\t\t\t<h2>Edit Server</h2>\n\t\t\t\t<form on:submit|preventDefault={updateServer}>\n\t\t\t\t\t<div class=\"form-group\">\n\t\t\t\t\t\t<label for=\"edit-server-name\">Server Name</label>\n\t\t\t\t\t\t<input type=\"text\" id=\"edit-server-name\" bind:value={editServerData.name} required />\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"form-group\">\n\t\t\t\t\t\t<label for=\"edit-server-description\">Description</label>\n\t\t\t\t\t\t<textarea id=\"edit-server-description\" bind:value={editServerData.description} rows=\"3\"></textarea>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"modal-actions\">\n\t\t\t\t\t\t<button type=\"button\" class=\"btn-secondary\" on:click={() => showEditServerModal = false}>\n\t\t\t\t\t\t\tCancel\n\t\t\t\t\t\t</button>\n\t\t\t\t\t\t<button type=\"submit\" class=\"btn-primary\">\n\t\t\t\t\t\t\tUpdate Server\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</div>\n\t\t\t\t</form>\n\t\t\t</div>\n\t\t</div>\n\t{/if}\n</div>\n\n<style>\n\t.admin-page {\n\t\tpadding: 2rem;\n\t\tmax-width: 1400px;\n\t\tmargin: 0 auto;\n\t\tbackground: var(--color-bg);\n\t\tcolor: var(--color-text);\n\t\tmin-height: 100vh;\n\t}\n\n\t.admin-header {\n\t\tmargin-bottom: 2rem;\n\t\ttext-align: center;\n\t}\n\n\t.admin-header h1 {\n\t\tfont-size: var(--font-size-3xl);\n\t\tmargin-bottom: 0.5rem;\n\t\tcolor: #ffffff;\n\t\tfont-weight: 600;\n\t}\n\n\t.admin-header p {\n\t\tcolor: var(--color-text-muted);\n\t\tfont-size: var(--font-size-lg);\n\t}\n\n\t.error-message {\n\t\tbackground: rgba(239, 68, 68, 0.1);\n\t\tcolor: var(--color-error);\n\t\tpadding: 1rem;\n\t\tborder-radius: var(--radius-md);\n\t\tmargin-bottom: 1rem;\n\t\tborder: 1px solid var(--color-error);\n\t}\n\n\t.error-content {\n\t\tdisplay: flex;\n\t\talign-items: center;\n\t\tjustify-content: space-between;\n\t\tgap: 1rem;\n\t}\n\n\t.error-content p {\n\t\tmargin: 0;\n\t\tflex: 1;\n\t}\n\n\t.retry-button {\n\t\tbackground: var(--color-error);\n\t\tcolor: white;\n\t\tborder: none;\n\t\tpadding: 0.5rem 1rem;\n\t\tborder-radius: var(--radius-sm);\n\t\tcursor: pointer;\n\t\tfont-size: var(--font-size-sm);\n\t\ttransition: background-color 0.2s;\n\t}\n\n\t.retry-button:hover {\n\t\tbackground: #dc2626;\n\t}\n\n\t.admin-tabs {\n\t\tdisplay: flex;\n\t\tgap: 0.5rem;\n\t\tmargin-bottom: 2rem;\n\t\tborder-bottom: 2px solid var(--color-border);\n\t}\n\n\t.tab-button {\n\t\tpadding: 0.75rem 1.5rem;\n\t\tborder: none;\n\t\tbackground: none;\n\t\tcursor: pointer;\n\t\tborder-bottom: 2px solid transparent;\n\t\ttransition: all 0.2s;\n\t\tcolor: var(--color-text-muted);\n\t\tfont-weight: 500;\n\t}\n\n\t.tab-button:hover {\n\t\tbackground: var(--color-surface);\n\t\tcolor: var(--color-text);\n\t}\n\n\t.tab-button.active {\n\t\tborder-bottom-color: var(--color-accent);\n\t\tcolor: var(--color-accent);\n\t}\n\n\t.section-header {\n\t\tdisplay: flex;\n\t\tjustify-content: space-between;\n\t\talign-items: center;\n\t\tmargin-bottom: 1.5rem;\n\t}\n\n\t.section-header h2 {\n\t\tmargin: 0;\n\t\tcolor: #ffffff;\n\t\tfont-size: var(--font-size-xl);\n\t\tfont-weight: 600;\n\t}\n\n\t.loading {\n\t\ttext-align: center;\n\t\tpadding: 2rem;\n\t\tfont-size: var(--font-size-lg);\n\t\tcolor: var(--color-text-muted);\n\t}\n\n\t/* Tables */\n\t.users-table, .logs-table {\n\t\tbackground: var(--color-surface);\n\t\tborder-radius: var(--radius-md);\n\t\toverflow: hidden;\n\t\tborder: 1px solid var(--color-border);\n\t}\n\n\ttable {\n\t\twidth: 100%;\n\t\tborder-collapse: collapse;\n\t}\n\n\tth, td {\n\t\tpadding: 0.75rem;\n\t\ttext-align: left;\n\t\tborder-bottom: 1px solid var(--color-border);\n\t\tcolor: var(--color-text);\n\t}\n\n\tth {\n\t\tbackground: var(--color-primary);\n\t\tfont-weight: 600;\n\t\tcolor: var(--color-text);\n\t}\n\n\t.badge {\n\t\tpadding: 0.25rem 0.5rem;\n\t\tborder-radius: var(--radius-sm);\n\t\tfont-size: var(--font-size-xs);\n\t\tfont-weight: 500;\n\t}\n\n\t.badge-red {\n\t\tbackground: rgba(239, 68, 68, 0.2);\n\t\tcolor: #fca5a5;\n\t}\n\n\t.badge-blue {\n\t\tbackground: rgba(59, 130, 246, 0.2);\n\t\tcolor: #93c5fd;\n\t}\n\n\t.badge-green {\n\t\tbackground: rgba(16, 185, 129, 0.2);\n\t\tcolor: #6ee7b7;\n\t}\n\n\t.badge-gray {\n\t\tbackground: rgba(107, 114, 128, 0.2);\n\t\tcolor: #d1d5db;\n\t}\n\n\t.action-buttons {\n\t\tdisplay: flex;\n\t\tgap: 0.5rem;\n\t\talign-items: center;\n\t}\n\n\t.btn-small {\n\t\tpadding: 0.25rem 0.5rem;\n\t\tborder: none;\n\t\tborder-radius: var(--radius-sm);\n\t\tcursor: pointer;\n\t\tfont-size: var(--font-size-xs);\n\t\tbackground: var(--color-accent);\n\t\tcolor: white;\n\t\ttransition: background-color 0.2s;\n\t}\n\n\t.btn-small:hover {\n\t\tbackground: var(--color-accent-hover);\n\t}\n\n\t.btn-small.btn-danger {\n\t\tbackground: var(--color-error);\n\t}\n\n\t.btn-small.btn-danger:hover {\n\t\tbackground: #dc2626;\n\t}\n\n\t.btn-small.btn-warning {\n\t\tbackground: var(--color-warning);\n\t}\n\n\t.btn-small.btn-warning:hover {\n\t\tbackground: #d97706;\n\t}\n\n\t/* User Grid */\n\t.users-grid {\n\t\tdisplay: grid;\n\t\tgrid-template-columns: repeat(auto-fill, minmax(300px, 1fr));\n\t\tgap: 1rem;\n\t}\n\n\t.user-card {\n\t\tbackground: var(--color-surface);\n\t\tpadding: 1rem;\n\t\tborder-radius: var(--radius-md);\n\t\tborder: 1px solid var(--color-border);\n\t}\n\n\t.user-info h4 {\n\t\tmargin: 0 0 0.5rem 0;\n\t\tcolor: var(--color-text);\n\t}\n\n\t.user-info p {\n\t\tmargin: 0.25rem 0;\n\t\tcolor: var(--color-text-muted);\n\t\tfont-size: var(--font-size-sm);\n\t}\n\n\t.moderation-actions {\n\t\tdisplay: flex;\n\t\tgap: 0.5rem;\n\t\tmargin-top: 1rem;\n\t}\n\n\t/* Health and Metrics */\n\t.health-grid, .metrics-grid {\n\t\tdisplay: grid;\n\t\tgrid-template-columns: repeat(auto-fit, minmax(250px, 1fr));\n\t\tgap: 1rem;\n\t}\n\n\t.health-card, .metric-card {\n\t\tbackground: var(--color-surface);\n\t\tpadding: 1.5rem;\n\t\tborder-radius: var(--radius-md);\n\t\tborder: 1px solid var(--color-border);\n\t}\n\n\t.health-card h3, .metric-card h3 {\n\t\tmargin: 0 0 1rem 0;\n\t\tcolor: var(--color-text);\n\t}\n\n\t.health-card p, .metric-card p {\n\t\tmargin: 0.5rem 0;\n\t\tcolor: var(--color-text-muted);\n\t}\n\n\t.status {\n\t\tfont-weight: 600;\n\t}\n\n\t.status.healthy {\n\t\tcolor: var(--color-success);\n\t}\n\n\t.status.unhealthy {\n\t\tcolor: var(--color-error);\n\t}\n\n\t/* Servers */\n\t.servers-grid {\n\t\tdisplay: grid;\n\t\tgrid-template-columns: repeat(auto-fill, minmax(300px, 1fr));\n\t\tgap: 1rem;\n\t}\n\n\t.server-card {\n\t\tbackground: var(--color-surface);\n\t\tpadding: 1.5rem;\n\t\tborder-radius: var(--radius-md);\n\t\tborder: 1px solid var(--color-border);\n\t}\n\n\t.server-card h3 {\n\t\tmargin: 0 0 0.5rem 0;\n\t\tcolor: var(--color-text);\n\t}\n\n\t.server-card p {\n\t\tmargin: 0 0 1rem 0;\n\t\tcolor: var(--color-text-muted);\n\t}\n\n\t.server-stats {\n\t\tdisplay: flex;\n\t\tgap: 1rem;\n\t\tmargin-bottom: 1rem;\n\t\tfont-size: var(--font-size-sm);\n\t\tcolor: var(--color-text-muted);\n\t}\n\n\t.server-actions {\n\t\tdisplay: flex;\n\t\tgap: 0.5rem;\n\t}\n\n\t/* Buttons */\n\t.btn-primary, .btn-secondary, .btn-danger {\n\t\tpadding: 0.75rem 1.5rem;\n\t\tborder: none;\n\t\tborder-radius: var(--radius-md);\n\t\tcursor: pointer;\n\t\tfont-weight: 500;\n\t\ttransition: all 0.2s;\n\t}\n\n\t.btn-primary {\n\t\tbackground: var(--color-accent);\n\t\tcolor: white;\n\t}\n\n\t.btn-primary:hover {\n\t\tbackground: var(--color-accent-hover);\n\t}\n\n\t.btn-secondary {\n\t\tbackground: var(--color-primary);\n\t\tcolor: var(--color-text);\n\t}\n\n\t.btn-secondary:hover {\n\t\tbackground: var(--color-surface);\n\t}\n\n\t.btn-danger {\n\t\tbackground: var(--color-error);\n\t\tcolor: white;\n\t}\n\n\t.btn-danger:hover {\n\t\tbackground: #dc2626;\n\t}\n\n\t/* Modals */\n\t.modal-overlay {\n\t\tposition: fixed;\n\t\ttop: 0;\n\t\tleft: 0;\n\t\tright: 0;\n\t\tbottom: 0;\n\t\tbackground: rgba(0, 0, 0, 0.8);\n\t\tdisplay: flex;\n\t\talign-items: center;\n\t\tjustify-content: center;\n\t\tz-index: 1000;\n\t}\n\n\t.modal {\n\t\tbackground: var(--color-surface);\n\t\tpadding: 2rem;\n\t\tborder-radius: var(--radius-lg);\n\t\tmax-width: 500px;\n\t\twidth: 90%;\n\t\tmax-height: 90vh;\n\t\toverflow-y: auto;\n\t\tborder: 1px solid var(--color-border);\n\t}\n\n\t.modal h2 {\n\t\tmargin: 0 0 1.5rem 0;\n\t\tcolor: var(--color-text);\n\t}\n\n\t.form-group {\n\t\tmargin-bottom: 1rem;\n\t}\n\n\t.form-group label {\n\t\tdisplay: block;\n\t\tmargin-bottom: 0.5rem;\n\t\tfont-weight: 500;\n\t\tcolor: var(--color-text);\n\t}\n\n\t.form-group input, .form-group select, .form-group textarea {\n\t\twidth: 100%;\n\t\tpadding: 0.75rem;\n\t\tborder: 1px solid var(--color-border);\n\t\tborder-radius: var(--radius-sm);\n\t\tfont-size: var(--font-size-base);\n\t\tbackground: var(--color-primary);\n\t\tcolor: var(--color-text);\n\t}\n\n\t.form-group input:focus, .form-group select:focus, .form-group textarea:focus {\n\t\toutline: none;\n\t\tborder-color: var(--color-accent);\n\t\tbox-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);\n\t}\n\n\t.modal-actions {\n\t\tdisplay: flex;\n\t\tgap: 1rem;\n\t\tjustify-content: flex-end;\n\t\tmargin-top: 2rem;\n\t}\n</style> ","usedDeprecatedRules":[]},{"filePath":"/Users/bennerrr/Feathur/client/web/src/routes/chat/+page.svelte","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":90,"column":33,"nodeType":"MemberExpression","messageId":"unexpected","endLine":90,"endColumn":45,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[3674,3718],"text":""},"desc":"Remove the console.warn()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":95,"column":25,"nodeType":"MemberExpression","messageId":"unexpected","endLine":95,"endColumn":38,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[3860,3889],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":106,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":106,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4275,4333],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":138,"column":4,"nodeType":"MemberExpression","messageId":"unexpected","endLine":138,"endColumn":17,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[5203,5249],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":159,"column":4,"nodeType":"MemberExpression","messageId":"unexpected","endLine":159,"endColumn":17,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[5838,5885],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":179,"column":4,"nodeType":"MemberExpression","messageId":"unexpected","endLine":179,"endColumn":17,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[6389,6450],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":185,"column":4,"nodeType":"MemberExpression","messageId":"unexpected","endLine":185,"endColumn":15,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[6520,6577],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":187,"column":4,"nodeType":"MemberExpression","messageId":"unexpected","endLine":187,"endColumn":15,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[6615,6677],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":190,"column":4,"nodeType":"MemberExpression","messageId":"unexpected","endLine":190,"endColumn":17,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[6740,6805],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":196,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":196,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[6896,6957],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":216,"column":4,"nodeType":"MemberExpression","messageId":"unexpected","endLine":216,"endColumn":15,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[7613,7661],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":222,"column":4,"nodeType":"MemberExpression","messageId":"unexpected","endLine":222,"endColumn":15,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[7782,7832],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":227,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":227,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[8057,8110],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":238,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":238,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[8393,8459],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":244,"column":4,"nodeType":"MemberExpression","messageId":"unexpected","endLine":244,"endColumn":15,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[8544,8593],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":249,"column":4,"nodeType":"MemberExpression","messageId":"unexpected","endLine":249,"endColumn":15,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[8683,8735],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":254,"column":4,"nodeType":"MemberExpression","messageId":"unexpected","endLine":254,"endColumn":17,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[8826,8881],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":258,"column":4,"nodeType":"MemberExpression","messageId":"unexpected","endLine":258,"endColumn":15,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[8931,8991],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":18,"fixableErrorCount":0,"fixableWarningCount":0,"source":"<script lang=\"ts\">\n\timport { onMount, onDestroy } from 'svelte';\n\timport { get } from 'svelte/store';\n\timport { goto } from '$app/navigation';\n\timport { browser } from '$app/environment';\n\timport { LoadingSpinner } from '$lib/components/ui';\n\timport { apiClient } from '$lib/api/client';\n\timport { wsClient } from '$lib/api/websocket';\n\timport { appActions, appStore, chatActions, chatStore } from '$lib/stores/app';\n\timport { authStore, authActions } from '$lib/stores/auth';\n\timport ServerList from '$lib/components/ui/ServerList.svelte';\n\timport ChannelList from '$lib/components/ui/ChannelList.svelte';\n\timport EnhancedChatArea from '$lib/components/ui/EnhancedChatArea.svelte';\n\timport UserList from '$lib/components/ui/UserList.svelte';\n        import VoiceControls from '$lib/components/ui/VoiceControls.svelte';\n        import QuickSwitcher from '$lib/components/ui/QuickSwitcher.svelte';\n\timport type { User, Server, Channel, Message } from '$lib/types';\n\n\tlet loading = true;\n\tlet error = '';\n\tlet currentUser: User | null = null;\n        let backendAvailable = false;\n        let showQuickSwitcher = false;\n\n\t// Subscribe to stores\n\t$: currentServer = $appStore.currentServer;\n\t$: currentChannel = $appStore.currentChannel;\n\t$: isConnected = $appStore.isConnected;\n\t\n\t// Keep chat store currentChannelId in sync with app store\n\t$: if (currentChannel && get(chatStore).currentChannelId !== currentChannel.id) {\n\t\tchatActions.setCurrentChannel(currentChannel.id);\n\t}\n\t\n\t// Also sync when currentChannel becomes null\n\t$: if (!currentChannel && get(chatStore).currentChannelId !== undefined) {\n\t\t// Clear the channel ID by setting it to a sentinel value that won't match any real channel\n\t\tchatActions.setCurrentChannel(-1);\n\t}\n\t\n\t// Initialize servers array\n\tlet servers: Server[] = [];\n\n        function handleGlobalKeydown(e: KeyboardEvent) {\n                if (e.ctrlKey && e.key.toLowerCase() === 'k') {\n                        e.preventDefault();\n                        showQuickSwitcher = true;\n                }\n        }\n\n        onMount(async () => {\n                window.addEventListener('keydown', handleGlobalKeydown);\n                await initializeChat();\n        });\n\n        async function initializeChat() {\n                try {\n                        // Check authentication using auth store\n                        const auth = $authStore;\n                        if (!auth.user || !auth.token) {\n                                goto('/');\n                                return;\n                        }\n\n                        // Set the token in the API client\n                        apiClient.setToken(auth.token);\n                        currentUser = auth.user;\n                        \n                        // Initialize the app store with the user\n                        appActions.initialize(auth.user);\n                        \n                        // Ensure the auth store is properly set\n                        authActions.updateUser(auth.user);\n\n                        // Try to check backend availability\n                        try {\n                                await apiClient.healthCheck();\n                                backendAvailable = true;\n                                \n                                // Load servers\n                                await loadServers();\n\n                                // Connect to WebSocket\n                                await connectWebSocket(auth.token);\n\n                                // Set up WebSocket event handlers\n                                setupWebSocketListeners();\n\n                        } catch (err) {\n                                console.warn('Backend not available:', err);\n                                backendAvailable = false;\n                        }\n\n                } catch (err) {\n                        console.error('Error:', err);\n                        error = 'Failed to load chat';\n                } finally {\n                        loading = false;\n                }\n        }\n\n        \t\t// Reactive statement to handle auth store changes\n\t\t$: if ($authStore.isInitialized && !loading) {\n\t\t\t\tif ($authStore.user && $authStore.token) {\n\t\t\t\t\t\tif (!currentUser || currentUser.id !== $authStore.user.id) {\n\t\t\t\t\t\t\t\tconsole.log('Auth store changed, reinitializing chat...');\n\t\t\t\t\t\t\t\tcurrentUser = $authStore.user;\n\t\t\t\t\t\t\t\tapiClient.setToken($authStore.token);\n\t\t\t\t\t\t\t\tappActions.initialize($authStore.user);\n\t\t\t\t\t\t\t\tloadServers();\n\t\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t\tgoto('/');\n\t\t\t\t}\n\t\t}\n\n\t\t// Reactive statement to update servers from app store\n\t\t$: if ($appStore.servers && $appStore.servers.length > 0) {\n\t\t\t\tservers = $appStore.servers;\n\t\t}\n\n        onDestroy(() => {\n                wsClient.disconnect();\n                window.removeEventListener('keydown', handleGlobalKeydown);\n        });\n\n\tasync function loadServers() {\n\t\ttry {\n\t\t\tconst serversList = await apiClient.getServers();\n\t\t\tappActions.setServers(serversList);\n\t\t\tservers = serversList; // Update local servers array\n\t\t\t\n\t\t\t// Auto-select first server if available\n\t\t\tif (serversList.length > 0 && !currentServer) {\n\t\t\t\tawait selectServer(serversList[0]);\n\t\t\t}\n\t\t} catch (err) {\n\t\t\tconsole.error('Failed to load servers:', err);\n\t\t}\n\t}\n\n\tasync function selectServer(server: Server) {\n\t\ttry {\n\t\t\t// Load channels for the server first\n\t\t\tconst channels = await apiClient.getChannels(server.id);\n\t\t\tconst serverWithChannels = { ...server, channels };\n\t\t\t\n\t\t\t// Update the server in the store with channels\n\t\t\tappActions.updateServer(server.id, { channels });\n\t\t\t\n\t\t\t// Set the current server with channels\n\t\t\tappActions.setCurrentServer(serverWithChannels);\n\t\t\t\n\t\t\t// Auto-select first channel if available\n\t\t\tif (channels.length > 0 && !currentChannel) {\n\t\t\t\tawait selectChannel(channels[0]);\n\t\t\t}\n\t\t} catch (err) {\n\t\t\tconsole.error('Failed to load channels:', err);\n\t\t}\n\t}\n\n\tasync function selectChannel(channel: Channel) {\n\t\ttry {\n\t\t\t// First, set the channel in the app store\n\t\t\tappActions.setCurrentChannel(channel);\n\t\t\t\n\t\t\t// Immediately set current channel in chat store to ensure synchronization\n\t\t\tchatActions.setCurrentChannel(channel.id);\n\t\t\t\n\t\t\t// Load messages for the channel\n\t\t\tawait chatActions.loadMessages(channel.id);\n\t\t\t\n\t\t\t// Join channel via WebSocket\n\t\t\tif (wsClient.isConnected()) {\n\t\t\t\twsClient.joinChannel(channel.id);\n\t\t\t}\n\t\t} catch (err) {\n\t\t\tconsole.error('❌ [CHAT PAGE] Failed to load messages:', err);\n\t\t}\n\t}\n\n\tasync function connectWebSocket(token: string) {\n\t\ttry {\n\t\t\tconsole.log('🔗 [CHAT PAGE] Connecting to WebSocket...');\n\t\t\tawait wsClient.connect(token);\n\t\t\tconsole.log('✅ [CHAT PAGE] WebSocket connected successfully');\n\t\t\tappActions.setConnectionStatus(true);\n\t\t} catch (err) {\n\t\t\tconsole.error('❌ [CHAT PAGE] Failed to connect WebSocket:', err);\n\t\t\tappActions.setConnectionStatus(false);\n\t\t}\n\t}\n\n\tfunction setupWebSocketListeners() {\n\t\tconsole.log('🔧 [CHAT PAGE] Setting up WebSocket listeners');\n\t\t\n\t\t// Listen for new messages\n\t\twsClient.on('message', (data: unknown) => {\n\t\t\tconst messageEvent = data as { type: string; channelId: number; message: Message };\n\t\t\t\n\t\t\t// Get current channel ID from chat store\n\t\t\tconst currentChatState = get(chatStore);\n\t\t\t\n\t\t\t// Convert to numbers for comparison\n\t\t\tconst eventChannelId = Number(messageEvent.channelId);\n\t\t\tconst chatStoreChannelId = Number(currentChatState.currentChannelId);\n\t\t\t\n\t\t\tif (messageEvent.type === 'message_created' && eventChannelId === chatStoreChannelId) {\n\t\t\t\tchatActions.addMessage(messageEvent.message);\n\t\t\t}\n\t\t});\n\n\t\t// Listen for user events\n\t\twsClient.on('user', (data) => {\n\t\t\tconsole.log('👥 [CHAT PAGE] User event:', data);\n\t\t\t// Update user status if needed\n\t\t});\n\n\t\t// Listen for typing events\n\t\twsClient.on('typing', (data: unknown) => {\n\t\t\tconsole.log('⌨️ [CHAT PAGE] Typing event:', data);\n\t\t\tconst typingEvent = data as { channelId: number; userId: number; username: string; type: string };\n\t\t\tconst currentChatState = get(chatStore);\n\t\t\t\n\t\t\tif (typingEvent.channelId === currentChatState.currentChannelId) {\n\t\t\t\tconsole.log('✅ [CHAT PAGE] Adding typing indicator');\n\t\t\t\tchatActions.updateTypingUsers({\n\t\t\t\t\ttype: typingEvent.type as 'typing_start' | 'typing_stop',\n\t\t\t\t\ttimestamp: new Date(),\n\t\t\t\t\tdata: {\n\t\t\t\t\t\tuserId: typingEvent.userId,\n\t\t\t\t\t\tusername: typingEvent.username,\n\t\t\t\t\t\tchannelId: typingEvent.channelId\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tconsole.log('❌ [CHAT PAGE] Typing event not for current channel');\n\t\t\t}\n\t\t});\n\n\t\t// Listen for connection events\n\t\twsClient.on('connected', () => {\n\t\t\tconsole.log('✅ [CHAT PAGE] WebSocket connected');\n\t\t\tappActions.setConnectionStatus(true);\n\t\t});\n\n\t\twsClient.on('disconnected', () => {\n\t\t\tconsole.log('❌ [CHAT PAGE] WebSocket disconnected');\n\t\t\tappActions.setConnectionStatus(false);\n\t\t});\n\t\t\n\t\twsClient.on('error', (error) => {\n\t\t\tconsole.error('❌ [CHAT PAGE] WebSocket error:', error);\n\t\t});\n\t\t\n\t\twsClient.on('unknown', (data) => {\n\t\t\tconsole.log('❓ [CHAT PAGE] Unknown WebSocket event:', data);\n\t\t});\n\t}\n\n\tfunction logout() {\n\t\tif (browser) {\n\t\t\twsClient.disconnect();\n\t\t\tappActions.reset();\n\t\t\tchatActions.clearChat();\n\t\t\tauthActions.logout();\n\t\t\tlocalStorage.removeItem('auth_token');\n\t\t\tlocalStorage.removeItem('token');\n\t\t\tgoto('/');\n\t\t}\n\t}\n</script>\n\n<svelte:head>\n\t<title>Fethur Chat</title>\n</svelte:head>\n\n<div class=\"chat-page\">\n\t{#if currentUser && (currentUser.role === 'admin' || currentUser.role === 'super_admin')}\n\t\t<div class=\"admin-nav\">\n\t\t\t<a href=\"/admin\" class=\"admin-link\">🔧 Admin Dashboard</a>\n\t\t</div>\n\t{/if}\n\n\t<!-- Voice Test Navigation -->\n\t<div class=\"voice-test-nav\">\n\t\t<a href=\"/voice-test\" class=\"voice-test-link\">🎤 Voice Test</a>\n\t</div>\n\t\n\t{#if loading}\n\t\t<div class=\"loading-screen\">\n\t\t\t<LoadingSpinner size=\"lg\" />\n\t\t\t<p>Loading chat...</p>\n\t\t</div>\n\t{:else if error}\n\t\t<div class=\"error-screen\">\n\t\t\t<h2>❌ Error</h2>\n\t\t\t<p>{error}</p>\n\t\t\t<button on:click={() => window.location.reload()}>Retry</button>\n\t\t</div>\n\t{:else if !backendAvailable}\n\t\t<div class=\"offline-screen\">\n\t\t\t<h2>⚠️ Backend Server Offline</h2>\n\t\t\t<p>The backend server is not currently available. This is a demonstration of the frontend interface.</p>\n\t\t\t<p><strong>To enable full functionality:</strong></p>\n\t\t\t<ul>\n\t\t\t\t<li>Start the backend server (make sure it's running on port 8081)</li>\n\t\t\t\t<li>Refresh this page</li>\n\t\t\t</ul>\n\t\t\t<button on:click={() => window.location.reload()}>Retry Connection</button>\n\t\t</div>\n\t{:else}\n\t\t<div class=\"chat-container\">\n\t\t\t<!-- Server List Sidebar -->\n\t\t\t<aside class=\"server-sidebar\">\n\t\t\t\t<ServerList \n\t\t\t\t\tservers={servers || []}\n\t\t\t\t\tcurrentServerId={currentServer?.id || null}\n\t\t\t\t\t{currentUser}\n\t\t\t\t\ton:selectServer={(e) => selectServer(e.detail)}\n\t\t\t\t/>\n\t\t\t</aside>\n\n\t\t\t<!-- Channel List Sidebar -->\n\t\t\t<aside class=\"channel-sidebar\">\n\t\t\t\t{#if currentServer}\n\t\t\t\t\t<ChannelList \n\t\t\t\t\t\tserver={currentServer}\n\t\t\t\t\t\tcurrentChannelId={currentChannel?.id || null}\n\t\t\t\t\t\t{currentUser}\n\t\t\t\t\t\ton:selectChannel={(e) => selectChannel(e.detail)}\n\t\t\t\t\t/>\n\t\t\t\t{:else}\n\t\t\t\t\t<div class=\"no-server-selected\">\n\t\t\t\t\t\t<p>Select a server to view channels</p>\n\t\t\t\t\t</div>\n\t\t\t\t{/if}\n\t\t\t</aside>\n\n\t\t\t<!-- Main Chat Area -->\n\t\t\t<main class=\"chat-main\">\n\t\t\t\t{#if currentChannel}\n\t\t\t\t\t<EnhancedChatArea \n\t\t\t\t\t\tchannel={currentChannel}\n\t\t\t\t\t\t{currentUser}\n\t\t\t\t\t/>\n\t\t\t\t\t\n\t\t\t\t\t<!-- Voice Controls for Voice Channels -->\n\t\t\t\t\t{#if currentChannel.type === 'voice'}\n\t\t\t\t\t\t<div class=\"voice-controls-container\">\n\t\t\t\t\t\t\t<VoiceControls \n\t\t\t\t\t\t\t\tchannelId={currentChannel.id}\n\t\t\t\t\t\t\t\tserverId={currentServer?.id || null}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t{/if}\n\t\t\t\t{:else}\n\t\t\t\t\t<div class=\"no-channel-selected\">\n\t\t\t\t\t\t<h2>Welcome to Fethur Chat!</h2>\n\t\t\t\t\t\t<p>Select a channel to start chatting</p>\n\t\t\t\t\t</div>\n\t\t\t\t{/if}\n\t\t\t</main>\n\n\t\t\t<!-- User List Sidebar -->\n\t\t\t<aside class=\"user-sidebar\">\n\t\t\t\t{#if currentServer}\n\t\t\t\t\t<UserList \n\t\t\t\t\t\tserver={currentServer}\n\t\t\t\t\t\t{currentUser}\n\t\t\t\t\t/>\n\t\t\t\t{/if}\n\t\t\t</aside>\n\t\t</div>\n\n\t\t<!-- Connection Status Bar -->\n\t\t<div class=\"connection-status-bar\">\n\t\t\t<div class=\"status-indicator\">\n\t\t\t\t{#if isConnected}\n\t\t\t\t\t<span class=\"status-online\">🟢 Connected</span>\n\t\t\t\t{:else}\n\t\t\t\t\t<span class=\"status-offline\">🔴 Disconnected</span>\n\t\t\t\t{/if}\n\t\t\t</div>\n\t\t\t\t\t\t<div class=\"user-info\">\n\t\t\t\tWelcome, {$authStore.user?.username || currentUser?.username || 'User'}!\n\t\t\t\t{#if $authStore.user?.role || currentUser?.role}\n\t\t\t\t\t<span class=\"user-role\">({$authStore.user?.role || currentUser?.role})</span>\n\t\t\t\t{/if}\n\t\t\t</div>\n\t\t\t<button class=\"logout-btn\" on:click={logout}>Logout</button>\n        </div>\n{/if}\n\n<QuickSwitcher\n        servers={servers || []}\n        channels={currentServer ? currentServer.channels || [] : []}\n        bind:open={showQuickSwitcher}\n        on:select={(e) => {\n                const item = e.detail;\n                showQuickSwitcher = false;\n                if (item.type === 'server') {\n                        const server = servers.find(s => s.id === item.id);\n                        if (server) selectServer(server);\n                } else if (item.type === 'channel') {\n                        const channel = currentServer?.channels?.find(c => c.id === item.id);\n                        if (channel) selectChannel(channel);\n                }\n        }}\n        on:close={() => (showQuickSwitcher = false)}\n/>\n</div>\n\n<style>\n\t.chat-page {\n\t\theight: 100vh;\n\t\tbackground-color: #1a1a1a;\n\t\tcolor: #ffffff;\n\t\tfont-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n\t\tdisplay: flex;\n\t\tflex-direction: column;\n\t}\n\n\t.loading-screen, .error-screen, .offline-screen {\n\t\tdisplay: flex;\n\t\tflex-direction: column;\n\t\talign-items: center;\n\t\tjustify-content: center;\n\t\theight: 100vh;\n\t\tgap: 1rem;\n\t\ttext-align: center;\n\t}\n\n\t.error-screen button, .offline-screen button {\n\t\tbackground-color: #3b82f6;\n\t\tcolor: white;\n\t\tborder: none;\n\t\tpadding: 0.75rem 1.5rem;\n\t\tborder-radius: 0.5rem;\n\t\tcursor: pointer;\n\t\tfont-weight: 500;\n\t\ttransition: background-color 0.2s;\n\t}\n\n\t.error-screen button:hover, .offline-screen button:hover {\n\t\tbackground-color: #2563eb;\n\t}\n\n\t.offline-screen {\n\t\tmax-width: 600px;\n\t\tmargin: 0 auto;\n\t\tpadding: 2rem;\n\t}\n\n\t.offline-screen h2 {\n\t\tcolor: #f59e0b;\n\t\tmargin-bottom: 1rem;\n\t}\n\n\t.offline-screen ul {\n\t\ttext-align: left;\n\t\tmargin: 1rem 0;\n\t\tpadding-left: 1.5rem;\n\t}\n\n\t.offline-screen li {\n\t\tmargin: 0.5rem 0;\n\t}\n\n\t.chat-container {\n\t\tflex: 1;\n\t\tdisplay: flex;\n\t\toverflow: hidden;\n\t}\n\n\t.server-sidebar {\n\t\twidth: 72px;\n\t\tbackground-color: #2d2d2d;\n\t\tborder-right: 1px solid #404040;\n\t\tflex-shrink: 0;\n\t}\n\n\t.channel-sidebar {\n\t\twidth: 240px;\n\t\tbackground-color: #2d2d2d;\n\t\tborder-right: 1px solid #404040;\n\t\tflex-shrink: 0;\n\t}\n\n\t.chat-main {\n\t\tflex: 1;\n\t\tbackground-color: #1a1a1a;\n\t\tdisplay: flex;\n\t\tflex-direction: column;\n\t}\n\n\t.user-sidebar {\n\t\twidth: 240px;\n\t\tbackground-color: #2d2d2d;\n\t\tborder-left: 1px solid #404040;\n\t\tflex-shrink: 0;\n\t}\n\n\t.no-server-selected, .no-channel-selected {\n\t\tdisplay: flex;\n\t\talign-items: center;\n\t\tjustify-content: center;\n\t\theight: 100%;\n\t\ttext-align: center;\n\t\tcolor: #6b7280;\n\t}\n\n\t.no-channel-selected h2 {\n\t\tcolor: #3b82f6;\n\t\tmargin-bottom: 1rem;\n\t}\n\n\t.connection-status-bar {\n\t\tdisplay: flex;\n\t\talign-items: center;\n\t\tjustify-content: space-between;\n\t\tpadding: 0.5rem 1rem;\n\t\tbackground-color: #2d2d2d;\n\t\tborder-top: 1px solid #404040;\n\t\tflex-shrink: 0;\n\t\tfont-size: 0.875rem;\n\t}\n\n\t.status-indicator {\n\t\tdisplay: flex;\n\t\talign-items: center;\n\t}\n\n\t.status-online {\n\t\tcolor: #10b981;\n\t}\n\n\t.status-offline {\n\t\tcolor: #ef4444;\n\t}\n\n\t.user-info {\n\t\tcolor: #6b7280;\n\t\tflex: 1;\n\t\ttext-align: center;\n\t}\n\n\t.user-role {\n\t\tcolor: #3b82f6;\n\t\tfont-weight: 500;\n\t\tmargin-left: 0.5rem;\n\t}\n\n\t.logout-btn {\n\t\tbackground-color: #ef4444;\n\t\tcolor: white;\n\t\tborder: none;\n\t\tpadding: 0.25rem 0.75rem;\n\t\tborder-radius: 0.375rem;\n\t\tcursor: pointer;\n\t\tfont-weight: 500;\n\t\tfont-size: 0.875rem;\n\t\ttransition: background-color 0.2s;\n\t}\n\n\t.logout-btn:hover {\n\t\tbackground-color: #dc2626;\n\t}\n\n\t/* Admin Navigation */\n\t.admin-nav {\n\t\tposition: absolute;\n\t\ttop: 1rem;\n\t\tright: 1rem;\n\t\tz-index: 100;\n\t}\n\n\t.admin-link {\n\t\tdisplay: inline-flex;\n\t\talign-items: center;\n\t\tgap: 0.5rem;\n\t\tbackground: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n\t\tcolor: white;\n\t\ttext-decoration: none;\n\t\tpadding: 0.5rem 1rem;\n\t\tborder-radius: 0.5rem;\n\t\tfont-weight: 500;\n\t\tfont-size: 0.875rem;\n\t\ttransition: all 0.2s;\n\t\tbox-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);\n\t}\n\n\t.admin-link:hover {\n\t\ttransform: translateY(-1px);\n\t\tbox-shadow: 0 6px 12px -1px rgba(0, 0, 0, 0.15);\n\t}\n\n\t/* Voice Test Navigation */\n\t.voice-test-nav {\n\t\tposition: absolute;\n\t\ttop: 1rem;\n\t\tright: 8rem;\n\t\tz-index: 100;\n\t}\n\n\t.voice-test-link {\n\t\tdisplay: inline-flex;\n\t\talign-items: center;\n\t\tgap: 0.5rem;\n\t\tbackground: linear-gradient(135deg, #10b981 0%, #059669 100%);\n\t\tcolor: white;\n\t\ttext-decoration: none;\n\t\tpadding: 0.5rem 1rem;\n\t\tborder-radius: 0.5rem;\n\t\tfont-weight: 500;\n\t\tfont-size: 0.875rem;\n\t\ttransition: all 0.2s;\n\t\tbox-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);\n\t}\n\n\t.voice-test-link:hover {\n\t\ttransform: translateY(-1px);\n\t\tbox-shadow: 0 6px 12px -1px rgba(0, 0, 0, 0.15);\n\t}\n\n\t/* Voice Controls */\n\t.voice-controls-container {\n\t\tposition: fixed;\n\t\tbottom: 4rem;\n\t\tright: 1rem;\n\t\tz-index: 50;\n\t\tmax-width: 300px;\n\t}\n\n\t/* Responsive design */\n\t@media (max-width: 1024px) {\n\t\t.user-sidebar {\n\t\t\tdisplay: none;\n\t\t}\n\t}\n\n\t@media (max-width: 768px) {\n\t\t.channel-sidebar {\n\t\t\twidth: 200px;\n\t\t}\n\t}\n\n\t@media (max-width: 640px) {\n\t\t.server-sidebar, .channel-sidebar {\n\t\t\tdisplay: none;\n\t\t}\n\t}\n</style> ","usedDeprecatedRules":[]},{"filePath":"/Users/bennerrr/Feathur/client/web/src/routes/dashboard/+page.svelte","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":4,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":4,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[66,69],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[66,69],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":5,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":5,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[93,96],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[93,96],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":6,"column":15,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":6,"endColumn":18,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[117,120],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[117,120],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":7,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":7,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[144,147],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[144,147],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":79,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":79,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1940,1943],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1940,1943],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":83,"column":4,"nodeType":"MemberExpression","messageId":"unexpected","endLine":83,"endColumn":17,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[2020,2075],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":107,"column":4,"nodeType":"MemberExpression","messageId":"unexpected","endLine":107,"endColumn":17,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[2582,2629],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'createChannel' is defined but never used. Allowed unused vars must match /^_/u.","line":111,"column":17,"nodeType":null,"messageId":"unusedVar","endLine":111,"endColumn":30},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":131,"column":4,"nodeType":"MemberExpression","messageId":"unexpected","endLine":131,"endColumn":17,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[3261,3309],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"svelte/valid-compile","severity":1,"message":"A form label must be associated with a control\nhttps://svelte.dev/e/a11y_label_has_associated_control(a11y_label_has_associated_control)","line":310,"column":9,"nodeType":null,"endLine":310,"endColumn":32},{"ruleId":"svelte/valid-compile","severity":1,"message":"A form label must be associated with a control\nhttps://svelte.dev/e/a11y_label_has_associated_control(a11y_label_has_associated_control)","line":314,"column":9,"nodeType":null,"endLine":314,"endColumn":28},{"ruleId":"svelte/valid-compile","severity":1,"message":"A form label must be associated with a control\nhttps://svelte.dev/e/a11y_label_has_associated_control(a11y_label_has_associated_control)","line":318,"column":9,"nodeType":null,"endLine":318,"endColumn":35},{"ruleId":"svelte/valid-compile","severity":1,"message":"A form label must be associated with a control\nhttps://svelte.dev/e/a11y_label_has_associated_control(a11y_label_has_associated_control)","line":322,"column":9,"nodeType":null,"endLine":322,"endColumn":39},{"ruleId":"svelte/valid-compile","severity":1,"message":"A form label must be associated with a control\nhttps://svelte.dev/e/a11y_label_has_associated_control(a11y_label_has_associated_control)","line":326,"column":9,"nodeType":null,"endLine":326,"endColumn":36},{"ruleId":"svelte/valid-compile","severity":1,"message":"A form label must be associated with a control\nhttps://svelte.dev/e/a11y_label_has_associated_control(a11y_label_has_associated_control)","line":330,"column":9,"nodeType":null,"endLine":330,"endColumn":33},{"ruleId":"svelte/valid-compile","severity":1,"message":"Visible, non-interactive elements with a click event must be accompanied by a keyboard event handler. Consider whether an interactive element such as `<button type=\"button\">` or `<a>` might be more appropriate\nhttps://svelte.dev/e/a11y_click_events_have_key_events(a11y_click_events_have_key_events)","line":363,"column":2,"nodeType":null,"endLine":385,"endColumn":8},{"ruleId":"svelte/valid-compile","severity":1,"message":"`<div>` with a click handler must have an ARIA role\nhttps://svelte.dev/e/a11y_no_static_element_interactions(a11y_no_static_element_interactions)","line":363,"column":2,"nodeType":null,"endLine":385,"endColumn":8},{"ruleId":"svelte/valid-compile","severity":1,"message":"Visible, non-interactive elements with a click event must be accompanied by a keyboard event handler. Consider whether an interactive element such as `<button type=\"button\">` or `<a>` might be more appropriate\nhttps://svelte.dev/e/a11y_click_events_have_key_events(a11y_click_events_have_key_events)","line":364,"column":3,"nodeType":null,"endLine":384,"endColumn":9},{"ruleId":"svelte/valid-compile","severity":1,"message":"`<div>` with a click handler must have an ARIA role\nhttps://svelte.dev/e/a11y_no_static_element_interactions(a11y_no_static_element_interactions)","line":364,"column":3,"nodeType":null,"endLine":384,"endColumn":9}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":19,"fixableErrorCount":0,"fixableWarningCount":0,"source":"<script lang=\"ts\">\n\timport { onMount } from 'svelte';\n\n\tlet user: any = null;\n\tlet settings: any = {};\n\tlet servers: any[] = [];\n\tlet channels: any[] = [];\n\tlet loading = true;\n\tlet error = '';\n\tlet activeTab = 'overview';\n\tlet showCreateModal = false;\n\tlet newServer = { name: '', description: '' };\n\tlet newChannel = { name: '', description: '', serverId: '' };\n\n\tonMount(async () => {\n\t\tconst token = localStorage.getItem('auth_token');\n\t\tif (!token) {\n\t\t\twindow.location.href = '/';\n\t\t\treturn;\n\t\t}\n\n\t\ttry {\n\t\t\t// Get user profile\n\t\t\tconst response = await fetch('/api/user/profile', {\n\t\t\t\theaders: {\n\t\t\t\t\t'Authorization': `Bearer ${token}`\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tif (response.ok) {\n\t\t\t\tuser = await response.json();\n\t\t\t} else {\n\t\t\t\tlocalStorage.removeItem('auth_token');\n\t\t\t\twindow.location.href = '/';\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Get settings if user is admin\n\t\t\tif (user.role === 'super_admin' || user.role === 'admin') {\n\t\t\t\tconst settingsResponse = await fetch('/api/settings', {\n\t\t\t\t\theaders: {\n\t\t\t\t\t\t'Authorization': `Bearer ${token}`\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tif (settingsResponse.ok) {\n\t\t\t\t\tsettings = await settingsResponse.json();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Get servers and channels\n\t\t\tawait loadServersAndChannels(token);\n\t\t} catch (err) {\n\t\t\terror = 'Failed to load dashboard';\n\t\t} finally {\n\t\t\tloading = false;\n\t\t}\n\t});\n\n\tasync function loadServersAndChannels(token: string) {\n\t\ttry {\n\t\t\tconst serversResponse = await fetch('/api/servers', {\n\t\t\t\theaders: {\n\t\t\t\t\t'Authorization': `Bearer ${token}`\n\t\t\t\t}\n\t\t\t});\n\t\t\tif (serversResponse.ok) {\n\t\t\t\tservers = await serversResponse.json();\n\t\t\t}\n\n\t\t\t// Load channels for each server\n\t\t\tfor (const server of servers) {\n\t\t\t\tconst channelsResponse = await fetch(`/api/servers/${server.id}/channels`, {\n\t\t\t\t\theaders: {\n\t\t\t\t\t\t'Authorization': `Bearer ${token}`\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tif (channelsResponse.ok) {\n\t\t\t\t\tconst serverChannels = await channelsResponse.json();\n\t\t\t\t\tchannels.push(...serverChannels.map((ch: any) => ({ ...ch, serverName: server.name })));\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (err) {\n\t\t\tconsole.error('Failed to load servers/channels:', err);\n\t\t}\n\t}\n\n\tasync function createServer() {\n\t\tconst token = localStorage.getItem('auth_token');\n\t\tif (!token) return;\n\n\t\ttry {\n\t\t\tconst response = await fetch('/api/servers', {\n\t\t\t\tmethod: 'POST',\n\t\t\t\theaders: {\n\t\t\t\t\t'Authorization': `Bearer ${token}`,\n\t\t\t\t\t'Content-Type': 'application/json'\n\t\t\t\t},\n\t\t\t\tbody: JSON.stringify(newServer)\n\t\t\t});\n\n\t\t\tif (response.ok) {\n\t\t\t\tawait loadServersAndChannels(token);\n\t\t\t\tnewServer = { name: '', description: '' };\n\t\t\t\tshowCreateModal = false;\n\t\t\t}\n\t\t} catch (err) {\n\t\t\tconsole.error('Failed to create server:', err);\n\t\t}\n\t}\n\n\tasync function createChannel() {\n\t\tconst token = localStorage.getItem('auth_token');\n\t\tif (!token || !newChannel.serverId) return;\n\n\t\ttry {\n\t\t\tconst response = await fetch(`/api/servers/${newChannel.serverId}/channels`, {\n\t\t\t\tmethod: 'POST',\n\t\t\t\theaders: {\n\t\t\t\t\t'Authorization': `Bearer ${token}`,\n\t\t\t\t\t'Content-Type': 'application/json'\n\t\t\t\t},\n\t\t\t\tbody: JSON.stringify({ name: newChannel.name, description: newChannel.description })\n\t\t\t});\n\n\t\t\tif (response.ok) {\n\t\t\t\tawait loadServersAndChannels(token);\n\t\t\t\tnewChannel = { name: '', description: '', serverId: '' };\n\t\t\t\tshowCreateModal = false;\n\t\t\t}\n\t\t} catch (err) {\n\t\t\tconsole.error('Failed to create channel:', err);\n\t\t}\n\t}\n\n\tfunction logout() {\n\t\tlocalStorage.removeItem('auth_token');\n\t\twindow.location.href = '/';\n\t}\n\n\tfunction isAdmin() {\n\t\treturn user?.role === 'super_admin' || user?.role === 'admin';\n\t}\n</script>\n\n{#if loading}\n\t<div class=\"glass-card\">\n\t\t<div class=\"loading-container\">\n\t\t\t<div class=\"loading-text\">Loading Dashboard...</div>\n\t\t\t<div class=\"loading-spinner\"></div>\n\t\t</div>\n\t</div>\n{:else}\n\t<div class=\"dashboard-container\">\n\t\t<!-- Header -->\n\t\t<div class=\"dashboard-header\">\n\t\t\t<div class=\"header-left\">\n\t\t\t\t<h1 class=\"welcome-text\">Welcome back, {user?.username}! 👋</h1>\n\t\t\t\t<div class=\"user-badge\">\n\t\t\t\t\t<span class=\"role-badge {user?.role}\">{user?.role?.replace('_', ' ')}</span>\n\t\t\t\t\t<span class=\"user-id\">ID: {user?.id}</span>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div class=\"header-right\">\n\t\t\t\t<button on:click={logout} class=\"logout-btn\">\n\t\t\t\t\t🚪 Logout\n\t\t\t\t</button>\n\t\t\t</div>\n\t\t</div>\n\n\t\t{#if error}\n\t\t\t<div class=\"error-message\">{error}</div>\n\t\t{/if}\n\n\t\t<!-- Navigation Tabs -->\n\t\t<div class=\"tab-navigation\">\n\t\t\t<button \n\t\t\t\tclass=\"tab-btn {activeTab === 'overview' ? 'active' : ''}\" \n\t\t\t\ton:click={() => activeTab = 'overview'}\n\t\t\t>\n\t\t\t\t📊 Overview\n\t\t\t</button>\n\t\t\t<button \n\t\t\t\tclass=\"tab-btn {activeTab === 'chat' ? 'active' : ''}\" \n\t\t\t\ton:click={() => activeTab = 'chat'}\n\t\t\t>\n\t\t\t\t💬 Chat\n\t\t\t</button>\n\t\t\t{#if isAdmin()}\n\t\t\t\t<button \n\t\t\t\t\tclass=\"tab-btn {activeTab === 'admin' ? 'active' : ''}\" \n\t\t\t\t\ton:click={() => activeTab = 'admin'}\n\t\t\t\t>\n\t\t\t\t\t⚙️ Admin\n\t\t\t\t</button>\n\t\t\t{/if}\n\t\t</div>\n\n\t\t<!-- Tab Content -->\n\t\t<div class=\"tab-content\">\n\t\t\t{#if activeTab === 'overview'}\n\t\t\t\t<div class=\"overview-grid\">\n\t\t\t\t\t<!-- Quick Stats -->\n\t\t\t\t\t<div class=\"stats-card\">\n\t\t\t\t\t\t<div class=\"stats-icon\">🏠</div>\n\t\t\t\t\t\t<div class=\"stats-content\">\n\t\t\t\t\t\t\t<div class=\"stats-number\">{servers.length}</div>\n\t\t\t\t\t\t\t<div class=\"stats-label\">Servers</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t\n\t\t\t\t\t<div class=\"stats-card\">\n\t\t\t\t\t\t<div class=\"stats-icon\">📢</div>\n\t\t\t\t\t\t<div class=\"stats-content\">\n\t\t\t\t\t\t\t<div class=\"stats-number\">{channels.length}</div>\n\t\t\t\t\t\t\t<div class=\"stats-label\">Channels</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t\n\t\t\t\t\t<div class=\"stats-card\">\n\t\t\t\t\t\t<div class=\"stats-icon\">👥</div>\n\t\t\t\t\t\t<div class=\"stats-content\">\n\t\t\t\t\t\t\t<div class=\"stats-number\">-</div>\n\t\t\t\t\t\t\t<div class=\"stats-label\">Online Users</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t\n\t\t\t\t\t<div class=\"stats-card\">\n\t\t\t\t\t\t<div class=\"stats-icon\">💬</div>\n\t\t\t\t\t\t<div class=\"stats-content\">\n\t\t\t\t\t\t\t<div class=\"stats-number\">-</div>\n\t\t\t\t\t\t\t<div class=\"stats-label\">Messages Today</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\n\t\t\t\t<!-- Recent Activity -->\n\t\t\t\t<div class=\"section-card\">\n\t\t\t\t\t<h3 class=\"section-title\">Recent Activity</h3>\n\t\t\t\t\t<div class=\"activity-list\">\n\t\t\t\t\t\t<div class=\"activity-item\">\n\t\t\t\t\t\t\t<div class=\"activity-icon\">🎉</div>\n\t\t\t\t\t\t\t<div class=\"activity-content\">\n\t\t\t\t\t\t\t\t<div class=\"activity-text\">Welcome to Feathur!</div>\n\t\t\t\t\t\t\t\t<div class=\"activity-time\">Just now</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t{/if}\n\n\t\t\t{#if activeTab === 'chat'}\n\t\t\t\t<div class=\"chat-navigation\">\n\t\t\t\t\t<h3 class=\"section-title\">Quick Access</h3>\n\t\t\t\t\t\n\t\t\t\t\t<!-- Main Chat Card -->\n\t\t\t\t\t<a href=\"/chat\" class=\"nav-card primary-card\">\n\t\t\t\t\t\t<div class=\"card-icon\">💬</div>\n\t\t\t\t\t\t<div class=\"card-content\">\n\t\t\t\t\t\t\t<h4 class=\"card-title\">Main Chat Interface</h4>\n\t\t\t\t\t\t\t<p class=\"card-description\">Access the full Discord-like chat experience</p>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class=\"card-arrow\">→</div>\n\t\t\t\t\t</a>\n\n\t\t\t\t\t<!-- Server Cards -->\n\t\t\t\t\t{#if servers.length > 0}\n\t\t\t\t\t\t<div class=\"servers-section\">\n\t\t\t\t\t\t\t<h4 class=\"subsection-title\">Your Servers</h4>\n\t\t\t\t\t\t\t<div class=\"servers-grid\">\n\t\t\t\t\t\t\t\t{#each servers as server}\n\t\t\t\t\t\t\t\t\t<div class=\"server-card\">\n\t\t\t\t\t\t\t\t\t\t<div class=\"server-icon\">🏠</div>\n\t\t\t\t\t\t\t\t\t\t<div class=\"server-info\">\n\t\t\t\t\t\t\t\t\t\t\t<h5 class=\"server-name\">{server.name}</h5>\n\t\t\t\t\t\t\t\t\t\t\t<p class=\"server-description\">{server.description || 'No description'}</p>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t{/each}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t{/if}\n\n\t\t\t\t\t<!-- Channel Cards -->\n\t\t\t\t\t{#if channels.length > 0}\n\t\t\t\t\t\t<div class=\"channels-section\">\n\t\t\t\t\t\t\t<h4 class=\"subsection-title\">Recent Channels</h4>\n\t\t\t\t\t\t\t<div class=\"channels-grid\">\n\t\t\t\t\t\t\t\t{#each channels.slice(0, 6) as channel}\n\t\t\t\t\t\t\t\t\t<div class=\"channel-card\">\n\t\t\t\t\t\t\t\t\t\t<div class=\"channel-icon\">📢</div>\n\t\t\t\t\t\t\t\t\t\t<div class=\"channel-info\">\n\t\t\t\t\t\t\t\t\t\t\t<h5 class=\"channel-name\">#{channel.name}</h5>\n\t\t\t\t\t\t\t\t\t\t\t<p class=\"channel-server\">{channel.serverName}</p>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t{/each}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t{/if}\n\t\t\t\t</div>\n\t\t\t{/if}\n\n\t\t\t{#if activeTab === 'admin' && isAdmin()}\n\t\t\t\t<div class=\"admin-panel\">\n\t\t\t\t\t<!-- Server Settings -->\n\t\t\t\t\t<div class=\"section-card\">\n\t\t\t\t\t\t<h3 class=\"section-title\">Server Settings</h3>\n\t\t\t\t\t\t<div class=\"settings-grid\">\n\t\t\t\t\t\t\t<div class=\"setting-item\">\n\t\t\t\t\t\t\t\t<label>Hostname</label>\n\t\t\t\t\t\t\t\t<div class=\"setting-value\">{settings.hostname || 'localhost'}</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div class=\"setting-item\">\n\t\t\t\t\t\t\t\t<label>Port</label>\n\t\t\t\t\t\t\t\t<div class=\"setting-value\">{settings.port || '8081'}</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div class=\"setting-item\">\n\t\t\t\t\t\t\t\t<label>SSL Enabled</label>\n\t\t\t\t\t\t\t\t<div class=\"setting-value\">{settings.ssl_enabled === 'true' ? 'Yes' : 'No'}</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div class=\"setting-item\">\n\t\t\t\t\t\t\t\t<label>External Domain</label>\n\t\t\t\t\t\t\t\t<div class=\"setting-value\">{settings.external_domain || 'Not set'}</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div class=\"setting-item\">\n\t\t\t\t\t\t\t\t<label>mDNS Enabled</label>\n\t\t\t\t\t\t\t\t<div class=\"setting-value\">{settings.mdns_enabled === 'true' ? 'Yes' : 'No'}</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div class=\"setting-item\">\n\t\t\t\t\t\t\t\t<label>Auth Mode</label>\n\t\t\t\t\t\t\t\t<div class=\"setting-value\">{settings.auth_mode?.replace('_', ' ') || 'public'}</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<!-- Create Server -->\n\t\t\t\t\t<div class=\"section-card\">\n\t\t\t\t\t\t<div class=\"card-header\">\n\t\t\t\t\t\t\t<h3 class=\"section-title\">Create New Server</h3>\n\t\t\t\t\t\t\t<button class=\"create-btn\" on:click={() => showCreateModal = true}>\n\t\t\t\t\t\t\t\t➕ Create Server\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<!-- Create Channel -->\n\t\t\t\t\t<div class=\"section-card\">\n\t\t\t\t\t\t<div class=\"card-header\">\n\t\t\t\t\t\t\t<h3 class=\"section-title\">Create New Channel</h3>\n\t\t\t\t\t\t\t<button class=\"create-btn\" on:click={() => showCreateModal = true}>\n\t\t\t\t\t\t\t\t➕ Create Channel\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t{/if}\n\t\t</div>\n\t</div>\n{/if}\n\n<!-- Create Modal -->\n{#if showCreateModal}\n\t<div class=\"modal-overlay\" on:click={() => showCreateModal = false}>\n\t\t<div class=\"modal-content\" on:click|stopPropagation>\n\t\t\t<h3>Create New</h3>\n\t\t\t<form on:submit|preventDefault={createServer}>\n\t\t\t\t<div class=\"form-group\">\n\t\t\t\t\t<label for=\"name\">Name</label>\n\t\t\t\t\t<input id=\"name\" type=\"text\" bind:value={newServer.name} required />\n\t\t\t\t</div>\n\t\t\t\t<div class=\"form-group\">\n\t\t\t\t\t<label for=\"description\">Description</label>\n\t\t\t\t\t<textarea id=\"description\" bind:value={newServer.description}></textarea>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"modal-actions\">\n\t\t\t\t\t<button type=\"button\" class=\"secondary-btn\" on:click={() => showCreateModal = false}>\n\t\t\t\t\t\tCancel\n\t\t\t\t\t</button>\n\t\t\t\t\t<button type=\"submit\" class=\"primary-btn\">\n\t\t\t\t\t\tCreate\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\t\t\t</form>\n\t\t</div>\n\t</div>\n{/if}\n\n<style>\n\t.dashboard-container {\n\t\tmax-width: 1200px;\n\t\tmargin: 0 auto;\n\t\tpadding: 2rem;\n\t}\n\n\t.dashboard-header {\n\t\tdisplay: flex;\n\t\tjustify-content: space-between;\n\t\talign-items: center;\n\t\tmargin-bottom: 2rem;\n\t\tpadding: 1.5rem;\n\t\tbackground: var(--color-glass);\n\t\tborder-radius: var(--border-radius-lg);\n\t\tborder: 1px solid var(--color-glass-border);\n\t\tbackdrop-filter: blur(16px);\n\t}\n\n\t.welcome-text {\n\t\tcolor: var(--color-accent);\n\t\tmargin: 0 0 0.5rem 0;\n\t\tfont-size: 1.8rem;\n\t\tfont-weight: 700;\n\t}\n\n\t.user-badge {\n\t\tdisplay: flex;\n\t\talign-items: center;\n\t\tgap: 1rem;\n\t}\n\n\t.role-badge {\n\t\tpadding: 0.25rem 0.75rem;\n\t\tborder-radius: var(--border-radius);\n\t\tfont-size: 0.8rem;\n\t\tfont-weight: 600;\n\t\ttext-transform: uppercase;\n\t\tletter-spacing: 0.05em;\n\t}\n\n\t.role-badge.super_admin {\n\t\tbackground: linear-gradient(135deg, #ff6b6b, #ee5a24);\n\t\tcolor: white;\n\t}\n\n\t.role-badge.admin {\n\t\tbackground: linear-gradient(135deg, #4ecdc4, #44a08d);\n\t\tcolor: white;\n\t}\n\n\t.role-badge.user {\n\t\tbackground: linear-gradient(135deg, #a8edea, #fed6e3);\n\t\tcolor: #333;\n\t}\n\n\t.user-id {\n\t\tcolor: var(--color-text);\n\t\topacity: 0.7;\n\t\tfont-size: 0.9rem;\n\t}\n\n\t.logout-btn {\n\t\tbackground: linear-gradient(135deg, #ff6b6b, #ee5a24);\n\t\tcolor: white;\n\t\tborder: none;\n\t\tborder-radius: var(--border-radius);\n\t\tpadding: 0.75rem 1.5rem;\n\t\tfont-size: 1rem;\n\t\tfont-weight: 600;\n\t\tcursor: pointer;\n\t\ttransition: all 0.3s ease;\n\t}\n\n\t.logout-btn:hover {\n\t\ttransform: translateY(-2px);\n\t\tbox-shadow: var(--shadow-lg);\n\t}\n\n\t.tab-navigation {\n\t\tdisplay: flex;\n\t\tgap: 0.5rem;\n\t\tmargin-bottom: 2rem;\n\t\tpadding: 0.5rem;\n\t\tbackground: var(--color-glass);\n\t\tborder-radius: var(--border-radius-lg);\n\t\tborder: 1px solid var(--color-glass-border);\n\t}\n\n\t.tab-btn {\n\t\tflex: 1;\n\t\tpadding: 1rem 1.5rem;\n\t\tbackground: transparent;\n\t\tborder: none;\n\t\tborder-radius: var(--border-radius);\n\t\tcolor: var(--color-text);\n\t\tfont-size: 1rem;\n\t\tfont-weight: 500;\n\t\tcursor: pointer;\n\t\ttransition: all 0.3s ease;\n\t}\n\n\t.tab-btn.active {\n\t\tbackground: var(--color-accent);\n\t\tcolor: white;\n\t\tbox-shadow: var(--shadow-md);\n\t}\n\n\t.tab-btn:hover:not(.active) {\n\t\tbackground: rgba(255, 255, 255, 0.1);\n\t}\n\n\t.overview-grid {\n\t\tdisplay: grid;\n\t\tgrid-template-columns: repeat(auto-fit, minmax(250px, 1fr));\n\t\tgap: 1.5rem;\n\t\tmargin-bottom: 2rem;\n\t}\n\n\t.stats-card {\n\t\tdisplay: flex;\n\t\talign-items: center;\n\t\tgap: 1rem;\n\t\tpadding: 1.5rem;\n\t\tbackground: var(--color-glass);\n\t\tborder-radius: var(--border-radius-lg);\n\t\tborder: 1px solid var(--color-glass-border);\n\t\tbackdrop-filter: blur(16px);\n\t\ttransition: all 0.3s ease;\n\t}\n\n\t.stats-card:hover {\n\t\ttransform: translateY(-4px);\n\t\tbox-shadow: var(--shadow-xl);\n\t}\n\n\t.stats-icon {\n\t\tfont-size: 2rem;\n\t\twidth: 60px;\n\t\theight: 60px;\n\t\tdisplay: flex;\n\t\talign-items: center;\n\t\tjustify-content: center;\n\t\tbackground: linear-gradient(135deg, var(--color-accent), var(--color-accent-light));\n\t\tborder-radius: var(--border-radius-lg);\n\t\tcolor: white;\n\t}\n\n\t.stats-number {\n\t\tfont-size: 2rem;\n\t\tfont-weight: 700;\n\t\tcolor: var(--color-accent);\n\t\tline-height: 1;\n\t}\n\n\t.stats-label {\n\t\tcolor: var(--color-text);\n\t\topacity: 0.8;\n\t\tfont-size: 0.9rem;\n\t}\n\n\t.section-card {\n\t\tbackground: var(--color-glass);\n\t\tborder-radius: var(--border-radius-lg);\n\t\tborder: 1px solid var(--color-glass-border);\n\t\tpadding: 2rem;\n\t\tmargin-bottom: 2rem;\n\t\tbackdrop-filter: blur(16px);\n\t}\n\n\t.section-title {\n\t\tcolor: var(--color-accent);\n\t\tmargin: 0 0 1.5rem 0;\n\t\tfont-size: 1.5rem;\n\t\tfont-weight: 600;\n\t}\n\n\t.nav-card {\n\t\tdisplay: flex;\n\t\talign-items: center;\n\t\tgap: 1rem;\n\t\tpadding: 1.5rem;\n\t\tbackground: var(--color-glass);\n\t\tborder-radius: var(--border-radius-lg);\n\t\tborder: 1px solid var(--color-glass-border);\n\t\ttext-decoration: none;\n\t\tcolor: var(--color-text);\n\t\ttransition: all 0.3s ease;\n\t\tmargin-bottom: 1rem;\n\t}\n\n\t.nav-card:hover {\n\t\ttransform: translateY(-4px);\n\t\tbox-shadow: var(--shadow-xl);\n\t\tborder-color: var(--color-accent);\n\t}\n\n\t.nav-card.primary-card {\n\t\tbackground: linear-gradient(135deg, var(--color-accent), var(--color-accent-light));\n\t\tcolor: white;\n\t\tborder-color: var(--color-accent);\n\t}\n\n\t.card-icon {\n\t\tfont-size: 2rem;\n\t\twidth: 60px;\n\t\theight: 60px;\n\t\tdisplay: flex;\n\t\talign-items: center;\n\t\tjustify-content: center;\n\t\tbackground: rgba(255, 255, 255, 0.2);\n\t\tborder-radius: var(--border-radius-lg);\n\t}\n\n\t.card-content {\n\t\tflex: 1;\n\t}\n\n\t.card-title {\n\t\tmargin: 0 0 0.5rem 0;\n\t\tfont-size: 1.2rem;\n\t\tfont-weight: 600;\n\t}\n\n\t.card-description {\n\t\tmargin: 0;\n\t\topacity: 0.8;\n\t\tfont-size: 0.9rem;\n\t}\n\n\t.card-arrow {\n\t\tfont-size: 1.5rem;\n\t\tfont-weight: 700;\n\t\topacity: 0.7;\n\t}\n\n\t.servers-grid, .channels-grid {\n\t\tdisplay: grid;\n\t\tgrid-template-columns: repeat(auto-fit, minmax(300px, 1fr));\n\t\tgap: 1rem;\n\t\tmargin-top: 1rem;\n\t}\n\n\t.server-card, .channel-card {\n\t\tdisplay: flex;\n\t\talign-items: center;\n\t\tgap: 1rem;\n\t\tpadding: 1rem;\n\t\tbackground: rgba(255, 255, 255, 0.05);\n\t\tborder-radius: var(--border-radius);\n\t\tborder: 1px solid var(--color-glass-border);\n\t\ttransition: all 0.3s ease;\n\t}\n\n\t.server-card:hover, .channel-card:hover {\n\t\tbackground: rgba(255, 255, 255, 0.1);\n\t\ttransform: translateY(-2px);\n\t}\n\n\t.server-icon, .channel-icon {\n\t\tfont-size: 1.5rem;\n\t\twidth: 40px;\n\t\theight: 40px;\n\t\tdisplay: flex;\n\t\talign-items: center;\n\t\tjustify-content: center;\n\t\tbackground: var(--color-accent);\n\t\tborder-radius: var(--border-radius);\n\t\tcolor: white;\n\t}\n\n\t.server-name, .channel-name {\n\t\tmargin: 0 0 0.25rem 0;\n\t\tfont-size: 1rem;\n\t\tfont-weight: 600;\n\t\tcolor: var(--color-text);\n\t}\n\n\t.server-description, .channel-server {\n\t\tmargin: 0;\n\t\tfont-size: 0.85rem;\n\t\topacity: 0.7;\n\t}\n\n\t.subsection-title {\n\t\tcolor: var(--color-accent);\n\t\tmargin: 2rem 0 1rem 0;\n\t\tfont-size: 1.2rem;\n\t\tfont-weight: 600;\n\t}\n\n\t.settings-grid {\n\t\tdisplay: grid;\n\t\tgrid-template-columns: repeat(auto-fit, minmax(250px, 1fr));\n\t\tgap: 1rem;\n\t}\n\n\t.setting-item {\n\t\tpadding: 1rem;\n\t\tbackground: rgba(255, 255, 255, 0.05);\n\t\tborder-radius: var(--border-radius);\n\t\tborder: 1px solid var(--color-glass-border);\n\t}\n\n\t.setting-item label {\n\t\tdisplay: block;\n\t\tcolor: var(--color-text);\n\t\topacity: 0.7;\n\t\tfont-size: 0.9rem;\n\t\tmargin-bottom: 0.5rem;\n\t}\n\n\t.setting-value {\n\t\tcolor: var(--color-accent);\n\t\tfont-weight: 600;\n\t\tfont-size: 1rem;\n\t}\n\n\t.card-header {\n\t\tdisplay: flex;\n\t\tjustify-content: space-between;\n\t\talign-items: center;\n\t}\n\n\t.create-btn {\n\t\tbackground: linear-gradient(135deg, var(--color-success), #059669);\n\t\tcolor: white;\n\t\tborder: none;\n\t\tborder-radius: var(--border-radius);\n\t\tpadding: 0.75rem 1.5rem;\n\t\tfont-size: 1rem;\n\t\tfont-weight: 600;\n\t\tcursor: pointer;\n\t\ttransition: all 0.3s ease;\n\t}\n\n\t.create-btn:hover {\n\t\ttransform: translateY(-2px);\n\t\tbox-shadow: var(--shadow-lg);\n\t}\n\n\t.modal-overlay {\n\t\tposition: fixed;\n\t\ttop: 0;\n\t\tleft: 0;\n\t\tright: 0;\n\t\tbottom: 0;\n\t\tbackground: rgba(0, 0, 0, 0.8);\n\t\tdisplay: flex;\n\t\talign-items: center;\n\t\tjustify-content: center;\n\t\tz-index: 1000;\n\t\tbackdrop-filter: blur(8px);\n\t}\n\n\t.modal-content {\n\t\tbackground: var(--color-glass);\n\t\tborder-radius: var(--border-radius-lg);\n\t\tborder: 1px solid var(--color-glass-border);\n\t\tpadding: 2rem;\n\t\tmax-width: 500px;\n\t\twidth: 90%;\n\t\tbackdrop-filter: blur(16px);\n\t}\n\n\t.modal-content h3 {\n\t\tcolor: var(--color-accent);\n\t\tmargin: 0 0 1.5rem 0;\n\t\tfont-size: 1.5rem;\n\t\tfont-weight: 600;\n\t}\n\n\t.form-group {\n\t\tmargin-bottom: 1.5rem;\n\t}\n\n\t.form-group label {\n\t\tdisplay: block;\n\t\tcolor: var(--color-text);\n\t\tmargin-bottom: 0.5rem;\n\t\tfont-weight: 500;\n\t}\n\n\t.form-group input, .form-group textarea {\n\t\twidth: 100%;\n\t\tpadding: 0.75rem;\n\t\tbackground: rgba(255, 255, 255, 0.1);\n\t\tborder: 1px solid var(--color-glass-border);\n\t\tborder-radius: var(--border-radius);\n\t\tcolor: var(--color-text);\n\t\tfont-size: 1rem;\n\t\tbox-sizing: border-box;\n\t}\n\n\t.form-group textarea {\n\t\tresize: vertical;\n\t\tmin-height: 100px;\n\t}\n\n\t.modal-actions {\n\t\tdisplay: flex;\n\t\tgap: 1rem;\n\t\tjustify-content: flex-end;\n\t\tmargin-top: 2rem;\n\t}\n\n\t.primary-btn, .secondary-btn {\n\t\tpadding: 0.75rem 1.5rem;\n\t\tborder-radius: var(--border-radius);\n\t\tfont-size: 1rem;\n\t\tfont-weight: 600;\n\t\tcursor: pointer;\n\t\ttransition: all 0.3s ease;\n\t\tborder: none;\n\t}\n\n\t.primary-btn {\n\t\tbackground: var(--color-accent);\n\t\tcolor: white;\n\t}\n\n\t.secondary-btn {\n\t\tbackground: transparent;\n\t\tcolor: var(--color-text);\n\t\tborder: 1px solid var(--color-glass-border);\n\t}\n\n\t.primary-btn:hover, .secondary-btn:hover {\n\t\ttransform: translateY(-2px);\n\t\tbox-shadow: var(--shadow-md);\n\t}\n\n\t.loading-container {\n\t\ttext-align: center;\n\t\tpadding: 3rem;\n\t}\n\n\t.loading-text {\n\t\tfont-size: 1.2rem;\n\t\tmargin-bottom: 1rem;\n\t\tcolor: var(--color-text);\n\t}\n\n\t.loading-spinner {\n\t\twidth: 40px;\n\t\theight: 40px;\n\t\tborder: 3px solid var(--color-glass-border);\n\t\tborder-top: 3px solid var(--color-accent);\n\t\tborder-radius: 50%;\n\t\tanimation: spin 1s linear infinite;\n\t\tmargin: 0 auto;\n\t}\n\n\t.error-message {\n\t\tcolor: var(--color-error);\n\t\tbackground: rgba(239, 68, 68, 0.1);\n\t\tborder: 1px solid rgba(239, 68, 68, 0.3);\n\t\tborder-radius: var(--border-radius);\n\t\tpadding: 1rem;\n\t\tmargin-bottom: 1rem;\n\t\ttext-align: center;\n\t}\n\n\t@keyframes spin {\n\t\t0% { transform: rotate(0deg); }\n\t\t100% { transform: rotate(360deg); }\n\t}\n\n\t@media (max-width: 768px) {\n\t\t.dashboard-container {\n\t\t\tpadding: 1rem;\n\t\t}\n\n\t\t.dashboard-header {\n\t\t\tflex-direction: column;\n\t\t\tgap: 1rem;\n\t\t\ttext-align: center;\n\t\t}\n\n\t\t.tab-navigation {\n\t\t\tflex-direction: column;\n\t\t}\n\n\t\t.overview-grid {\n\t\t\tgrid-template-columns: 1fr;\n\t\t}\n\n\t\t.servers-grid, .channels-grid {\n\t\t\tgrid-template-columns: 1fr;\n\t\t}\n\t}\n</style> ","usedDeprecatedRules":[]},{"filePath":"/Users/bennerrr/Feathur/client/web/src/routes/debug/+page.svelte","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":9,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":9,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[215,218],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[215,218],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":10,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":10,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[239,242],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[239,242],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":37,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":37,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[928,931],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[928,931],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":52,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":52,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1348,1351],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1348,1351],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":67,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":67,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1782,1785],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1782,1785],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"svelte/valid-compile","severity":1,"message":"Unused CSS selector \".debug-section h1\"\nhttps://svelte.dev/e/css_unused_selector(css_unused_selector)","line":132,"column":2,"nodeType":null,"endLine":132,"endColumn":19}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"<script lang=\"ts\">\n\timport { onMount } from 'svelte';\n\timport { browser } from '$app/environment';\n\timport { apiClient } from '$lib/api/client';\n\n\tlet debugInfo = {\n\t\ttoken: '',\n\t\tbackendHealth: '',\n\t\tuser: null as any,\n\t\tservers: null as any,\n\t\terror: ''\n\t};\n\n\tonMount(async () => {\n\t\tif (!browser) return;\n\n\t\t// Get token from localStorage\n\t\tdebugInfo.token = localStorage.getItem('auth_token') || 'No token found';\n\n\t\ttry {\n\t\t\t// Test backend health\n\t\t\tconst health = await apiClient.healthCheck();\n\t\t\tdebugInfo.backendHealth = JSON.stringify(health, null, 2);\n\n\t\t\t// Test user info\n\t\t\tif (debugInfo.token !== 'No token found') {\n\t\t\t\tapiClient.setToken(debugInfo.token);\n\t\t\t\tconst user = await apiClient.getCurrentUser();\n\t\t\t\tdebugInfo.user = user;\n\t\t\t}\n\n\t\t\t// Test servers\n\t\t\tif (debugInfo.token !== 'No token found') {\n\t\t\t\tconst servers = await apiClient.getServers();\n\t\t\t\tdebugInfo.servers = servers;\n\t\t\t}\n\t\t} catch (err: any) {\n\t\t\tdebugInfo.error = err.message || 'Unknown error';\n\t\t}\n\t});\n\n\tasync function testLogin() {\n\t\ttry {\n\t\t\tconst response = await apiClient.login({ username: 'admin', password: 'password123!' });\n\t\t\tif (response.token) {\n\t\t\t\tlocalStorage.setItem('auth_token', response.token);\n\t\t\t\tdebugInfo.token = response.token;\n\t\t\t\twindow.location.reload();\n\t\t\t} else {\n\t\t\t\tdebugInfo.error = 'Login failed';\n\t\t\t}\n\t\t} catch (err: any) {\n\t\t\tdebugInfo.error = err.message || 'Unknown error';\n\t\t}\n\t}\n\n\tasync function testSuperAdminLogin() {\n\t\ttry {\n\t\t\tconst response = await apiClient.login({ username: 'admin', password: 'password123!' });\n\t\t\tif (response.token) {\n\t\t\t\tlocalStorage.setItem('token', response.token);\n\t\t\t\tdebugInfo.token = response.token;\n\t\t\t\twindow.location.reload();\n\t\t\t} else {\n\t\t\t\tdebugInfo.error = 'Superadmin login failed';\n\t\t\t}\n\t\t} catch (err: any) {\n\t\t\tdebugInfo.error = err.message || 'Unknown error';\n\t\t}\n\t}\n</script>\n\n<svelte:head>\n\t<title>Debug - Fethur</title>\n</svelte:head>\n\n<div class=\"debug-page\">\n\t<h1>🔧 Debug Information</h1>\n\t\n\t<div class=\"debug-section\">\n\t\t<h2>Authentication</h2>\n\t\t<p><strong>Token:</strong> {debugInfo.token ? 'Present' : 'Missing'}</p>\n\t\t\t{#if debugInfo.token === 'No token found'}\n\t\t<button on:click={testLogin}>Login as testuser</button>\n\t\t<button on:click={testSuperAdminLogin}>Login as superadmin</button>\n\t{/if}\n\t</div>\n\n\t<div class=\"debug-section\">\n\t\t<h2>Backend Health</h2>\n\t\t<pre>{debugInfo.backendHealth || 'Not tested'}</pre>\n\t</div>\n\n\t<div class=\"debug-section\">\n\t\t<h2>Current User</h2>\n\t\t<pre>{debugInfo.user ? JSON.stringify(debugInfo.user, null, 2) : 'Not loaded'}</pre>\n\t</div>\n\n\t<div class=\"debug-section\">\n\t\t<h2>Servers</h2>\n\t\t<pre>{debugInfo.servers ? JSON.stringify(debugInfo.servers, null, 2) : 'Not loaded'}</pre>\n\t</div>\n\n\t{#if debugInfo.error}\n\t\t<div class=\"debug-section error\">\n\t\t\t<h2>Error</h2>\n\t\t\t<p>{debugInfo.error}</p>\n\t\t</div>\n\t{/if}\n</div>\n\n<style>\n\t.debug-page {\n\t\tmax-width: 800px;\n\t\tmargin: 0 auto;\n\t\tpadding: 2rem;\n\t\tfont-family: 'Inter', monospace;\n\t\tbackground: var(--color-bg);\n\t\tcolor: var(--color-text);\n\t\tmin-height: 100vh;\n\t}\n\n\t.debug-section {\n\t\tmargin-bottom: 2rem;\n\t\tpadding: 1.5rem;\n\t\tborder: 1px solid var(--color-border);\n\t\tborder-radius: var(--radius-md);\n\t\tbackground: var(--color-surface);\n\t\tbox-shadow: var(--shadow-sm);\n\t}\n\n\t.debug-section h1 {\n\t\tcolor: var(--color-text);\n\t\tfont-size: var(--font-size-2xl);\n\t\tmargin-bottom: 1.5rem;\n\t}\n\n\t.debug-section h2 {\n\t\tmargin-top: 0;\n\t\tcolor: var(--color-text);\n\t\tfont-size: var(--font-size-lg);\n\t\tmargin-bottom: 1rem;\n\t}\n\n\t.debug-section p {\n\t\tcolor: var(--color-text);\n\t\tmargin-bottom: 0.5rem;\n\t}\n\n\tpre {\n\t\tbackground: var(--color-primary);\n\t\tcolor: var(--color-text);\n\t\tpadding: 1rem;\n\t\tborder-radius: var(--radius-sm);\n\t\toverflow-x: auto;\n\t\tborder: 1px solid var(--color-border);\n\t\tfont-size: var(--font-size-sm);\n\t\tline-height: var(--line-height-relaxed);\n\t}\n\n\t.error {\n\t\tborder-color: var(--color-error);\n\t\tbackground: rgba(239, 68, 68, 0.1);\n\t}\n\n\tbutton {\n\t\tbackground: var(--color-accent);\n\t\tcolor: white;\n\t\tborder: none;\n\t\tpadding: 0.75rem 1.5rem;\n\t\tborder-radius: var(--radius-md);\n\t\tcursor: pointer;\n\t\tfont-family: var(--font-family);\n\t\tfont-weight: 500;\n\t\tmargin-right: 0.5rem;\n\t\tmargin-bottom: 0.5rem;\n\t\ttransition: all 0.2s ease;\n\t}\n\n\tbutton:hover {\n\t\tbackground: var(--color-accent-hover);\n\t\ttransform: translateY(-1px);\n\t\tbox-shadow: var(--shadow-md);\n\t}\n</style> ","usedDeprecatedRules":[]},{"filePath":"/Users/bennerrr/Feathur/client/web/src/routes/register/+page.svelte","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'registrationPassword' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":5,"column":6,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":26},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":33,"column":4,"nodeType":"MemberExpression","messageId":"unexpected","endLine":33,"endColumn":17,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[811,862],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"svelte/valid-compile","severity":1,"message":"Unused CSS selector \"input[type=\"email\"]\"\nhttps://svelte.dev/e/css_unused_selector(css_unused_selector)","line":169,"column":22,"nodeType":null,"endLine":169,"endColumn":41}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"<script lang=\"ts\">\n\timport { onMount } from 'svelte';\n\n\tlet authMode = 'public';\n\tlet registrationPassword = '';\n\tlet loading = true;\n\tlet error = '';\n\n\tlet formData = {\n\t\tusername: '',\n\t\tpassword: '',\n\t\tconfirmPassword: '',\n\t\tregistrationPassword: ''\n\t};\n\n\tonMount(async () => {\n\t\ttry {\n\t\t\t// Get auth mode from settings\n\t\t\tconst response = await fetch('/api/setup/status');\n\t\t\tif (response.ok) {\n\t\t\t\tconst data = await response.json();\n\t\t\t\tif (!data.isFirstTime) {\n\t\t\t\t\t// Try to get auth mode from settings\n\t\t\t\t\tconst settingsResponse = await fetch('/api/settings');\n\t\t\t\t\tif (settingsResponse.ok) {\n\t\t\t\t\t\tconst settings = await settingsResponse.json();\n\t\t\t\t\t\tauthMode = settings.auth_mode || 'public';\n\t\t\t\t\t\tregistrationPassword = settings.registration_password || '';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (err) {\n\t\t\tconsole.error('Error loading auth settings:', err);\n\t\t} finally {\n\t\t\tloading = false;\n\t\t}\n\t});\n\n\tasync function handleRegister() {\n\t\tif (formData.password !== formData.confirmPassword) {\n\t\t\terror = 'Passwords do not match';\n\t\t\treturn;\n\t\t}\n\n\t\tif (formData.password.length < 9) {\n\t\t\terror = 'Password must be at least 9 characters long';\n\t\t\treturn;\n\t\t}\n\n\t\t// Check for number and special character\n\t\tlet hasNumber = false;\n\t\tlet hasSpecial = false;\n\t\tfor (const char of formData.password) {\n\t\t\tif (char >= '0' && char <= '9') hasNumber = true;\n\t\t\tif ((char >= '!' && char <= '/') || (char >= ':' && char <= '@') || (char >= '[' && char <= '`') || (char >= '{' && char <= '~')) {\n\t\t\t\thasSpecial = true;\n\t\t\t}\n\t\t}\n\n\t\tif (!hasNumber) {\n\t\t\terror = 'Password must contain at least one number';\n\t\t\treturn;\n\t\t}\n\t\tif (!hasSpecial) {\n\t\t\terror = 'Password must contain at least one special character';\n\t\t\treturn;\n\t\t}\n\n\t\ttry {\n\t\t\tconst response = await fetch('/api/auth/register', {\n\t\t\t\tmethod: 'POST',\n\t\t\t\theaders: {\n\t\t\t\t\t'Content-Type': 'application/json'\n\t\t\t\t},\n\t\t\t\tbody: JSON.stringify({\n\t\t\t\t\tusername: formData.username,\n\t\t\t\t\tpassword: formData.password,\n\t\t\t\t\tregistrationPassword: formData.registrationPassword\n\t\t\t\t})\n\t\t\t});\n\n\t\t\tif (response.ok) {\n\t\t\t\tconst data = await response.json();\n\t\t\t\tlocalStorage.setItem('token', data.token);\n\t\t\t\twindow.location.href = '/dashboard';\n\t\t\t} else {\n\t\t\t\tconst data = await response.json();\n\t\t\t\terror = data.error || 'Registration failed';\n\t\t\t}\n\t\t} catch (err) {\n\t\t\terror = 'Registration failed';\n\t\t}\n\t}\n</script>\n\n{#if loading}\n\t<div class=\"glass-card\">\n\t\t<div style=\"text-align: center; padding: 2rem;\">\n\t\t\t<div style=\"font-size: 1.2rem; margin-bottom: 1rem;\">Loading...</div>\n\t\t\t<div style=\"width: 40px; height: 40px; border: 3px solid var(--color-glass-border); border-top: 3px solid var(--color-accent); border-radius: 50%; animation: spin 1s linear infinite; margin: 0 auto;\"></div>\n\t\t</div>\n\t</div>\n{:else if authMode === 'admin_only'}\n\t<div class=\"glass-card\">\n\t\t<h2 style=\"color: var(--color-accent); margin-bottom: 1.5rem; text-align: center;\">Registration Disabled</h2>\n\t\t<div style=\"text-align: center; margin-bottom: 2rem;\">\n\t\t\t<p style=\"color: var(--color-text); opacity: 0.8;\">\n\t\t\t\tRegistration is currently disabled. Only administrators can create new accounts.\n\t\t\t</p>\n\t\t</div>\n\t\t<div style=\"text-align: center;\">\n\t\t\t<a href=\"/\" class=\"primary-button\" style=\"text-decoration: none; display: inline-block;\">Back to Login</a>\n\t\t</div>\n\t</div>\n{:else}\n\t<div class=\"glass-card\">\n\t\t<h2 style=\"color: var(--color-accent); margin-bottom: 1.5rem; text-align: center;\">Create Account</h2>\n\t\t\n\t\t{#if error}\n\t\t\t<div class=\"error\">{error}</div>\n\t\t{/if}\n\n\t\t<form on:submit|preventDefault={handleRegister}>\n\t\t\t<div style=\"display: flex; flex-direction: column; gap: 1rem;\">\n\t\t\t\t<div>\n\t\t\t\t\t<label for=\"username\">Username</label>\n\t\t\t\t\t<input id=\"username\" type=\"text\" bind:value={formData.username} placeholder=\"Enter username\" required />\n\t\t\t\t</div>\n\t\t\t\t<div>\n\t\t\t\t\t<label for=\"password\">Password</label>\n\t\t\t\t\t<input id=\"password\" type=\"password\" bind:value={formData.password} placeholder=\"Min 9 chars, number, special char\" required />\n\t\t\t\t</div>\n\t\t\t\t<div>\n\t\t\t\t\t<label for=\"confirmPassword\">Confirm Password</label>\n\t\t\t\t\t<input id=\"confirmPassword\" type=\"password\" bind:value={formData.confirmPassword} placeholder=\"Confirm password\" required />\n\t\t\t\t</div>\n\t\t\t\t\n\t\t\t\t{#if authMode === 'open_registration'}\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<label for=\"regPassword\">Registration Password</label>\n\t\t\t\t\t\t<input id=\"regPassword\" type=\"password\" bind:value={formData.registrationPassword} placeholder=\"Enter registration password\" required />\n\t\t\t\t\t</div>\n\t\t\t\t{/if}\n\t\t\t\t\n\t\t\t\t<button type=\"submit\" class=\"primary-button\">Create Account</button>\n\t\t\t</div>\n\t\t</form>\n\n\t\t<div style=\"margin-top: 1.5rem; text-align: center;\">\n\t\t\t<a href=\"/\" style=\"color: var(--color-accent);\">Already have an account? Login here</a>\n\t\t</div>\n\t</div>\n{/if}\n\n<style>\n\tform {\n\t\tdisplay: flex;\n\t\tflex-direction: column;\n\t\tgap: 1rem;\n\t}\n\t\n\tlabel {\n\t\tcolor: var(--color-accent);\n\t\tfont-weight: 500;\n\t\tmargin-bottom: 0.25rem;\n\t\tdisplay: block;\n\t}\n\t\n\tinput[type=\"text\"], input[type=\"email\"], input[type=\"password\"] {\n\t\tbackground: var(--color-glass);\n\t\tcolor: var(--color-text);\n\t\tborder: 1px solid var(--color-glass-border);\n\t\tborder-radius: var(--border-radius);\n\t\tpadding: 0.75rem 1rem;\n\t\tfont-size: 1rem;\n\t\toutline: none;\n\t\ttransition: border 0.2s;\n\t\twidth: 100%;\n\t\tbox-sizing: border-box;\n\t}\n\t\n\tinput:focus {\n\t\tborder: 1.5px solid var(--color-accent);\n\t}\n\t\n\t.primary-button {\n\t\tbackground: var(--color-accent);\n\t\tcolor: #fff;\n\t\tborder: none;\n\t\tborder-radius: var(--border-radius);\n\t\tpadding: 0.75rem 1rem;\n\t\tfont-size: 1.1rem;\n\t\tfont-weight: 600;\n\t\tcursor: pointer;\n\t\ttransition: background 0.2s;\n\t}\n\t\n\t.primary-button:hover:not(:disabled) {\n\t\tbackground: var(--color-accent-hover);\n\t}\n\t\n\t.primary-button:disabled {\n\t\topacity: 0.5;\n\t\tcursor: not-allowed;\n\t}\n\t\n\t.error {\n\t\tcolor: #ef4444;\n\t\tbackground: rgba(239, 68, 68, 0.1);\n\t\tborder: 1px solid rgba(239, 68, 68, 0.3);\n\t\tborder-radius: var(--border-radius);\n\t\tpadding: 0.75rem 1rem;\n\t\tmargin-bottom: 1rem;\n\t\ttext-align: center;\n\t}\n\t\n\t@keyframes spin {\n\t\t0% { transform: rotate(0deg); }\n\t\t100% { transform: rotate(360deg); }\n\t}\n</style> ","usedDeprecatedRules":[]},{"filePath":"/Users/bennerrr/Feathur/client/web/src/routes/settings/+page.svelte","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/bennerrr/Feathur/client/web/src/routes/voice-test/+page.svelte","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":28,"column":4,"nodeType":"MemberExpression","messageId":"unexpected","endLine":28,"endColumn":17,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[666,718],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":51,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":51,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1420,1423],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1420,1423],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":61,"column":4,"nodeType":"MemberExpression","messageId":"unexpected","endLine":61,"endColumn":17,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[1934,1974],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":92,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":92,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2603,2606],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2603,2606],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":94,"column":4,"nodeType":"MemberExpression","messageId":"unexpected","endLine":94,"endColumn":17,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[2676,2722],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":103,"column":4,"nodeType":"MemberExpression","messageId":"unexpected","endLine":103,"endColumn":17,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[2855,2895],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":109,"column":4,"nodeType":"MemberExpression","messageId":"unexpected","endLine":109,"endColumn":15,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2948,2997],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":112,"column":4,"nodeType":"MemberExpression","messageId":"unexpected","endLine":112,"endColumn":17,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[3050,3093],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":118,"column":4,"nodeType":"MemberExpression","messageId":"unexpected","endLine":118,"endColumn":15,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3154,3198],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":121,"column":4,"nodeType":"MemberExpression","messageId":"unexpected","endLine":121,"endColumn":17,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[3265,3317],"text":""},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":129,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":129,"endColumn":17,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"warn"},"fix":{"range":[3498,3545],"text":""},"desc":"Remove the console.warn()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":135,"column":4,"nodeType":"MemberExpression","messageId":"unexpected","endLine":135,"endColumn":17,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"error"},"fix":{"range":[3640,3692],"text":""},"desc":"Remove the console.error()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"<script lang=\"ts\">\n\timport { onMount, onDestroy } from 'svelte';\n\timport { voiceClient } from '$lib/webrtc/voice';\n\timport { authStore } from '$lib/stores/auth';\n\timport { goto } from '$app/navigation';\n\n\tlet isConnected = false;\n\tlet isStreamActive = false;\n\tlet error = '';\n\tlet localStream: MediaStream | null = null;\n\tlet audioDevices: MediaDeviceInfo[] = [];\n\tlet isHttps = false;\n\n\tonMount(async () => {\n\t\t// Check authentication\n\t\tif (!$authStore.token) {\n\t\t\tgoto('/');\n\t\t\treturn;\n\t\t}\n\n\t\t// Check if we're running over HTTPS\n\t\tisHttps = window.location.protocol === 'https:';\n\n\t\t// Load audio devices\n\t\ttry {\n\t\t\tawait loadAudioDevices();\n\t\t} catch (err) {\n\t\t\tconsole.error('Failed to load audio devices:', err);\n\t\t}\n\t});\n\n\tasync function testMicrophone() {\n\t\ttry {\n\t\t\terror = '';\n\t\t\t\n\t\t\t// Check if MediaDevices API is available\n\t\t\tif (!navigator.mediaDevices || !navigator.mediaDevices.getUserMedia) {\n\t\t\t\terror = 'MediaDevices API not available. This usually means:\\n\\n1. You need to use HTTPS (not HTTP)\\n2. Your browser doesn\\'t support this feature\\n3. Microphone permissions are blocked\\n\\nTry accessing the site via HTTPS or check your browser settings.';\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tlocalStream = await navigator.mediaDevices.getUserMedia({\n\t\t\t\taudio: {\n\t\t\t\t\tnoiseSuppression: true,\n\t\t\t\t\techoCancellation: true,\n\t\t\t\t\tautoGainControl: true\n\t\t\t\t},\n\t\t\t\tvideo: false\n\t\t\t});\n\t\t\tisStreamActive = true;\n\t\t} catch (err: any) {\n\t\t\tif (err.name === 'NotAllowedError') {\n\t\t\t\terror = 'Microphone access denied. Please allow microphone permissions in your browser settings and try again.';\n\t\t\t} else if (err.name === 'NotFoundError') {\n\t\t\t\terror = 'No microphone found. Please connect a microphone and try again.';\n\t\t\t} else if (err.name === 'NotSupportedError') {\n\t\t\t\terror = 'Your browser doesn\\'t support microphone access. Please try a different browser.';\n\t\t\t} else {\n\t\t\t\terror = err.message || 'Failed to access microphone';\n\t\t\t}\n\t\t\tconsole.error('Microphone error:', err);\n\t\t}\n\t}\n\n\tasync function stopMicrophone() {\n\t\tif (localStream) {\n\t\t\tlocalStream.getTracks().forEach(track => track.stop());\n\t\t\tlocalStream = null;\n\t\t\tisStreamActive = false;\n\t\t}\n\t}\n\n\tasync function testVoiceConnection() {\n\t\ttry {\n\t\t\terror = '';\n\t\t\tconst token = $authStore.token;\n\t\t\tif (!token) {\n\t\t\t\terror = 'Not authenticated';\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Connect to voice server\n\t\t\tawait voiceClient.connect(token);\n\t\t\tisConnected = true;\n\n\t\t\t// Start local stream\n\t\t\tawait voiceClient.startLocalStream();\n\n\t\t\t// Join test voice channel (channel ID 2 is our voice channel)\n\t\t\tawait voiceClient.joinChannel(2, 1);\n\n\t\t} catch (err: any) {\n\t\t\terror = err.message || 'Failed to connect to voice server';\n\t\t\tconsole.error('Voice connection error:', err);\n\t\t}\n\t}\n\n\tasync function disconnectVoice() {\n\t\ttry {\n\t\t\tawait voiceClient.disconnect();\n\t\t\tisConnected = false;\n\t\t} catch (err) {\n\t\t\tconsole.error('Disconnect error:', err);\n\t\t}\n\t}\n\n\tasync function testSpeaking() {\n\t\ttry {\n\t\t\tconsole.log('Testing speaking functionality...');\n\t\t\tvoiceClient.testSpeaking();\n\t\t} catch (err) {\n\t\t\tconsole.error('Test speaking error:', err);\n\t\t}\n\t}\n\n\tasync function testWebRTCConnection() {\n\t\ttry {\n\t\t\tconsole.log('Testing WebRTC connection...');\n\t\t\tawait voiceClient.testWebRTCConnection();\n\t\t} catch (err) {\n\t\t\tconsole.error('Test WebRTC connection error:', err);\n\t\t}\n\t}\n\n\tasync function loadAudioDevices() {\n\t\ttry {\n\t\t\t// Check if MediaDevices API is available\n\t\t\tif (!navigator.mediaDevices || !navigator.mediaDevices.enumerateDevices) {\n\t\t\t\tconsole.warn('MediaDevices API not available');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\taudioDevices = await voiceClient.getAudioDevices();\n\t\t} catch (err) {\n\t\t\tconsole.error('Failed to load audio devices:', err);\n\t\t}\n\t}\n\n\tonDestroy(() => {\n\t\tstopMicrophone();\n\t\tdisconnectVoice();\n\t});\n</script>\n\n<svelte:head>\n\t<title>Voice Test - Fethur</title>\n</svelte:head>\n\n<div class=\"voice-test-page\">\n\t<div class=\"test-container\">\n\t\t<h1>🎤 Voice Test</h1>\n\t\t<p>Test the voice functionality before using it in chat</p>\n\n\t\t<!-- Important Notice -->\n\t\t<div class=\"notice-section\">\n\t\t\t<h2>⚠️ Important Requirements</h2>\n\t\t\t<p>Voice chat requires:</p>\n\t\t\t<ul>\n\t\t\t\t<li><strong>HTTPS Connection:</strong> Voice features only work over secure connections</li>\n\t\t\t\t<li><strong>Microphone Permission:</strong> Your browser must allow microphone access</li>\n\t\t\t\t<li><strong>Modern Browser:</strong> Chrome, Firefox, Safari, or Edge (latest versions)</li>\n\t\t\t</ul>\n\t\t\t<div class=\"status-grid\">\n\t\t\t\t<p><strong>HTTPS Status:</strong> \n\t\t\t\t\t{#if isHttps}\n\t\t\t\t\t\t✅ Secure Connection\n\t\t\t\t\t{:else}\n\t\t\t\t\t\t❌ HTTP Connection (Voice features may not work)\n\t\t\t\t\t{/if}\n\t\t\t\t</p>\n\t\t\t\t<p><strong>MediaDevices API:</strong> \n\t\t\t\t\t{#if typeof navigator !== 'undefined' && navigator.mediaDevices}\n\t\t\t\t\t\t✅ Available\n\t\t\t\t\t{:else}\n\t\t\t\t\t\t❌ Not Available\n\t\t\t\t\t{/if}\n\t\t\t\t</p>\n\t\t\t</div>\n\t\t\t{#if !isHttps}\n\t\t\t\t<div class=\"warning-box\">\n\t\t\t\t\t<p><strong>⚠️ Warning:</strong> You're not using HTTPS. Voice features may not work properly. Consider accessing the site via HTTPS.</p>\n\t\t\t\t</div>\n\t\t\t{/if}\n\t\t</div>\n\n\t\t<!-- Microphone Test -->\n\t\t<div class=\"test-section\">\n\t\t\t<h2>Microphone Test</h2>\n\t\t\t<p>Test your microphone access and audio settings</p>\n\t\t\t\n\t\t\t<div class=\"test-buttons\">\n\t\t\t\t{#if !isStreamActive}\n\t\t\t\t\t<button class=\"btn-primary\" on:click={testMicrophone}>\n\t\t\t\t\t\t🎤 Test Microphone\n\t\t\t\t\t</button>\n\t\t\t\t{:else}\n\t\t\t\t\t<button class=\"btn-secondary\" on:click={stopMicrophone}>\n\t\t\t\t\t\t🔇 Stop Microphone\n\t\t\t\t\t</button>\n\t\t\t\t{/if}\n\t\t\t</div>\n\n\t\t\t{#if isStreamActive}\n\t\t\t\t<div class=\"status-success\">\n\t\t\t\t\t✅ Microphone is active and working\n\t\t\t\t</div>\n\t\t\t{/if}\n\t\t</div>\n\n\t\t<!-- Voice Connection Test -->\n\t\t<div class=\"test-section\">\n\t\t\t<h2>Voice Server Test</h2>\n\t\t\t<p>Test connection to the voice server and WebRTC functionality</p>\n\t\t\t\n\t\t\t<div class=\"test-buttons\">\n\t\t\t\t{#if !isConnected}\n\t\t\t\t\t<button class=\"btn-primary\" on:click={testVoiceConnection}>\n\t\t\t\t\t\t🔗 Connect to Voice Server\n\t\t\t\t\t</button>\n\t\t\t\t{:else}\n\t\t\t\t\t<button class=\"btn-secondary\" on:click={disconnectVoice}>\n\t\t\t\t\t\t🔌 Disconnect\n\t\t\t\t\t</button>\n\t\t\t\t\t<button class=\"btn-secondary\" on:click={testSpeaking}>\n\t\t\t\t\t\t🎤 Test Speaking\n\t\t\t\t\t</button>\n\t\t\t\t\t<button class=\"btn-secondary\" on:click={testWebRTCConnection}>\n\t\t\t\t\t\t🌐 Test WebRTC Connection\n\t\t\t\t\t</button>\n\t\t\t\t{/if}\n\t\t\t</div>\n\n\t\t\t{#if isConnected}\n\t\t\t\t<div class=\"status-success\">\n\t\t\t\t\t✅ Connected to voice server\n\t\t\t\t</div>\n\t\t\t{/if}\n\t\t</div>\n\n\t\t<!-- Audio Devices -->\n\t\t<div class=\"test-section\">\n\t\t\t<h2>Audio Devices</h2>\n\t\t\t<p>Available input and output devices</p>\n\t\t\t\n\t\t\t<div class=\"devices-list\">\n\t\t\t\t<h3>Input Devices:</h3>\n\t\t\t\t{#each audioDevices.filter(d => d.kind === 'audioinput') as device}\n\t\t\t\t\t<div class=\"device-item\">\n\t\t\t\t\t\t<span class=\"device-name\">{device.label || `Microphone ${device.deviceId.slice(0, 8)}`}</span>\n\t\t\t\t\t\t<span class=\"device-id\">{device.deviceId}</span>\n\t\t\t\t\t</div>\n\t\t\t\t{/each}\n\n\t\t\t\t<h3>Output Devices:</h3>\n\t\t\t\t{#each audioDevices.filter(d => d.kind === 'audiooutput') as device}\n\t\t\t\t\t<div class=\"device-item\">\n\t\t\t\t\t\t<span class=\"device-name\">{device.label || `Speaker ${device.deviceId.slice(0, 8)}`}</span>\n\t\t\t\t\t\t<span class=\"device-id\">{device.deviceId}</span>\n\t\t\t\t\t</div>\n\t\t\t\t{/each}\n\t\t\t</div>\n\t\t</div>\n\n\t\t<!-- Error Display -->\n\t\t{#if error}\n\t\t\t<div class=\"error-message\">\n\t\t\t\t❌ {error}\n\t\t\t</div>\n\t\t{/if}\n\n\t\t<!-- Navigation -->\n\t\t<div class=\"navigation\">\n\t\t\t<a href=\"/chat\" class=\"btn-secondary\">← Back to Chat</a>\n\t\t</div>\n\t</div>\n</div>\n\n<style>\n\t.voice-test-page {\n\t\tmin-height: 100vh;\n\t\tbackground: var(--color-bg, #1a1a1a);\n\t\tcolor: var(--color-text, #ffffff);\n\t\tpadding: 2rem;\n\t\tfont-family: var(--font-family, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif);\n\t}\n\n\t.test-container {\n\t\tmax-width: 800px;\n\t\tmargin: 0 auto;\n\t}\n\n\th1 {\n\t\tfont-size: var(--font-size-3xl, 2rem);\n\t\tmargin-bottom: 0.5rem;\n\t\tcolor: var(--color-text, #ffffff);\n\t\ttext-align: center;\n\t}\n\n\t.test-container > p {\n\t\ttext-align: center;\n\t\tcolor: var(--color-text-muted, #888);\n\t\tmargin-bottom: 2rem;\n\t}\n\n\t.notice-section {\n\t\tbackground: var(--color-surface, #2d2d2d);\n\t\tborder: 1px solid var(--color-border, #404040);\n\t\tborder-radius: var(--radius-lg, 8px);\n\t\tpadding: 1.5rem;\n\t\tmargin-bottom: 1.5rem;\n\t\ttext-align: center;\n\t}\n\n\t.notice-section h2 {\n\t\tfont-size: var(--font-size-xl, 1.25rem);\n\t\tmargin-bottom: 0.5rem;\n\t\tcolor: var(--color-text, #ffffff);\n\t}\n\n\t.notice-section p {\n\t\tcolor: var(--color-text-muted, #888);\n\t\tmargin-bottom: 1rem;\n\t}\n\n\t.notice-section ul {\n\t\tlist-style: none;\n\t\tpadding: 0;\n\t\tmargin-bottom: 1rem;\n\t}\n\n\t.notice-section li {\n\t\tmargin-bottom: 0.5rem;\n\t\tcolor: var(--color-text-muted, #888);\n\t}\n\n\t.notice-section strong {\n\t\tcolor: var(--color-text, #ffffff);\n\t}\n\n\t.status-grid {\n\t\tdisplay: grid;\n\t\tgrid-template-columns: 1fr 1fr;\n\t\tgap: 1rem;\n\t\tmargin-bottom: 1rem;\n\t}\n\n\t.status-grid p {\n\t\tmargin: 0;\n\t\tpadding: 0.5rem;\n\t\tbackground: var(--color-primary, #2d2d2d);\n\t\tborder: 1px solid var(--color-border, #404040);\n\t\tborder-radius: var(--radius-sm, 4px);\n\t\ttext-align: center;\n\t}\n\n\t.warning-box {\n\t\tpadding: 1rem;\n\t\tbackground: rgba(245, 158, 11, 0.1);\n\t\tborder: 1px solid #f59e0b;\n\t\tborder-radius: var(--radius-md, 6px);\n\t\tmargin-top: 1rem;\n\t}\n\n\t.warning-box p {\n\t\tmargin: 0;\n\t\tcolor: #f59e0b;\n\t}\n\n\t.test-section {\n\t\tbackground: var(--color-surface, #2d2d2d);\n\t\tborder: 1px solid var(--color-border, #404040);\n\t\tborder-radius: var(--radius-lg, 8px);\n\t\tpadding: 1.5rem;\n\t\tmargin-bottom: 1.5rem;\n\t}\n\n\t.test-section h2 {\n\t\tfont-size: var(--font-size-xl, 1.25rem);\n\t\tmargin-bottom: 0.5rem;\n\t\tcolor: var(--color-text, #ffffff);\n\t}\n\n\t.test-section p {\n\t\tcolor: var(--color-text-muted, #888);\n\t\tmargin-bottom: 1rem;\n\t}\n\n\t.test-buttons {\n\t\tdisplay: flex;\n\t\tgap: 1rem;\n\t\tmargin-bottom: 1rem;\n\t}\n\n\t.btn-primary, .btn-secondary {\n\t\tpadding: 0.75rem 1.5rem;\n\t\tborder: none;\n\t\tborder-radius: var(--radius-md, 6px);\n\t\tfont-weight: 500;\n\t\tcursor: pointer;\n\t\ttransition: all 0.2s ease;\n\t\ttext-decoration: none;\n\t\tdisplay: inline-flex;\n\t\talign-items: center;\n\t\tgap: 0.5rem;\n\t}\n\n\t.btn-primary {\n\t\tbackground: var(--color-accent, #3b82f6);\n\t\tcolor: white;\n\t}\n\n\t.btn-primary:hover {\n\t\tbackground: var(--color-accent-hover, #2563eb);\n\t\ttransform: translateY(-1px);\n\t}\n\n\t.btn-secondary {\n\t\tbackground: var(--color-primary, #2d2d2d);\n\t\tcolor: var(--color-text, #ffffff);\n\t\tborder: 1px solid var(--color-border, #404040);\n\t}\n\n\t.btn-secondary:hover {\n\t\tbackground: var(--color-accent, #3b82f6);\n\t\tcolor: white;\n\t\ttransform: translateY(-1px);\n\t}\n\n\t.status-success {\n\t\tpadding: 0.75rem;\n\t\tbackground: rgba(16, 185, 129, 0.1);\n\t\tborder: 1px solid var(--color-success, #10b981);\n\t\tborder-radius: var(--radius-md, 6px);\n\t\tcolor: var(--color-success, #10b981);\n\t\tfont-weight: 500;\n\t}\n\n\t.error-message {\n\t\tpadding: 1rem;\n\t\tbackground: rgba(239, 68, 68, 0.1);\n\t\tborder: 1px solid var(--color-error, #ef4444);\n\t\tborder-radius: var(--radius-md, 6px);\n\t\tcolor: var(--color-error, #ef4444);\n\t\tmargin-bottom: 1rem;\n\t}\n\n\t.devices-list h3 {\n\t\tfont-size: var(--font-size-lg, 1.125rem);\n\t\tmargin: 1rem 0 0.5rem 0;\n\t\tcolor: var(--color-text, #ffffff);\n\t}\n\n\t.device-item {\n\t\tdisplay: flex;\n\t\tjustify-content: space-between;\n\t\talign-items: center;\n\t\tpadding: 0.5rem;\n\t\tbackground: var(--color-primary, #2d2d2d);\n\t\tborder: 1px solid var(--color-border, #404040);\n\t\tborder-radius: var(--radius-sm, 4px);\n\t\tmargin-bottom: 0.5rem;\n\t}\n\n\t.device-name {\n\t\tfont-weight: 500;\n\t\tcolor: var(--color-text, #ffffff);\n\t}\n\n\t.device-id {\n\t\tfont-size: var(--font-size-sm, 0.875rem);\n\t\tcolor: var(--color-text-muted, #888);\n\t\tfont-family: monospace;\n\t}\n\n\t.navigation {\n\t\ttext-align: center;\n\t\tmargin-top: 2rem;\n\t}\n</style> ","usedDeprecatedRules":[]},{"filePath":"/Users/bennerrr/Feathur/client/web/src/test/setup.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":40,"column":9,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":40,"endColumn":12,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[921,924],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[921,924],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { vi } from 'vitest';\nimport { beforeAll } from 'vitest';\n\n// Mock browser globals\nbeforeAll(() => {\n\t// Mock window.matchMedia\n\tObject.defineProperty(window, 'matchMedia', {\n\t\twritable: true,\n\t\tvalue: vi.fn().mockImplementation(query => ({\n\t\t\tmatches: false,\n\t\t\tmedia: query,\n\t\t\tonchange: null,\n\t\t\taddListener: vi.fn(), // deprecated\n\t\t\tremoveListener: vi.fn(), // deprecated\n\t\t\taddEventListener: vi.fn(),\n\t\t\tremoveEventListener: vi.fn(),\n\t\t\tdispatchEvent: vi.fn(),\n\t\t})),\n\t});\n\n\t// Mock localStorage\n\tconst localStorageMock = {\n\t\tgetItem: vi.fn(),\n\t\tsetItem: vi.fn(),\n\t\tremoveItem: vi.fn(),\n\t\tclear: vi.fn(),\n\t};\n\tObject.defineProperty(window, 'localStorage', {\n\t\twritable: true,\n\t\tvalue: localStorageMock,\n\t});\n\n\t// Mock WebSocket\n\tconst WebSocketMock = vi.fn().mockImplementation(() => ({\n\t\tclose: vi.fn(),\n\t\tsend: vi.fn(),\n\t\treadyState: 1,\n\t\taddEventListener: vi.fn(),\n\t\tremoveEventListener: vi.fn(),\n\t})) as any;\n\t\n\t// Add required static properties\n\tWebSocketMock.CONNECTING = 0;\n\tWebSocketMock.OPEN = 1;\n\tWebSocketMock.CLOSING = 2;\n\tWebSocketMock.CLOSED = 3;\n\t\n\tglobal.WebSocket = WebSocketMock;\n});","usedDeprecatedRules":[]},{"filePath":"/Users/bennerrr/Feathur/client/web/svelte.config.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/bennerrr/Feathur/client/web/tailwind.config.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/bennerrr/Feathur/client/web/vite.config.ts","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":19,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":19,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[466,531],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { sveltekit } from '@sveltejs/kit/vite';\nimport { defineConfig } from 'vite';\nimport fs from 'fs';\nimport path from 'path';\n\nexport default defineConfig({\n\tplugins: [sveltekit()],\n\tserver: {\n\t\thost: true,\n\t\tport: 5173,\n\t\tstrictPort: false,\n\t\thttps: (() => {\n\t\t\ttry {\n\t\t\t\treturn {\n\t\t\t\t\tkey: fs.readFileSync(path.resolve(__dirname, '../../ssl/key.pem')),\n\t\t\t\t\tcert: fs.readFileSync(path.resolve(__dirname, '../../ssl/cert.pem'))\n\t\t\t\t};\n\t\t\t} catch (error) {\n\t\t\t\tconsole.log('SSL certificates not found, running without HTTPS');\n\t\t\t\treturn undefined;\n\t\t\t}\n\t\t})(),\n\t\tproxy: {\n\t\t\t'/api': {\n\t\t\t\ttarget: 'http://localhost:8081',\n\t\t\t\tchangeOrigin: true,\n\t\t\t\tsecure: false\n\t\t\t},\n\t\t\t'/health': {\n\t\t\t\ttarget: 'http://localhost:8081',\n\t\t\t\tchangeOrigin: true,\n\t\t\t\tsecure: false\n\t\t\t},\n\t\t\t'/ws': {\n\t\t\t\ttarget: 'ws://localhost:8081',\n\t\t\t\tws: true,\n\t\t\t\tchangeOrigin: true,\n\t\t\t\tsecure: false\n\t\t\t},\n\t\t\t'/voice': {\n\t\t\t\ttarget: 'ws://localhost:8081',\n\t\t\t\tws: true,\n\t\t\t\tchangeOrigin: true,\n\t\t\t\tsecure: false\n\t\t\t}\n\t\t}\n\t},\n\tbuild: {\n\t\ttarget: 'es2022',\n\t\tminify: 'esbuild',\n\t\tsourcemap: true\n\t},\n\toptimizeDeps: {\n\t\tinclude: ['socket.io-client', 'lucide-svelte']\n\t},\n\tdefine: {\n\t\t// Define global constants\n\t\t__DEV__: JSON.stringify(process.env.NODE_ENV === 'development')\n\t}\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/bennerrr/Feathur/client/web/vitest.config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]}]