name: Security Scanning

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 2 * * 1' # Weekly on Monday at 2 AM
  workflow_dispatch: # Allow manual triggering

env:
  GO_VERSION: '1.24.5'

permissions:
  actions: read
  contents: read
  security-events: write

jobs:
  static-analysis:
    name: Static Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Install static analysis tools
        run: |
          echo "Installing static analysis tools..."
          go install golang.org/x/lint/golint@latest || echo "Failed to install golint"
          go install honnef.co/go/tools/cmd/staticcheck@latest || echo "Failed to install staticcheck"
          go install github.com/kisielk/errcheck@latest || echo "Failed to install errcheck"

      - name: Run static analysis
        run: |
          cd server
          echo "Running golint..."
          golint ./... || echo "Golint completed with findings"
          echo "Running staticcheck..."
          staticcheck ./... || echo "Staticcheck completed with findings"
          echo "Running errcheck..."
          errcheck ./... || echo "Errcheck completed with findings"
        continue-on-error: true

  gosec:
    name: Gosec Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Install Gosec
        run: |
          echo "Installing Gosec..."
          go install github.com/securego/gosec/v2/cmd/gosec@latest || echo "Failed to install Gosec"

      - name: Run Gosec Security Scanner
        run: |
          cd server
          echo "Running Gosec security scan..."
          gosec -fmt sarif -out ../gosec-results.sarif ./... || echo "Gosec scan completed with findings"
          
      - name: Upload SARIF file
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: gosec-results.sarif
          category: 'Gosec'
        continue-on-error: true

  dependency-scanning:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Install Nancy
        run: |
          echo "Installing Nancy..."
          go install github.com/sonatypecommunity/nancy@latest || echo "Failed to install Nancy"

      - name: Run Nancy vulnerability scan
        run: |
          cd server
          echo "Running Nancy vulnerability scan..."
          nancy sleuth -o json > ../nancy-results.json || echo "Nancy scan completed with findings"

      - name: Install Trivy
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-fs-results.sarif'
          ignore-unfixed: true
          severity: 'CRITICAL,HIGH'

      - name: Upload Trivy FS results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-fs-results.sarif'
          category: 'Trivy FS Scan'
        continue-on-error: true

  frontend-security:
    name: Frontend Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'
          cache-dependency-path: 'client/web/pnpm-lock.yaml'

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: latest

      - name: Install dependencies
        run: |
          cd client/web
          pnpm install --frozen-lockfile

      - name: Run npm audit
        run: |
          cd client/web
          pnpm audit --audit-level moderate || echo "npm audit completed with findings"

      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high
        continue-on-error: true

  license-compliance:
    name: License Compliance Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Install go-licenses
        run: |
          echo "Installing go-licenses..."
          go install github.com/google/go-licenses@latest || echo "Failed to install go-licenses"

      - name: Check licenses
        run: |
          cd server
          echo "Running license compliance check..."
          go-licenses check ./... --disallowed_types=forbidden,restricted || echo "License check completed with warnings"
        continue-on-error: true

  supply-chain-security:
    name: Supply Chain Security
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Generate SBOM with Go mod
        run: |
          cd server
          echo "Generating SBOM with Go modules..."
          go mod download || echo "Failed to download modules"
          go list -m all > ../go-modules.txt || echo "Failed to generate modules list"
          echo "Go modules list generated"

      - name: Run Grype vulnerability scanner
        id: grype_scan
        uses: anchore/scan-action@v3
        with:
          path: "./server"
          fail-build: false
          output-format: sarif
        continue-on-error: true

      - name: Upload Grype scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: ${{ steps.grype_scan.outputs.sarif }}
        continue-on-error: true

  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [static-analysis, gosec, dependency-scanning, frontend-security, license-compliance, supply-chain-security]
    if: always()
    steps:
      - name: Security scan summary
        run: |
          echo "=== Security Scan Summary ==="
          echo "All security scans have completed."
          echo "Check the GitHub Security tab for detailed results."
          echo "Individual job results:"
          echo "- Static Analysis: ${{ needs.static-analysis.result }}"
          echo "- Gosec: ${{ needs.gosec.result }}"
          echo "- Dependency Scanning: ${{ needs.dependency-scanning.result }}"
          echo "- Frontend Security: ${{ needs.frontend-security.result }}"
          echo "- License Compliance: ${{ needs.license-compliance.result }}"
          echo "- Supply Chain Security: ${{ needs.supply-chain-security.result }}"