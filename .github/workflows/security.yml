name: Security Scanning

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 2 * * 1' # Weekly on Monday at 2 AM

env:
  GO_VERSION: '1.24'

permissions:
  actions: read
  contents: read
  security-events: write

jobs:
  semgrep:
    name: Semgrep SAST
    runs-on: ubuntu-latest
    if: (github.actor != 'dependabot[bot]')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Semgrep
        uses: semgrep/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/secrets
            p/go
            p/docker
            p/kubernetes
        env:
          SEMGREP_APP_TOKEN: ${{ secrets.SEMGREP_APP_TOKEN }}

  gosec:
    name: Gosec Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Run Gosec Security Scanner
        uses: securecodewarrior/github-action-gosec@master
        with:
          args: '-fmt sarif -out gosec-results.sarif ./server/...'
          
      - name: Upload SARIF file
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: gosec-results.sarif
          category: 'Gosec'
        continue-on-error: true

  nancy:
    name: Nancy Vulnerability Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Install Nancy
        run: go install github.com/sonatypecommunity/nancy@latest

      - name: Run Nancy vulnerability scan
        run: |
          cd server
          go list -json -m all | nancy sleuth --loud

  grype:
    name: Grype Vulnerability Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Grype vulnerability scanner
        uses: anchore/grype-action@v0.6.0
        with:
          path: "./server"
          fail-build: false
          output-format: sarif
          output-file: grype-results.sarif

      - name: Upload Grype scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: grype-results.sarif
          category: 'Grype'
        continue-on-error: true

  secrets-scan:
    name: Secrets Scanning
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run TruffleHog OSS
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified

  license-check:
    name: License Compliance
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Install go-licenses
        run: go install github.com/google/go-licenses@latest

      - name: Check licenses
        run: |
          cd server
          go-licenses check ./... --disallowed_types=forbidden,restricted

  supply-chain-security:
    name: Supply Chain Security
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Generate SBOM with Syft
        uses: anchore/sbom-action@v0
        with:
          path: ./server
          format: spdx-json
          output-file: fethur-sbom.spdx.json

      - name: Upload SBOM
        uses: actions/upload-artifact@v4
        with:
          name: fethur-sbom
          path: fethur-sbom.spdx.json

      - name: Run Syft vulnerability scan
        run: |
          curl -sSfL https://raw.githubusercontent.com/anchore/grype/main/install.sh | sh -s -- -b /usr/local/bin
          grype fethur-sbom.spdx.json -o json > grype-sbom-results.json

      - name: Upload vulnerability results
        uses: actions/upload-artifact@v4
        with:
          name: grype-sbom-results
          path: grype-sbom-results.json

  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [semgrep, gosec, nancy, grype, secrets-scan, license-check, supply-chain-security]
    if: always()
    steps:
      - name: Security Scan Summary
        run: |
          echo "=== Security Scan Summary ==="
          echo "✅ Semgrep SAST: ${{ needs.semgrep.result }}"
          echo "✅ Gosec Go Security: ${{ needs.gosec.result }}"
          echo "✅ Nancy Vulnerability Scan: ${{ needs.nancy.result }}"
          echo "✅ Grype Vulnerability Scan: ${{ needs.grype.result }}"
          echo "✅ Secrets Scanning: ${{ needs.secrets-scan.result }}"
          echo "✅ License Compliance: ${{ needs.license-check.result }}"
          echo "✅ Supply Chain Security: ${{ needs.supply-chain-security.result }}"
          echo ""
          echo "To view detailed results:"
          echo "1. Check the Security tab in GitHub repository"
          echo "2. Review SARIF uploads for detailed findings"
          echo "3. Download artifacts for SBOM and vulnerability reports"