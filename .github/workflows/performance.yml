name: Performance Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  GO_VERSION: '1.24'

jobs:
  load-test:
    name: Load Testing
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Install dependencies
        run: |
          cd server
          go mod download
          go mod verify

      - name: Build server
        run: |
          cd server
          go build -o fethur-server ./cmd/server

      - name: Start server
        run: |
          cd server
          ./fethur-server &
          echo $! > server.pid
          sleep 10

      - name: Install hey (load testing tool)
        run: |
          go install github.com/rakyll/hey@latest

      - name: Run basic load test
        run: |
          echo "Running basic load test..."
          hey -n 100 -c 10 http://localhost:8081/health || echo "Load test completed"

      - name: Run API load test
        run: |
          echo "Running API load test..."
          hey -n 50 -c 5 http://localhost:8081/api/setup/status || echo "API load test completed"

      - name: Stop server
        if: always()
        run: |
          cd server
          if [ -f server.pid ]; then
            kill $(cat server.pid) || true
            rm server.pid
          fi

  memory-profiling:
    name: Memory Profiling
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Install dependencies
        run: |
          cd server
          go mod download
          go mod verify

      - name: Run memory profiling
        run: |
          cd server
          echo "Running memory profiling..."
          go test -memprofile=mem.prof -bench=. ./... || echo "Memory profiling completed"

      - name: Analyze memory profile
        run: |
          cd server
          if [ -f mem.prof ]; then
            echo "Memory profile generated"
            go tool pprof -top mem.prof || echo "Memory profile analysis completed"
          else
            echo "No memory profile generated"
          fi

  cpu-profiling:
    name: CPU Profiling
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Install dependencies
        run: |
          cd server
          go mod download
          go mod verify

      - name: Run CPU profiling
        run: |
          cd server
          echo "Running CPU profiling..."
          go test -cpuprofile=cpu.prof -bench=. ./... || echo "CPU profiling completed"

      - name: Analyze CPU profile
        run: |
          cd server
          if [ -f cpu.prof ]; then
            echo "CPU profile generated"
            go tool pprof -top cpu.prof || echo "CPU profile analysis completed"
          else
            echo "No CPU profile generated"
          fi

  frontend-performance:
    name: Frontend Performance
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'
          cache-dependency-path: 'client/web/pnpm-lock.yaml'

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: latest

      - name: Install dependencies
        run: |
          cd client/web
          pnpm install --frozen-lockfile

      - name: Build for analysis
        run: |
          cd client/web
          pnpm build

      - name: Analyze bundle size
        run: |
          cd client/web
          echo "=== Bundle Size Analysis ==="
          echo "Total build size:"
          du -sh build/
          echo ""
          echo "Largest files:"
          find build/ -type f -name "*.js" -exec du -sh {} \; | sort -hr | head -10
          echo ""
          echo "File count by type:"
          find build/ -type f | sed 's/.*\.//' | sort | uniq -c | sort -nr

      - name: Check for performance issues
        run: |
          cd client/web
          echo "=== Performance Checks ==="
          echo "Checking for large dependencies..."
          if [ -f "node_modules/.pnpm-debug.log" ]; then
            echo "pnpm debug log found"
          fi
          echo "Checking for unused dependencies..."
          # This would require additional tools like depcheck
          echo "Performance analysis completed"

  performance-summary:
    name: Performance Summary
    runs-on: ubuntu-latest
    needs: [load-test, memory-profiling, cpu-profiling, frontend-performance]
    if: always()
    steps:
      - name: Performance test summary
        run: |
          echo "=== Performance Test Summary ==="
          echo "All performance tests have completed."
          echo "Individual job results:"
          echo "- Load Testing: ${{ needs.load-test.result }}"
          echo "- Memory Profiling: ${{ needs.memory-profiling.result }}"
          echo "- CPU Profiling: ${{ needs.cpu-profiling.result }}"
          echo "- Frontend Performance: ${{ needs.frontend-performance.result }}"
          echo ""
          echo "Performance recommendations:"
          echo "1. Monitor memory usage in production"
          echo "2. Optimize bundle size for frontend"
          echo "3. Consider implementing caching strategies"
          echo "4. Monitor API response times" 