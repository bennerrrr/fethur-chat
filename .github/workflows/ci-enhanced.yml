name: Enhanced CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  GO_VERSION: '1.24'

permissions:
  contents: read
  actions: read
  security-events: write
  pull-requests: write

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: ['1.23', '1.24']
        os: [ubuntu-latest]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go ${{ matrix.go-version }}
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}
          cache: true

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ matrix.go-version }}-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-${{ matrix.go-version }}-
            ${{ runner.os }}-go-

      - name: Install dependencies
        run: |
          cd server
          go mod download
          go mod verify

      - name: Run tests
        run: |
          cd server
          go test -v ./...

      - name: Run tests with race detection
        run: |
          cd server
          go test -race -v ./...

      - name: Run tests with coverage
        if: matrix.go-version == '1.24'
        run: |
          cd server
          go test -coverprofile=coverage.out -covermode=atomic ./...
          go tool cover -func=coverage.out

      - name: Upload coverage to Codecov
        if: matrix.go-version == '1.24'
        uses: codecov/codecov-action@v5
        with:
          file: ./server/coverage.out
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v4
        with:
          version: latest
          working-directory: ./server
          args: --timeout=5m --verbose

      - name: Check Go formatting
        run: |
          cd server
          if [ -n "$(gofmt -l .)" ]; then
            echo "Go files are not formatted. Run 'gofmt -w .'"
            gofmt -l .
            exit 1
          fi

      - name: Check Go imports
        run: |
          cd server
          go install golang.org/x/tools/cmd/goimports@latest
          if [ -n "$(goimports -l .)" ]; then
            echo "Go imports are not formatted. Run 'goimports -w .'"
            goimports -l .
            exit 1
          fi

      - name: Go vet
        run: |
          cd server
          go vet ./...

  build:
    name: Build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os: [linux, darwin, windows]
        arch: [amd64, arm64]
        exclude:
          - os: windows
            arch: arm64
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Build binary
        run: |
          cd server
          GOOS=${{ matrix.os }} GOARCH=${{ matrix.arch }} go build -ldflags="-s -w -X main.version=${{ github.sha }}" -o fethur-server-${{ matrix.os }}-${{ matrix.arch }} ./cmd/server

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: fethur-server-${{ matrix.os }}-${{ matrix.arch }}
          path: server/fethur-server-${{ matrix.os }}-${{ matrix.arch }}*
          retention-days: 30

  benchmarks:
    name: Benchmarks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Run benchmarks
        run: |
          cd server
          go test -bench=. -benchmem ./... | tee benchmark-results.txt

      - name: Upload benchmark results
        uses: actions/upload-artifact@v4
        with:
          name: benchmark-results
          path: server/benchmark-results.txt

  quality-gates:
    name: Quality Gates
    runs-on: ubuntu-latest
    needs: [test, lint]
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Download coverage report
        run: |
          cd server
          go test -coverprofile=coverage.out -covermode=atomic ./...

      - name: Check test coverage
        run: |
          cd server
          COVERAGE=$(go tool cover -func=coverage.out | grep total | awk '{print $3}' | sed 's/%//')
          echo "Coverage: $COVERAGE%"
          
          # Set coverage threshold
          THRESHOLD=70
          
          if (( $(echo "$COVERAGE < $THRESHOLD" | bc -l) )); then
            echo "❌ Coverage $COVERAGE% is below $THRESHOLD% threshold"
            exit 1
          else
            echo "✅ Coverage $COVERAGE% meets $THRESHOLD% threshold"
          fi

      - name: Comment PR with coverage
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const coverage = fs.readFileSync('server/coverage.out', 'utf8');
            const lines = coverage.split('\n');
            const totalLine = lines.find(line => line.includes('total:'));
            const coveragePercent = totalLine ? totalLine.split('\t')[2] : 'Unknown';
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## 📊 Code Coverage Report\n\n**Total Coverage:** ${coveragePercent}\n\n✅ Coverage check passed!`
            });

  container-build:
    name: Container Build & Test
    runs-on: ubuntu-latest
    needs: [test, lint]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./docker/Dockerfile
          tags: fethur-server:test
          load: true
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test Docker image
        run: |
          # Start container
          docker run --rm -d --name fethur-test -p 8080:8080 fethur-server:test
          
          # Wait for startup
          sleep 30
          
          # Test health endpoint
          timeout 30 bash -c 'until curl -f http://localhost:8080/health; do sleep 2; done'
          
          # Stop container
          docker stop fethur-test

      - name: Run container security scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'fethur-server:test'
          format: 'table'
          severity: 'CRITICAL,HIGH'

  notify:
    name: Notify
    runs-on: ubuntu-latest
    needs: [test, lint, build, quality-gates, container-build]
    if: always() && github.ref == 'refs/heads/main'
    steps:
      - name: Notify Slack on failure
        if: ${{ contains(needs.*.result, 'failure') }}
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: '#ci-cd'
          message: |
            🚨 CI Pipeline Failed!
            Repository: ${{ github.repository }}
            Branch: ${{ github.ref }}
            Commit: ${{ github.sha }}
            Actor: ${{ github.actor }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Notify Slack on success
        if: ${{ !contains(needs.*.result, 'failure') }}
        uses: 8398a7/action-slack@v3
        with:
          status: success
          channel: '#ci-cd'
          message: |
            ✅ CI Pipeline Successful!
            Repository: ${{ github.repository }}
            Branch: ${{ github.ref }}
            Commit: ${{ github.sha }}
            Actor: ${{ github.actor }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}