name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  GO_VERSION: '1.21'
  CGO_ENABLED: 1

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Install dependencies
        run: |
          cd server
          go mod download
          go mod verify

      - name: Run tests
        run: |
          cd server
          go test -v ./...
        env:
          CGO_ENABLED: ${{ env.CGO_ENABLED }}

      - name: Run tests with race detection
        run: |
          cd server
          go test -race -v ./...
        env:
          CGO_ENABLED: ${{ env.CGO_ENABLED }}

      - name: Run tests with coverage
        run: |
          cd server
          go test -coverprofile=coverage.out -covermode=atomic ./...
        env:
          CGO_ENABLED: ${{ env.CGO_ENABLED }}

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./server/coverage.out
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Install golangci-lint
        uses: golangci/golangci-lint-action@v4
        with:
          version: latest

      - name: Run golangci-lint
        run: |
          cd server
          golangci-lint run --timeout=5m

  build:
    name: Build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os: [linux, darwin, windows]
        arch: [amd64, arm64]
        exclude:
          - os: windows
            arch: arm64
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Build binary
        run: |
          cd server
          GOOS=${{ matrix.os }} GOARCH=${{ matrix.arch }} CGO_ENABLED=1 go build -ldflags="-s -w" -o fethur-server-${{ matrix.os }}-${{ matrix.arch }} ./cmd/server
        env:
          CGO_ENABLED: ${{ env.CGO_ENABLED }}

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: fethur-server-${{ matrix.os }}-${{ matrix.arch }}
          path: server/fethur-server-${{ matrix.os }}-${{ matrix.arch }}

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  docker:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: [test, lint]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        run: |
          docker build -t fethur-server:latest -f docker/Dockerfile .
          docker images

      - name: Test Docker image
        run: |
          docker run --rm -d --name fethur-test -p 8080:8080 fethur-server:latest
          sleep 10
          curl -f http://localhost:8080/health || exit 1
          docker stop fethur-test 