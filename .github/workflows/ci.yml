name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  GO_VERSION: '1.24'

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: ['1.23', '1.24']
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go ${{ matrix.go-version }}
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}
          cache: true

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ matrix.go-version }}-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-${{ matrix.go-version }}-
            ${{ runner.os }}-go-

      - name: Install dependencies
        run: |
          cd server
          go mod download
          go mod verify

      - name: Run tests
        run: |
          cd server
          go test -v ./...

      - name: Run tests with race detection
        run: |
          cd server
          go test -race -v ./...

      - name: Run tests with coverage
        if: matrix.go-version == '1.24'
        run: |
          cd server
          go test -coverprofile=coverage.out -covermode=atomic ./...
          go tool cover -func=coverage.out

      - name: Upload coverage to Codecov
        if: matrix.go-version == '1.24'
        uses: codecov/codecov-action@v5
        with:
          files: ./server/coverage.out
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Install golangci-lint
        uses: golangci/golangci-lint-action@v8
        with:
          version: latest
          working-directory: ./server

  build:
    name: Build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os: [linux, darwin, windows]
        arch: [amd64, arm64]
        exclude:
          - os: windows
            arch: arm64
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Build binary
        run: |
          cd server
          GOOS=${{ matrix.os }} GOARCH=${{ matrix.arch }} go build -ldflags="-s -w" -o fethur-server-${{ matrix.os }}-${{ matrix.arch }} ./cmd/server

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: fethur-server-${{ matrix.os }}-${{ matrix.arch }}
          path: server/fethur-server-${{ matrix.os }}-${{ matrix.arch }}

  benchmarks:
    name: Benchmarks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Run benchmarks
        run: |
          cd server
          go test -bench=. -benchmem ./... || echo "No benchmarks found"

  quality-gates:
    name: Quality Gates
    runs-on: ubuntu-latest
    needs: [test, lint, build]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Check code complexity
        run: |
          cd server
          echo "Checking code complexity..."
          # Install gocyclo if not available
          go install github.com/fzipp/gocyclo/cmd/gocyclo@latest
          gocyclo -over 15 . || echo "High complexity functions found"

      - name: Check for TODO comments
        run: |
          echo "Checking for TODO comments..."
          find . -name "*.go" -exec grep -l "TODO" {} \; | head -10 || echo "No TODO comments found"

      - name: Check for FIXME comments
        run: |
          echo "Checking for FIXME comments..."
          find . -name "*.go" -exec grep -l "FIXME" {} \; | head -10 || echo "No FIXME comments found"

  docker:
    name: Container Build & Test
    runs-on: ubuntu-latest
    needs: [test, lint]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        run: |
          echo "Building Docker image..."
          docker build -t fethur-server:latest -f docker/Dockerfile . || {
            echo "Docker build failed. Checking Dockerfile..."
            cat docker/Dockerfile
            echo "Checking if Docker daemon is running..."
            docker info
            exit 1
          }

      - name: Test Docker image
        run: |
          docker run --rm -d --name fethur-test -p 8080:8080 fethur-server:latest
          sleep 30
          curl -f http://localhost:8080/health || exit 1
          docker stop fethur-test

      - name: Run container security scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'fethur-server:latest'
          format: 'sarif'
          output: 'trivy-container-results.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Upload container scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-container-results.sarif'
          category: 'Container Security'
        continue-on-error: true 