name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  GO_VERSION: '1.24'

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Install dependencies
        run: |
          cd server
          go mod download
          go mod verify

      - name: Run tests
        run: |
          cd server
          go test -v ./...

      - name: Run tests with race detection
        run: |
          cd server
          go test -race -v ./...

      - name: Run tests with coverage
        run: |
          cd server
          go test -coverprofile=coverage.out -covermode=atomic ./...

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        if: always()
        with:
          file: ./server/coverage.out
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Install golangci-lint
        uses: golangci/golangci-lint-action@v4
        with:
          version: latest
          working-directory: ./server

      - name: Run golangci-lint
        run: |
          cd server
          golangci-lint run --timeout=5m

  build:
    name: Build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os: [linux, darwin, windows]
        arch: [amd64, arm64]
        exclude:
          - os: windows
            arch: arm64
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Build binary
        run: |
          cd server
          GOOS=${{ matrix.os }} GOARCH=${{ matrix.arch }} go build -ldflags="-s -w" -o fethur-server-${{ matrix.os }}-${{ matrix.arch }} ./cmd/server

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: fethur-server-${{ matrix.os }}-${{ matrix.arch }}
          path: server/fethur-server-${{ matrix.os }}-${{ matrix.arch }}

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
      actions: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'table'
          ignore-unfixed: true
          severity: 'CRITICAL,HIGH'

      - name: Run Trivy vulnerability scanner (SARIF format)
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          ignore-unfixed: true
          severity: 'CRITICAL,HIGH'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always() && github.event_name != 'pull_request'
        with:
          sarif_file: 'trivy-results.sarif'
          category: 'Trivy Scan'
        continue-on-error: true

      - name: Display security scan results
        if: always()
        run: |
          echo "=== Security Scan Results ==="
          if [ -f "trivy-results.sarif" ]; then
            echo "SARIF results file generated successfully"
            echo "To enable GitHub Code Scanning, go to:"
            echo "Settings > Security & analysis > Code scanning > Enable"
          else
            echo "No SARIF results file found"
          fi

  docker:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: [test, lint]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Debug directory structure
        run: |
          pwd
          ls -la
          ls -la docker/
          ls -la server/

      - name: Build Docker image
        run: |
          echo "Building Docker image..."
          docker build -t fethur-server:latest -f docker/Dockerfile . || {
            echo "Docker build failed. Checking Dockerfile..."
            cat docker/Dockerfile
            echo "Checking if Docker daemon is running..."
            docker info
            exit 1
          }

      - name: Test Docker image
        run: |
          docker run --rm -d --name fethur-test -p 8080:8080 fethur-server:latest
          sleep 30
          curl -f http://localhost:8080/health || exit 1
          docker stop fethur-test 